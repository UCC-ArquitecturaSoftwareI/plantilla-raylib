// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';


  read_ = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };


} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }
} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_HAS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {

  // If the type reflection proposal is available, use the new
  // "WebAssembly.Function" constructor.
  // Otherwise, construct a minimal wasm module importing the JS function and
  // re-exporting it.
  if (typeof WebAssembly.Function === "function") {
    var typeNames = {
      'i': 'i32',
      'j': 'i64',
      'f': 'f32',
      'd': 'f64'
    };
    var type = {
      parameters: [],
      results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]
    };
    for (var i = 1; i < sig.length; ++i) {
      type.parameters.push(typeNames[sig[i]]);
    }
    return new WebAssembly.Function(type, func);
  }

  // The module is static, with the exception of the type section, which is
  // generated based on the signature passed in.
  var typeSection = [
    0x01, // id: section,
    0x00, // length: 0 (placeholder)
    0x01, // count: 1
    0x60, // form: func
  ];
  var sigRet = sig.slice(0, 1);
  var sigParam = sig.slice(1);
  var typeCodes = {
    'i': 0x7f, // i32
    'j': 0x7e, // i64
    'f': 0x7d, // f32
    'd': 0x7c, // f64
  };

  // Parameters, length + signatures
  typeSection.push(sigParam.length);
  for (var i = 0; i < sigParam.length; ++i) {
    typeSection.push(typeCodes[sigParam[i]]);
  }

  // Return values, length + signatures
  // With no multi-return in MVP, either 0 (void) or 1 (anything else)
  if (sigRet == 'v') {
    typeSection.push(0x00);
  } else {
    typeSection = typeSection.concat([0x01, typeCodes[sigRet]]);
  }

  // Write the overall length of the type section back into the section header
  // (excepting the 2 bytes for the section id and length)
  typeSection[1] = typeSection.length - 2;

  // Rest of the module is static
  var bytes = new Uint8Array([
    0x00, 0x61, 0x73, 0x6d, // magic ("\0asm")
    0x01, 0x00, 0x00, 0x00, // version: 1
  ].concat(typeSection, [
    0x02, 0x07, // import section
      // (import "e" "f" (func 0 (type 0)))
      0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,
    0x07, 0x05, // export section
      // (export "f" (func 0 (type 0)))
      0x01, 0x01, 0x66, 0x00, 0x00,
  ]));

   // We can compile this wasm module synchronously because it is very small.
  // This accepts an import (at "e.f"), that it reroutes to an export (at "f")
  var module = new WebAssembly.Module(bytes);
  var instance = new WebAssembly.Instance(module, {
    'e': {
      'f': func
    }
  });
  var wrappedFunc = instance.exports['f'];
  return wrappedFunc;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret = table.length;

  // Grow the table
  try {
    table.grow(1);
  } catch (err) {
    if (!err instanceof RangeError) {
      throw err;
    }
    throw 'Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.';
  }

  // Insert new element
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!err instanceof TypeError) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  // TODO(sbc): Look into implementing this to allow re-using of table slots
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 320,
  'maximum': 320,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (typeof EmterpreterAsync === 'object' && EmterpreterAsync.state) {
    assert(opts && opts.async, 'The call to ' + ident + ' is running asynchronously. If this was intended, add the async option to the ccall/cwrap call.');
    assert(!EmterpreterAsync.restartFunc, 'Cannot have multiple async ccalls in flight at once');
    return new Promise(function(resolve) {
      EmterpreterAsync.restartFunc = func;
      EmterpreterAsync.asyncFinalizers.push(function(ret) {
        if (stack !== 0) stackRestore(stack);
        resolve(convertReturnValue(ret));
      });
    });
  }

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  // If this is an async ccall, ensure we return a promise
  if (opts && opts.async) return Promise.resolve(ret);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 32128,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5275008,
    DYNAMIC_BASE = 5275008,
    DYNAMICTOP_PTR = 31936;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');


function abortStackOverflowEmterpreter() {
  abort("Emterpreter stack overflow! Decrease the recursion level or increase EMT_STACK_MAX in tools/emterpretify.py (current value " + EMT_STACK_MAX + ").");
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'TOTAL_MEMORY')) Object.defineProperty(Module, 'TOTAL_MEMORY', { configurable: true, get: function() { abort('Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY') } });

assert(INITIAL_TOTAL_MEMORY >= TOTAL_STACK, 'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
assert(INITIAL_TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)-1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)-2];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;







// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'raylibTemplate.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
    ,
    'global': {
      'NaN': NaN,
      'Infinity': Infinity
    },
    'global.Math': Math,
    'asm2wasm': asm2wasmImports
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
   // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

Module['asm'] = createWasm;

// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 31104;
/* global initializers */ /*__ATINIT__.push();*/








/* no memory initializer */
var tempDoublePtr = 32112
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___lock() {}

  
    

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function(fd) {
        // TODO: when all syscalls use wasi, can remove the next line
        if (fd === undefined) fd = SYSCALLS.get();
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
      x = x | 0;
      return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
    }  

  function ___unlock() {}

  
  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_close(
  ) {
  return _fd_close.apply(null, arguments)
  }

  
  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_read(
  ) {
  return _fd_read.apply(null, arguments)
  }

  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_seek(
  ) {
  return _fd_seek.apply(null, arguments)
  }

  
  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_write(
  ) {
  return _fd_write.apply(null, arguments)
  }

  function _abort() {
      abort();
    }

   

   

  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          var Browser_setImmediate_messageHandler = function(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      noExitRuntime = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          err('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'unwind';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function() {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function() {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function(func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: 1,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL !== 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function(canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function(lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function() {
        abort('Module.requestFullScreen has been replaced by Module.requestFullscreen (without a capital S)');
      },exitFullscreen:function() {
        // This is workaround for chrome. Trying to exit from fullscreen
        // not in fullscreen state will cause "TypeError: Document not active"
        // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
        if (!Browser.isFullscreen) {
          return false;
        }
  
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['msExitFullscreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
        return true;
      },nextRAF:0,fakeRequestAnimationFrame:function(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function(func) {
        if (typeof requestAnimationFrame === 'function') {
          requestAnimationFrame(func);
          return;
        }
        var RAF = Browser.fakeRequestAnimationFrame;
        RAF(func);
      },safeCallback:function(func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function() {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function() { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function(func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function(func, timeout) {
        noExitRuntime = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function(func, timeout) {
        noExitRuntime = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function(func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch(event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function(url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        readAsync(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function(width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,contextAttributes:{alpha:false,depth:false,stencil:false,antialias:false},stringCache:{},setErrorCode:function(code) {
        EGL.errorCode = code;
      },chooseConfig:function(display, attribList, config, config_size, numConfigs) {
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
  
        if (attribList) {
          // read attribList if it is non-null
          for(;;) {
            var param = HEAP32[((attribList)>>2)];
            if (param == 0x3021 /*EGL_ALPHA_SIZE*/) {
              var alphaSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.alpha = (alphaSize > 0);
            } else if (param == 0x3025 /*EGL_DEPTH_SIZE*/) {
              var depthSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.depth = (depthSize > 0);
            } else if (param == 0x3026 /*EGL_STENCIL_SIZE*/) {
              var stencilSize = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.stencil = (stencilSize > 0);
            } else if (param == 0x3031 /*EGL_SAMPLES*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples > 0);
            } else if (param == 0x3032 /*EGL_SAMPLE_BUFFERS*/) {
              var samples = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.antialias = (samples == 1);
            } else if (param == 0x3100 /*EGL_CONTEXT_PRIORITY_LEVEL_IMG*/) {
              var requestedPriority = HEAP32[(((attribList)+(4))>>2)];
              EGL.contextAttributes.lowLatency = (requestedPriority != 0x3103 /*EGL_CONTEXT_PRIORITY_LOW_IMG*/);
            } else if (param == 0x3038 /*EGL_NONE*/) {
                break;
            }
            attribList += 8;
          }
        }
  
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)]=1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAP32[((config)>>2)]=62002;
        }
  
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,removeAllEventListeners:function() {
        for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function() {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },deferredCalls:[],deferCall:function(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function(targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function() {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],removeAllHandlersOnTarget:function(target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function(eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        };
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },getNodeNameForTarget:function(target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },fullscreenEnabled:function() {
        return document.fullscreenEnabled
        // Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitFullscreenEnabled.
        // TODO: If Safari at some point ships with unprefixed version, update the version check above.
        || document.webkitFullscreenEnabled
         ;
      }};
  
  function __requestPointerLock(target) {
      if (target.requestPointerLock) {
        target.requestPointerLock();
      } else if (target.msRequestPointerLock) {
        target.msRequestPointerLock();
      } else {
        // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
        // or if the whole browser just doesn't support the feature.
        if (document.body.requestPointerLock
          || document.body.msRequestPointerLock
          ) {
          return -3;
        } else {
          return -1;
        }
      }
      return 0;
    }function _emscripten_exit_pointerlock() {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(__requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else if (document.msExitPointerLock) {
        document.msExitPointerLock();
      } else {
        return -1;
      }
      return 0;
    }

  
  
  function __maybeCStringToJsString(cString) {
      return cString === cString + 0 ? UTF8ToString(cString) : cString;
    }
  
  var __specialEventTargets=[0, typeof document !== 'undefined' ? document : 0, typeof window !== 'undefined' ? window : 0];function __findEventTarget(target) {
      var domElement = __specialEventTargets[target] || (typeof document !== 'undefined' ? document.querySelector(__maybeCStringToJsString(target)) : undefined);
      return domElement;
    }
  
  function __getBoundingClientRect(e) {
      return e.getBoundingClientRect();
    }function _emscripten_get_element_css_size(target, width, height) {
      target = __findEventTarget(target);
      if (!target) return -4;
  
      var rect = __getBoundingClientRect(target);
      // N.b. .getBoundingClientRect(element).width & .height do not exist on IE 8, so IE 9+ is needed.
      HEAPF64[((width)>>3)]=rect.width;
      HEAPF64[((height)>>3)]=rect.height;
  
      return 0;
    }

  
  function __fillGamepadEventData(eventStruct, e) {
      HEAPF64[((eventStruct)>>3)]=e.timestamp;
      for(var i = 0; i < e.axes.length; ++i) {
        HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
      }
      for(var i = 0; i < e.buttons.length; ++i) {
        if (typeof(e.buttons[i]) === 'object') {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
        } else {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
        }
      }
      for(var i = 0; i < e.buttons.length; ++i) {
        if (typeof(e.buttons[i]) === 'object') {
          HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
        } else {
          HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
        }
      }
      HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
      HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
      HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
      HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
      stringToUTF8(e.id, eventStruct + 1304, 64);
      stringToUTF8(e.mapping, eventStruct + 1368, 64);
    }function _emscripten_get_gamepad_status(index, gamepadState) {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_gamepad_status() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
  
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      __fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  function _emscripten_get_num_gamepads() {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_num_gamepads() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
      // N.B. Do not call emscripten_get_num_gamepads() unless having first called emscripten_sample_gamepad_data(), and that has returned EMSCRIPTEN_RESULT_SUCCESS.
      // Otherwise the following line will throw an exception.
      return JSEvents.lastGamepadState.length;
    }

  
  function __fillPointerlockChangeEventData(eventStruct, e) {
      var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
      var isPointerlocked = !!pointerLockElement;
      HEAP32[((eventStruct)>>2)]=isPointerlocked;
      var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
      var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
      stringToUTF8(nodeName, eventStruct + 4, 128);
      stringToUTF8(id, eventStruct + 132, 128);
    }function _emscripten_get_pointerlock_status(pointerlockStatus) {
      if (pointerlockStatus) __fillPointerlockChangeEventData(pointerlockStatus);
      if (!document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
      return 0;
    }

   

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],programInfos:{},stringCache:{},unpackAlignment:4,init:function() {
        var miniTempFloatBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferFloatViews[i] = miniTempFloatBuffer.subarray(0, i+1);
        }
  
        var miniTempIntBuffer = new Int32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferIntViews[i] = miniTempIntBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function(table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBufferFloatViews:[0],miniTempBufferIntViews:[0],getSource:function(shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },createContext:function(canvas, webGLContextAttributes) {
  
  
  
  
  
        var ctx = 
          (canvas.getContext("webgl", webGLContextAttributes)
            // https://caniuse.com/#feat=webgl
            );
  
  
        if (!ctx) return 0;
  
        var handle = GL.registerContext(ctx, webGLContextAttributes);
  
  
  
        return handle;
      },registerContext:function(ctx, webGLContextAttributes) {
        var handle = _malloc(8); // Make space on the heap to store GL context attributes that need to be accessible as shared between threads.
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
  
  
  
        return handle;
      },makeContextCurrent:function(contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function(contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        _free(GL.contexts[contextHandle]);
        GL.contexts[contextHandle] = null;
      },acquireInstancedArraysExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('ANGLE_instanced_arrays');
        if (ext) {
          ctx['vertexAttribDivisor'] = function(index, divisor) { ext['vertexAttribDivisorANGLE'](index, divisor); };
          ctx['drawArraysInstanced'] = function(mode, first, count, primcount) { ext['drawArraysInstancedANGLE'](mode, first, count, primcount); };
          ctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { ext['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
        }
      },acquireVertexArrayObjectExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('OES_vertex_array_object');
        if (ext) {
          ctx['createVertexArray'] = function() { return ext['createVertexArrayOES'](); };
          ctx['deleteVertexArray'] = function(vao) { ext['deleteVertexArrayOES'](vao); };
          ctx['bindVertexArray'] = function(vao) { ext['bindVertexArrayOES'](vao); };
          ctx['isVertexArray'] = function(vao) { return ext['isVertexArrayOES'](vao); };
        }
      },acquireDrawBuffersExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('WEBGL_draw_buffers');
        if (ext) {
          ctx['drawBuffers'] = function(n, bufs) { ext['drawBuffersWEBGL'](n, bufs); };
        }
      },initExtensions:function(context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          GL.acquireInstancedArraysExtension(GLctx);
          GL.acquireVertexArrayObjectExtension(GLctx);
          GL.acquireDrawBuffersExtension(GLctx);
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2",
                                               // Old style prefixed forms of extensions (but still currently used on e.g. iPhone Xs as
                                               // tested on iOS 12.4.1):
                                               "WEBKIT_WEBGL_compressed_texture_pvrtc"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
        exts.forEach(function(ext) {
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        });
      },populateUniformTable:function(program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // If we are dealing with an array, e.g. vec4 foo[3], strip off the array index part to canonicalize that "foo", "foo[]",
          // and "foo[0]" will mean the same. Loop below will populate foo[1] and foo[2].
          if (name.slice(-1) == ']') {
            name = name.slice(0, name.lastIndexOf('['));
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _emscripten_glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glBeginQueryEXT(target, id) {
      GLctx.disjointTimerQueryExt['beginQueryEXT'](target, GL.timerQueriesEXT[id]);
    }

  function _emscripten_glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }

  function _emscripten_glBindBuffer(target, buffer) {
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _emscripten_glBindVertexArrayOES(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _emscripten_glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _emscripten_glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }

  function _emscripten_glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _emscripten_glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDeleteQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var query = GL.timerQueriesEXT[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.disjointTimerQueryExt['deleteQueryEXT'](query);
        GL.timerQueriesEXT[id] = null;
      }
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glDeleteVertexArraysOES(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _emscripten_glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _emscripten_glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDrawArraysInstancedANGLE(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  
  var __tempFixedLengthArray=[];function _emscripten_glDrawBuffersWEBGL(n, bufs) {
  
      var bufArray = __tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }

  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _emscripten_glDrawElementsInstancedANGLE(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glEnable(x0) { GLctx['enable'](x0) }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glEndQueryEXT(target) {
      GLctx.disjointTimerQueryExt['endQueryEXT'](target);
    }

  function _emscripten_glFinish() { GLctx['finish']() }

  function _emscripten_glFlush() { GLctx['flush']() }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _emscripten_glFrontFace(x0) { GLctx['frontFace'](x0) }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _emscripten_glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      __glGenObject(n, ids, 'createFramebuffer', GL.framebuffers
        );
    }

  function _emscripten_glGenQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt['createQueryEXT']();
        if (!query) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.timerQueriesEXT);
        query.name = id;
        GL.timerQueriesEXT[id] = query;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    }

  function _emscripten_glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _emscripten_glGenVertexArraysOES(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      var numBytesWrittenExclNull = (bufSize > 0 && name) ? stringToUTF8(info.name, name, bufSize) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      var numBytesWrittenExclNull = (bufSize > 0 && name) ? stringToUTF8(info.name, name, bufSize) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type != 0 && type != 1) {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0: HEAP32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 2: HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 4: HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0; break;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                err('GL_INVALID_ENUM in glGet' + type + 'v: Unknown object returned from WebGL getParameter(' + name_ + ')! (error: ' + e + ')');
                return;
              }
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            err('GL_INVALID_ENUM in glGet' + type + 'v: Native code calling glGet' + type + 'v(' + name_ + ') and it returns ' + result + ' of type ' + typeof(result) + '!');
            return;
        }
      }
  
      switch (type) {
        case 1: (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 0: HEAP32[((p)>>2)]=ret;    break;
        case 2:   HEAPF32[((p)>>2)]=ret;  break;
        case 4: HEAP8[((p)>>0)]=ret ? 1 : 0; break;
      }
    }function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 4);
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  function _emscripten_glGetError() {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0/*GL_NO_ERROR*/;
      return error;
    }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 2);
    }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)]=result;
    }

  function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 0);
    }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _emscripten_glGetQueryObjecti64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }

  function _emscripten_glGetQueryObjectivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }

  function _emscripten_glGetQueryObjectui64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((params)>>2)]=tempI64[0],HEAP32[(((params)+(4))>>2)]=tempI64[1]);
    }

  function _emscripten_glGetQueryObjectuivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.timerQueriesEXT[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)]=ret;
    }

  function _emscripten_glGetQueryivEXT(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.disjointTimerQueryExt['getQueryEXT'](target, pname);
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      var numBytesWrittenExclNull = (bufSize > 0 && source) ? stringToUTF8(result, source, bufSize) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  
  function stringToNewUTF8(jsString) {
      var length = lengthBytesUTF8(jsString)+1;
      var cString = _malloc(length);
      stringToUTF8(jsString, cString, length);
      return cString;
    }function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          ret = stringToNewUTF8(exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)]=data; break;
          case 2: HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 2);
    }

  function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 0);
    }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)]=data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)]=data; break;
          case 2: HEAPF32[((params)>>2)]=data; break;
          case 5: HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            case 5: HEAP32[(((params)+(i*4))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
    }

  function _emscripten_glHint(x0, x1) { GLctx['hint'](x0, x1) }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx['isEnabled'](x0) }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glIsProgram(program) {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function _emscripten_glIsQueryEXT(id) {
      var query = GL.timerQueriesEXT[id];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt['isQueryEXT'](query);
    }

  function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_glIsTexture(id) {
      var texture = GL.textures[id];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _emscripten_glIsVertexArrayOES(array) {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx['isVertexArray'](vao);
    }

  function _emscripten_glLineWidth(x0) { GLctx['lineWidth'](x0) }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  function _emscripten_glQueryCounterEXT(id, target) {
      GLctx.disjointTimerQueryExt['queryCounterEXT'](GL.timerQueriesEXT[id], target);
    }

  
  
  function __computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  function __colorChannelsInGlTextureFormat(format) {
      // Micro-optimizations for size: map format to size by subtracting smallest enum value (0x1902) from all values first.
      // Also omit the most common size value (1) from the list, which is assumed by formats not on the list.
      var colorChannels = {
        // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
        // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
        5: 3,
        6: 4,
        // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
        8: 2,
        29502: 3,
        29504: 4,
      };
      return colorChannels[format - 0x1902]||1;
    }
  
  function __heapObjectForWebGLType(type) {
      // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
      // smaller values for the heap, for shorter generated code size.
      // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
      // (since most types are HEAPU16)
      type -= 0x1400;
  
      if (type == 1) return HEAPU8;
  
  
      if (type == 4) return HEAP32;
  
      if (type == 6) return HEAPF32;
  
      if (type == 5
        || type == 28922
        )
        return HEAPU32;
  
      return HEAPU16;
    }
  
  function __heapAccessShiftForWebGLHeap(heap) {
      return 31 - Math.clz32(heap.BYTES_PER_ELEMENT);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var heap = __heapObjectForWebGLType(type);
      var shift = __heapAccessShiftForWebGLHeap(heap);
      var byteSize = 1<<shift;
      var sizePerPixel = __colorChannelsInGlTextureFormat(format) * byteSize;
      var bytes = __computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      return heap.subarray(pixels >> shift, pixels + bytes >> shift);
    }function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1fv(location, count, value) {
  
  
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1iv(location, count, value) {
  
  
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferIntViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1iv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2fv(location, count, value) {
  
  
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2iv(location, count, value) {
  
  
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferIntViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
          view[i+1] = HEAP32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2iv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3fv(location, count, value) {
  
  
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3iv(location, count, value) {
  
  
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferIntViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
          view[i+1] = HEAP32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAP32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3iv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4fv(location, count, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4iv(location, count, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferIntViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
          view[i+1] = HEAP32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAP32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAP32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4iv(GL.uniforms[location], view);
    }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  
  
      if (9*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }

  function _emscripten_glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }

  function _emscripten_glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }

  function _emscripten_glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }

  function _emscripten_glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }

  function _emscripten_glVertexAttribDivisorANGLE(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
      target = __findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock
        && !target.msRequestPointerLock
        ) {
        return -1;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(__requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return __requestPointerLock(target);
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  function _emscripten_run_script(ptr) {
      eval(UTF8ToString(ptr));
    }

  function _emscripten_sample_gamepad_data() {
      return (JSEvents.lastGamepadState = (navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null)))
        ? 0 : -1;
    }

  
  
  function __fillMouseEventData(eventStruct, e, target) {
      HEAP32[((eventStruct)>>2)]=e.screenX;
      HEAP32[(((eventStruct)+(4))>>2)]=e.screenY;
      HEAP32[(((eventStruct)+(8))>>2)]=e.clientX;
      HEAP32[(((eventStruct)+(12))>>2)]=e.clientY;
      HEAP32[(((eventStruct)+(16))>>2)]=e.ctrlKey;
      HEAP32[(((eventStruct)+(20))>>2)]=e.shiftKey;
      HEAP32[(((eventStruct)+(24))>>2)]=e.altKey;
      HEAP32[(((eventStruct)+(28))>>2)]=e.metaKey;
      HEAP16[(((eventStruct)+(32))>>1)]=e.button;
      HEAP16[(((eventStruct)+(34))>>1)]=e.buttons;
      var movementX = e["movementX"]
        || (e.screenX-JSEvents.previousScreenX)
        ;
      var movementY = e["movementY"]
        || (e.screenY-JSEvents.previousScreenY)
        ;
  
      HEAP32[(((eventStruct)+(36))>>2)]=movementX;
      HEAP32[(((eventStruct)+(40))>>2)]=movementY;
  
      var rect = __specialEventTargets.indexOf(target) < 0 ? __getBoundingClientRect(target) : {'left':0,'top':0};
      HEAP32[(((eventStruct)+(44))>>2)]=e.clientX - rect.left;
      HEAP32[(((eventStruct)+(48))>>2)]=e.clientY - rect.top;
  
      // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/emscripten-core/emscripten/pull/4997
      // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
      if (e.type !== 'wheel' && e.type !== 'mousewheel') {
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      }
    }function __registerMouseEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc( 64 );
      target = __findEventTarget(target);
  
      var mouseEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        // TODO: Make this access thread safe, or this could update live while app is reading it.
        __fillMouseEventData(JSEvents.mouseEvent, e, target);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: mouseEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_click_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click", targetThread);
      return 0;
    }

  
  
  function __fillFullscreenChangeEventData(eventStruct, e) {
      var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
      var isFullscreen = !!fullscreenElement;
      HEAP32[((eventStruct)>>2)]=isFullscreen;
      HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
      // If transitioning to fullscreen, report info about the element that is now fullscreen.
      // If transitioning to windowed mode, report info about the element that just was fullscreen.
      var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
      var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
      var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
      stringToUTF8(nodeName, eventStruct + 8, 128);
      stringToUTF8(id, eventStruct + 136, 128);
      HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
      HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
      HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
      HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
      if (isFullscreen) {
        JSEvents.previousFullscreenElement = fullscreenElement;
      }
    }function __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.fullscreenChangeEvent) JSEvents.fullscreenChangeEvent = _malloc( 280 );
  
      var fullscreenChangeEventhandlerFunc = function(ev) {
        var e = ev || event;
  
        var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
  
        __fillFullscreenChangeEventData(fullscreenChangeEvent, e);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: false,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: fullscreenChangeEventhandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_fullscreenchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = __findEventTarget(target);
      if (!target) return -4;
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
  
  
      // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
      // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
      __registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
  
      return 0;
    }

  
  function __registerGamepadEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.gamepadEvent) JSEvents.gamepadEvent = _malloc( 1432 );
  
      var gamepadEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var gamepadEvent = JSEvents.gamepadEvent;
        __fillGamepadEventData(gamepadEvent, e["gamepad"]);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, gamepadEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: gamepadEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_gamepadconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      __registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
      return 0;
    }

  function _emscripten_set_gamepaddisconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      __registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
      return 0;
    }

  
  function __registerKeyEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.keyEvent) JSEvents.keyEvent = _malloc( 164 );
  
      var keyEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var keyEventData = JSEvents.keyEvent;
        stringToUTF8(e.key ? e.key : "", keyEventData + 0, 32);
        stringToUTF8(e.code ? e.code : "", keyEventData + 32, 32);
        HEAP32[(((keyEventData)+(64))>>2)]=e.location;
        HEAP32[(((keyEventData)+(68))>>2)]=e.ctrlKey;
        HEAP32[(((keyEventData)+(72))>>2)]=e.shiftKey;
        HEAP32[(((keyEventData)+(76))>>2)]=e.altKey;
        HEAP32[(((keyEventData)+(80))>>2)]=e.metaKey;
        HEAP32[(((keyEventData)+(84))>>2)]=e.repeat;
        stringToUTF8(e.locale ? e.locale : "", keyEventData + 88, 32);
        stringToUTF8(e.char ? e.char : "", keyEventData + 120, 32);
        HEAP32[(((keyEventData)+(152))>>2)]=e.charCode;
        HEAP32[(((keyEventData)+(156))>>2)]=e.keyCode;
        HEAP32[(((keyEventData)+(160))>>2)]=e.which;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, keyEventData, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: keyEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_keypress_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);
      return 0;
    }


  
  function __registerTouchEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc( 1684 );
  
      target = __findEventTarget(target);
  
      var touchEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var touches = {};
        for(var i = 0; i < e.touches.length; ++i) {
          var touch = e.touches[i];
          touch.changed = false;
          touches[touch.identifier] = touch;
        }
        for(var i = 0; i < e.changedTouches.length; ++i) {
          var touch = e.changedTouches[i];
          touches[touch.identifier] = touch;
          touch.changed = true;
        }
        for(var i = 0; i < e.targetTouches.length; ++i) {
          var touch = e.targetTouches[i];
          touches[touch.identifier].onTarget = true;
        }
  
        var touchEvent = JSEvents.touchEvent;
        var ptr = touchEvent;
        HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
        HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
        HEAP32[(((ptr)+(12))>>2)]=e.altKey;
        HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
        ptr += 20; // Advance to the start of the touch array.
        var targetRect = __getBoundingClientRect(target);
        var numTouches = 0;
        for(var i in touches) {
          var t = touches[i];
          HEAP32[((ptr)>>2)]=t.identifier;
          HEAP32[(((ptr)+(4))>>2)]=t.screenX;
          HEAP32[(((ptr)+(8))>>2)]=t.screenY;
          HEAP32[(((ptr)+(12))>>2)]=t.clientX;
          HEAP32[(((ptr)+(16))>>2)]=t.clientY;
          HEAP32[(((ptr)+(20))>>2)]=t.pageX;
          HEAP32[(((ptr)+(24))>>2)]=t.pageY;
          HEAP32[(((ptr)+(28))>>2)]=t.changed;
          HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
          HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
          HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
  
          ptr += 52;
  
          if (++numTouches >= 32) {
            break;
          }
        }
        HEAP32[((touchEvent)>>2)]=numTouches;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, touchEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: touchEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
      return 0;
    }

  function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
      return 0;
    }

  function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
      return 0;
    }

  function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
      return 0;
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }

  function _glBindBuffer(target, buffer) {
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 2);
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          ret = stringToNewUTF8(exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _glPixelStorei(pname, param) {
      if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferFloatViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  var GLFW={Window:function(id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function(id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function(keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
  
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function(win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function(event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
  
        dynCall_vii(GLFW.active.charFunc, GLFW.active.id, charCode);
      },onKeyChanged:function(keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
        if (!GLFW.active.keyFunc) return;
  
  
        if (repeat) status = 2; // GLFW_REPEAT
        dynCall_viiiii(GLFW.active.keyFunc, GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
      },onGamepadConnected:function(event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function(event) {
        GLFW.refreshJoysticks();
      },onKeydown:function(event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function(event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function(event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function(event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
  
        dynCall_vidd(GLFW.active.cursorPosFunc, GLFW.active.id, Browser.mouseX, Browser.mouseY);
      },DOMToGLFWMouseButton:function(event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        dynCall_vii(GLFW.active.cursorEnterFunc, GLFW.active.id, 1);
      },onMouseleave:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorEnterFunc) return;
  
        dynCall_vii(GLFW.active.cursorEnterFunc, GLFW.active.id, 0);
      },onMouseButtonChanged:function(event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (!GLFW.active.mouseButtonFunc) return;
  
  
        dynCall_viiii(GLFW.active.mouseButtonFunc, GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
      },onMouseButtonDown:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function(event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
  
        var sx = 0;
        var sy = 0;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
          sy = event.wheelDeltaY;
        } else {
          sx = event.deltaX;
          sy = event.deltaY;
        }
  
        dynCall_vidd(GLFW.active.scrollFunc, GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function(width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.windowSizeFunc) return;
  
  
        dynCall_viii(GLFW.active.windowSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },onFramebufferSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (!GLFW.active.framebufferSizeFunc) return;
  
        dynCall_viii(GLFW.active.framebufferSizeFunc, GLFW.active.id, GLFW.active.width, GLFW.active.height);
      },getTime:function() {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function(winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = UTF8ToString(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function(cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:null,lastGamepadStateFrame:null,refreshJoysticks:function() {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                console.log('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: allocate(intArrayFromString(gamepad.id), 'i8', ALLOC_NORMAL),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: allocate(new Array(gamepad.buttons.length), 'i8', ALLOC_NORMAL),
                  axes: allocate(new Array(gamepad.axes.length*4), 'float', ALLOC_NORMAL)
                };
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                setValue(data.buttons + i, gamepad.buttons[i].pressed, 'i8');
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                setValue(data.axes + i*4, gamepad.axes[i], 'float');
              }
            } else {
              if (GLFW.joys[joy]) {
                console.log('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  dynCall_vii(GLFW.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.keyFunc;
        win.keyFunc = cbfun;
        return prevcbfun;
      },setCharCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.charFunc;
        win.charFunc = cbfun;
        return prevcbfun;
      },setMouseButtonCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.mouseButtonFunc;
        win.mouseButtonFunc = cbfun;
        return prevcbfun;
      },setCursorPosCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.cursorPosFunc;
        win.cursorPosFunc = cbfun;
        return prevcbfun;
      },setScrollCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.scrollFunc;
        win.scrollFunc = cbfun;
        return prevcbfun;
      },setDropCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.dropFunc;
        win.dropFunc = cbfun;
        return prevcbfun;
      },onDrop:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = allocate(new Array(event.dataTransfer.files.length*4), 'i8*', ALLOC_NORMAL);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = function(e) {
            if (reader.readyState != 2) { // not DONE
              ++written;
              console.log('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data));
            if (++written === count) {
              dynCall_viii(GLFW.active.dropFunc, GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = allocate(intArrayFromString(path), 'i8', ALLOC_NORMAL);
          filenamesArray.push(filename);
          setValue(filenames + i*4, filename, 'i8*');
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowSizeFunc;
        win.windowSizeFunc = cbfun;
  
  
        return prevcbfun;
      },setWindowCloseCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowCloseFunc;
        win.windowCloseFunc = cbfun;
        return prevcbfun;
      },setWindowRefreshCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowRefreshFunc;
        win.windowRefreshFunc = cbfun;
        return prevcbfun;
      },onClickRequestPointerLock:function(e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function(winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch(mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch(value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                console.log("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                console.log("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            console.log("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            console.log("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          default: {
            console.log("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function(winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function(winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function(winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function(winid, x, y) {
      },getWindowPos:function(winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function(winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function(winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function(winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            Browser.requestFullscreen();
          } else {
            Browser.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowSizeFunc) return;
  
  
        dynCall_viii(win.windowSizeFunc, win.id, width, height);
      },createWindow:function(width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          Browser.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
            alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function(winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc)
          dynCall_vi(win.windowCloseFunc, win.id);
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function(winid) {
      },GLFW2ParamToGLFW3Param:function(param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwDefaultWindowHints() {
      GLFW.hints = GLFW.defaultHints;
    }

  function _glfwGetCursorPos(winid, x, y) {
      GLFW.getCursorPos(winid, x, y);
    }

  function _glfwGetPrimaryMonitor() {
      return 1;
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glfwGetVideoModes(monitor, count) {
      setValue(count, 0, 'i32');
      return 0;
    }

  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwSetCharCallback(winid, cbfun) {
      return GLFW.setCharCallback(winid, cbfun);
    }

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return null;
      var prevcbfun = win.cursorEnterFunc;
      win.cursorEnterFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetCursorPosCallback(winid, cbfun) {
      return GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glfwSetDropCallback(winid, cbfun) {
      return GLFW.setDropCallback(winid, cbfun);
    }

  function _glfwSetErrorCallback(cbfun) {
      var prevcbfun = GLFW.errorFunc;
      GLFW.errorFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetKeyCallback(winid, cbfun) {
      return GLFW.setKeyCallback(winid, cbfun);
    }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      return GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      return GLFW.setScrollCallback(winid, cbfun);
    }

  function _glfwSetWindowIconifyCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return null;
      var prevcbfun = win.windowIconifyFunc;
      win.windowIconifyFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      return GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }



  var _llvm_cos_f32=Math_cos;

  
   

  var _llvm_sin_f32=Math_sin;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      if (rqtp === 0) {
        ___setErrNo(28);
        return -1;
      }
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (nanoseconds < 0 || nanoseconds > 999999999 || seconds < 0) {
        ___setErrNo(28);
        return -1;
      }
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }
FS.staticInit();;
Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullScreen"] = function Module_requestFullScreen() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else _emscripten_get_now = function() { return performance['now'](); };
  ;
var GLctx; GL.init();
for (var i = 0; i < 32; i++) __tempFixedLengthArray.push(new Array(i));;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Math_floor,Math_ceil,Int8Array,Int32Array

function nullFunc_ff(x) { abortFnPtrError(x, 'ff'); }
function nullFunc_fff(x) { abortFnPtrError(x, 'fff'); }
function nullFunc_i(x) { abortFnPtrError(x, 'i'); }
function nullFunc_ii(x) { abortFnPtrError(x, 'ii'); }
function nullFunc_iidiiii(x) { abortFnPtrError(x, 'iidiiii'); }
function nullFunc_iii(x) { abortFnPtrError(x, 'iii'); }
function nullFunc_iiii(x) { abortFnPtrError(x, 'iiii'); }
function nullFunc_iiiii(x) { abortFnPtrError(x, 'iiiii'); }
function nullFunc_v(x) { abortFnPtrError(x, 'v'); }
function nullFunc_vf(x) { abortFnPtrError(x, 'vf'); }
function nullFunc_vff(x) { abortFnPtrError(x, 'vff'); }
function nullFunc_vffff(x) { abortFnPtrError(x, 'vffff'); }
function nullFunc_vfi(x) { abortFnPtrError(x, 'vfi'); }
function nullFunc_vi(x) { abortFnPtrError(x, 'vi'); }
function nullFunc_vidd(x) { abortFnPtrError(x, 'vidd'); }
function nullFunc_vif(x) { abortFnPtrError(x, 'vif'); }
function nullFunc_viff(x) { abortFnPtrError(x, 'viff'); }
function nullFunc_vifff(x) { abortFnPtrError(x, 'vifff'); }
function nullFunc_viffff(x) { abortFnPtrError(x, 'viffff'); }
function nullFunc_vii(x) { abortFnPtrError(x, 'vii'); }
function nullFunc_viif(x) { abortFnPtrError(x, 'viif'); }
function nullFunc_viii(x) { abortFnPtrError(x, 'viii'); }
function nullFunc_viiii(x) { abortFnPtrError(x, 'viiii'); }
function nullFunc_viiiii(x) { abortFnPtrError(x, 'viiiii'); }
function nullFunc_viiiiii(x) { abortFnPtrError(x, 'viiiiii'); }
function nullFunc_viiiiiii(x) { abortFnPtrError(x, 'viiiiiii'); }
function nullFunc_viiiiiiii(x) { abortFnPtrError(x, 'viiiiiiii'); }
function nullFunc_viiiiiiiii(x) { abortFnPtrError(x, 'viiiiiiiii'); }

var asmGlobalArg = {};

var asmLibraryArg = { "EMTSTACKTOP": EMTSTACKTOP, "EMT_STACK_MAX": EMT_STACK_MAX, "___assert_fail": ___assert_fail, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___unlock": ___unlock, "___wasi_fd_close": ___wasi_fd_close, "___wasi_fd_read": ___wasi_fd_read, "___wasi_fd_seek": ___wasi_fd_seek, "___wasi_fd_write": ___wasi_fd_write, "__colorChannelsInGlTextureFormat": __colorChannelsInGlTextureFormat, "__computeUnpackAlignedImageSize": __computeUnpackAlignedImageSize, "__fillFullscreenChangeEventData": __fillFullscreenChangeEventData, "__fillGamepadEventData": __fillGamepadEventData, "__fillMouseEventData": __fillMouseEventData, "__fillPointerlockChangeEventData": __fillPointerlockChangeEventData, "__findEventTarget": __findEventTarget, "__getBoundingClientRect": __getBoundingClientRect, "__glGenObject": __glGenObject, "__heapAccessShiftForWebGLHeap": __heapAccessShiftForWebGLHeap, "__heapObjectForWebGLType": __heapObjectForWebGLType, "__maybeCStringToJsString": __maybeCStringToJsString, "__memory_base": 1024, "__registerFullscreenChangeEventCallback": __registerFullscreenChangeEventCallback, "__registerGamepadEventCallback": __registerGamepadEventCallback, "__registerKeyEventCallback": __registerKeyEventCallback, "__registerMouseEventCallback": __registerMouseEventCallback, "__registerTouchEventCallback": __registerTouchEventCallback, "__requestPointerLock": __requestPointerLock, "__table_base": 0, "_abort": _abort, "_eglGetProcAddress": _eglGetProcAddress, "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock, "_emscripten_get_element_css_size": _emscripten_get_element_css_size, "_emscripten_get_gamepad_status": _emscripten_get_gamepad_status, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_num_gamepads": _emscripten_get_num_gamepads, "_emscripten_get_pointerlock_status": _emscripten_get_pointerlock_status, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_emscripten_glBeginQueryEXT": _emscripten_glBeginQueryEXT, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_emscripten_glBindVertexArrayOES": _emscripten_glBindVertexArrayOES, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glClear": _emscripten_glClear, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glCullFace": _emscripten_glCullFace, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteQueriesEXT": _emscripten_glDeleteQueriesEXT, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_emscripten_glDeleteVertexArraysOES": _emscripten_glDeleteVertexArraysOES, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_emscripten_glDisable": _emscripten_glDisable, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glDrawArraysInstancedANGLE": _emscripten_glDrawArraysInstancedANGLE, "_emscripten_glDrawBuffersWEBGL": _emscripten_glDrawBuffersWEBGL, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_glDrawElementsInstancedANGLE": _emscripten_glDrawElementsInstancedANGLE, "_emscripten_glEnable": _emscripten_glEnable, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glEndQueryEXT": _emscripten_glEndQueryEXT, "_emscripten_glFinish": _emscripten_glFinish, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_emscripten_glGenQueriesEXT": _emscripten_glGenQueriesEXT, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glGenVertexArraysOES": _emscripten_glGenVertexArraysOES, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glGetQueryObjecti64vEXT": _emscripten_glGetQueryObjecti64vEXT, "_emscripten_glGetQueryObjectivEXT": _emscripten_glGetQueryObjectivEXT, "_emscripten_glGetQueryObjectui64vEXT": _emscripten_glGetQueryObjectui64vEXT, "_emscripten_glGetQueryObjectuivEXT": _emscripten_glGetQueryObjectuivEXT, "_emscripten_glGetQueryivEXT": _emscripten_glGetQueryivEXT, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_emscripten_glHint": _emscripten_glHint, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_glIsQueryEXT": _emscripten_glIsQueryEXT, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_emscripten_glIsShader": _emscripten_glIsShader, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_emscripten_glIsVertexArrayOES": _emscripten_glIsVertexArrayOES, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_emscripten_glQueryCounterEXT": _emscripten_glQueryCounterEXT, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_emscripten_glVertexAttribDivisorANGLE": _emscripten_glVertexAttribDivisorANGLE, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_request_pointerlock": _emscripten_request_pointerlock, "_emscripten_resize_heap": _emscripten_resize_heap, "_emscripten_run_script": _emscripten_run_script, "_emscripten_sample_gamepad_data": _emscripten_sample_gamepad_data, "_emscripten_set_click_callback_on_thread": _emscripten_set_click_callback_on_thread, "_emscripten_set_fullscreenchange_callback_on_thread": _emscripten_set_fullscreenchange_callback_on_thread, "_emscripten_set_gamepadconnected_callback_on_thread": _emscripten_set_gamepadconnected_callback_on_thread, "_emscripten_set_gamepaddisconnected_callback_on_thread": _emscripten_set_gamepaddisconnected_callback_on_thread, "_emscripten_set_keypress_callback_on_thread": _emscripten_set_keypress_callback_on_thread, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_set_touchcancel_callback_on_thread": _emscripten_set_touchcancel_callback_on_thread, "_emscripten_set_touchend_callback_on_thread": _emscripten_set_touchend_callback_on_thread, "_emscripten_set_touchmove_callback_on_thread": _emscripten_set_touchmove_callback_on_thread, "_emscripten_set_touchstart_callback_on_thread": _emscripten_set_touchstart_callback_on_thread, "_exit": _exit, "_fd_close": _fd_close, "_fd_read": _fd_read, "_fd_seek": _fd_seek, "_fd_write": _fd_write, "_glActiveTexture": _glActiveTexture, "_glAttachShader": _glAttachShader, "_glBindAttribLocation": _glBindAttribLocation, "_glBindBuffer": _glBindBuffer, "_glBindTexture": _glBindTexture, "_glBlendFunc": _glBlendFunc, "_glBufferData": _glBufferData, "_glBufferSubData": _glBufferSubData, "_glClear": _glClear, "_glClearColor": _glClearColor, "_glClearDepthf": _glClearDepthf, "_glCompileShader": _glCompileShader, "_glCompressedTexImage2D": _glCompressedTexImage2D, "_glCreateProgram": _glCreateProgram, "_glCreateShader": _glCreateShader, "_glCullFace": _glCullFace, "_glDeleteProgram": _glDeleteProgram, "_glDepthFunc": _glDepthFunc, "_glDisable": _glDisable, "_glDrawArrays": _glDrawArrays, "_glDrawElements": _glDrawElements, "_glEnable": _glEnable, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glFrontFace": _glFrontFace, "_glGenBuffers": _glGenBuffers, "_glGenTextures": _glGenTextures, "_glGetAttribLocation": _glGetAttribLocation, "_glGetFloatv": _glGetFloatv, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_glGetProgramiv": _glGetProgramiv, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_glGetShaderiv": _glGetShaderiv, "_glGetString": _glGetString, "_glGetUniformLocation": _glGetUniformLocation, "_glLinkProgram": _glLinkProgram, "_glPixelStorei": _glPixelStorei, "_glReadPixels": _glReadPixels, "_glShaderSource": _glShaderSource, "_glTexImage2D": _glTexImage2D, "_glTexParameteri": _glTexParameteri, "_glUniform1i": _glUniform1i, "_glUniform4f": _glUniform4f, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glUseProgram": _glUseProgram, "_glVertexAttribPointer": _glVertexAttribPointer, "_glViewport": _glViewport, "_glfwCreateWindow": _glfwCreateWindow, "_glfwDefaultWindowHints": _glfwDefaultWindowHints, "_glfwGetCursorPos": _glfwGetCursorPos, "_glfwGetPrimaryMonitor": _glfwGetPrimaryMonitor, "_glfwGetTime": _glfwGetTime, "_glfwGetVideoModes": _glfwGetVideoModes, "_glfwInit": _glfwInit, "_glfwMakeContextCurrent": _glfwMakeContextCurrent, "_glfwSetCharCallback": _glfwSetCharCallback, "_glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback, "_glfwSetCursorPosCallback": _glfwSetCursorPosCallback, "_glfwSetDropCallback": _glfwSetDropCallback, "_glfwSetErrorCallback": _glfwSetErrorCallback, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback, "_glfwSetScrollCallback": _glfwSetScrollCallback, "_glfwSetWindowIconifyCallback": _glfwSetWindowIconifyCallback, "_glfwSetWindowShouldClose": _glfwSetWindowShouldClose, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_glfwSwapBuffers": _glfwSwapBuffers, "_glfwSwapInterval": _glfwSwapInterval, "_glfwTerminate": _glfwTerminate, "_glfwWindowHint": _glfwWindowHint, "_llvm_cos_f32": _llvm_cos_f32, "_llvm_cttz_i32": _llvm_cttz_i32, "_llvm_sin_f32": _llvm_sin_f32, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_nanosleep": _nanosleep, "_time": _time, "_usleep": _usleep, "abort": abort, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "abortStackOverflowEmterpreter": abortStackOverflowEmterpreter, "demangle": demangle, "demangleAll": demangleAll, "eb": eb, "emscriptenWebGLGet": emscriptenWebGLGet, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform, "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib, "getTempRet0": getTempRet0, "jsStackTrace": jsStackTrace, "memory": wasmMemory, "nullFunc_ff": nullFunc_ff, "nullFunc_fff": nullFunc_fff, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iidiiii": nullFunc_iidiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_v": nullFunc_v, "nullFunc_vf": nullFunc_vf, "nullFunc_vff": nullFunc_vff, "nullFunc_vffff": nullFunc_vffff, "nullFunc_vfi": nullFunc_vfi, "nullFunc_vi": nullFunc_vi, "nullFunc_vidd": nullFunc_vidd, "nullFunc_vif": nullFunc_vif, "nullFunc_viff": nullFunc_viff, "nullFunc_vifff": nullFunc_vifff, "nullFunc_viffff": nullFunc_viffff, "nullFunc_vii": nullFunc_vii, "nullFunc_viif": nullFunc_viif, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "setTempRet0": setTempRet0, "stackTrace": stackTrace, "stringToNewUTF8": stringToNewUTF8, "table": wasmTable, "tempDoublePtr": tempDoublePtr };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);
  var tempDoublePtr=env.tempDoublePtr|0;
  var EMTSTACKTOP=env.EMTSTACKTOP|0;
  var EMT_STACK_MAX=env.EMT_STACK_MAX|0;
  var eb=env.eb|0;
var __THREW__ = 0;
var threwValue = 0;
var setjmpId = 0;
var tempInt = 0;
var tempBigInt = 0;
var tempBigIntS = 0;
var tempValue = 0;
var tempDouble = 0.0;
var nan = global.NaN;
var inf = global.Infinity;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var Math_fround=global.Math.fround;
  var abort=env.abort;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var abortStackOverflow=env.abortStackOverflow;
  var abortStackOverflowEmterpreter=env.abortStackOverflowEmterpreter;
  var nullFunc_ff=env.nullFunc_ff;
  var nullFunc_fff=env.nullFunc_fff;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iidiiii=env.nullFunc_iidiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vf=env.nullFunc_vf;
  var nullFunc_vff=env.nullFunc_vff;
  var nullFunc_vffff=env.nullFunc_vffff;
  var nullFunc_vfi=env.nullFunc_vfi;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_vif=env.nullFunc_vif;
  var nullFunc_viff=env.nullFunc_viff;
  var nullFunc_vifff=env.nullFunc_vifff;
  var nullFunc_viffff=env.nullFunc_viffff;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viif=env.nullFunc_viif;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var ___assert_fail=env.___assert_fail;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___wasi_fd_close=env.___wasi_fd_close;
  var ___wasi_fd_read=env.___wasi_fd_read;
  var ___wasi_fd_seek=env.___wasi_fd_seek;
  var ___wasi_fd_write=env.___wasi_fd_write;
  var __colorChannelsInGlTextureFormat=env.__colorChannelsInGlTextureFormat;
  var __computeUnpackAlignedImageSize=env.__computeUnpackAlignedImageSize;
  var __fillFullscreenChangeEventData=env.__fillFullscreenChangeEventData;
  var __fillGamepadEventData=env.__fillGamepadEventData;
  var __fillMouseEventData=env.__fillMouseEventData;
  var __fillPointerlockChangeEventData=env.__fillPointerlockChangeEventData;
  var __findEventTarget=env.__findEventTarget;
  var __getBoundingClientRect=env.__getBoundingClientRect;
  var __glGenObject=env.__glGenObject;
  var __heapAccessShiftForWebGLHeap=env.__heapAccessShiftForWebGLHeap;
  var __heapObjectForWebGLType=env.__heapObjectForWebGLType;
  var __maybeCStringToJsString=env.__maybeCStringToJsString;
  var __registerFullscreenChangeEventCallback=env.__registerFullscreenChangeEventCallback;
  var __registerGamepadEventCallback=env.__registerGamepadEventCallback;
  var __registerKeyEventCallback=env.__registerKeyEventCallback;
  var __registerMouseEventCallback=env.__registerMouseEventCallback;
  var __registerTouchEventCallback=env.__registerTouchEventCallback;
  var __requestPointerLock=env.__requestPointerLock;
  var _abort=env._abort;
  var _eglGetProcAddress=env._eglGetProcAddress;
  var _emscripten_exit_pointerlock=env._emscripten_exit_pointerlock;
  var _emscripten_get_element_css_size=env._emscripten_get_element_css_size;
  var _emscripten_get_gamepad_status=env._emscripten_get_gamepad_status;
  var _emscripten_get_heap_size=env._emscripten_get_heap_size;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_get_num_gamepads=env._emscripten_get_num_gamepads;
  var _emscripten_get_pointerlock_status=env._emscripten_get_pointerlock_status;
  var _emscripten_glActiveTexture=env._emscripten_glActiveTexture;
  var _emscripten_glAttachShader=env._emscripten_glAttachShader;
  var _emscripten_glBeginQueryEXT=env._emscripten_glBeginQueryEXT;
  var _emscripten_glBindAttribLocation=env._emscripten_glBindAttribLocation;
  var _emscripten_glBindBuffer=env._emscripten_glBindBuffer;
  var _emscripten_glBindFramebuffer=env._emscripten_glBindFramebuffer;
  var _emscripten_glBindRenderbuffer=env._emscripten_glBindRenderbuffer;
  var _emscripten_glBindTexture=env._emscripten_glBindTexture;
  var _emscripten_glBindVertexArrayOES=env._emscripten_glBindVertexArrayOES;
  var _emscripten_glBlendColor=env._emscripten_glBlendColor;
  var _emscripten_glBlendEquation=env._emscripten_glBlendEquation;
  var _emscripten_glBlendEquationSeparate=env._emscripten_glBlendEquationSeparate;
  var _emscripten_glBlendFunc=env._emscripten_glBlendFunc;
  var _emscripten_glBlendFuncSeparate=env._emscripten_glBlendFuncSeparate;
  var _emscripten_glBufferData=env._emscripten_glBufferData;
  var _emscripten_glBufferSubData=env._emscripten_glBufferSubData;
  var _emscripten_glCheckFramebufferStatus=env._emscripten_glCheckFramebufferStatus;
  var _emscripten_glClear=env._emscripten_glClear;
  var _emscripten_glClearColor=env._emscripten_glClearColor;
  var _emscripten_glClearDepthf=env._emscripten_glClearDepthf;
  var _emscripten_glClearStencil=env._emscripten_glClearStencil;
  var _emscripten_glColorMask=env._emscripten_glColorMask;
  var _emscripten_glCompileShader=env._emscripten_glCompileShader;
  var _emscripten_glCompressedTexImage2D=env._emscripten_glCompressedTexImage2D;
  var _emscripten_glCompressedTexSubImage2D=env._emscripten_glCompressedTexSubImage2D;
  var _emscripten_glCopyTexImage2D=env._emscripten_glCopyTexImage2D;
  var _emscripten_glCopyTexSubImage2D=env._emscripten_glCopyTexSubImage2D;
  var _emscripten_glCreateProgram=env._emscripten_glCreateProgram;
  var _emscripten_glCreateShader=env._emscripten_glCreateShader;
  var _emscripten_glCullFace=env._emscripten_glCullFace;
  var _emscripten_glDeleteBuffers=env._emscripten_glDeleteBuffers;
  var _emscripten_glDeleteFramebuffers=env._emscripten_glDeleteFramebuffers;
  var _emscripten_glDeleteProgram=env._emscripten_glDeleteProgram;
  var _emscripten_glDeleteQueriesEXT=env._emscripten_glDeleteQueriesEXT;
  var _emscripten_glDeleteRenderbuffers=env._emscripten_glDeleteRenderbuffers;
  var _emscripten_glDeleteShader=env._emscripten_glDeleteShader;
  var _emscripten_glDeleteTextures=env._emscripten_glDeleteTextures;
  var _emscripten_glDeleteVertexArraysOES=env._emscripten_glDeleteVertexArraysOES;
  var _emscripten_glDepthFunc=env._emscripten_glDepthFunc;
  var _emscripten_glDepthMask=env._emscripten_glDepthMask;
  var _emscripten_glDepthRangef=env._emscripten_glDepthRangef;
  var _emscripten_glDetachShader=env._emscripten_glDetachShader;
  var _emscripten_glDisable=env._emscripten_glDisable;
  var _emscripten_glDisableVertexAttribArray=env._emscripten_glDisableVertexAttribArray;
  var _emscripten_glDrawArrays=env._emscripten_glDrawArrays;
  var _emscripten_glDrawArraysInstancedANGLE=env._emscripten_glDrawArraysInstancedANGLE;
  var _emscripten_glDrawBuffersWEBGL=env._emscripten_glDrawBuffersWEBGL;
  var _emscripten_glDrawElements=env._emscripten_glDrawElements;
  var _emscripten_glDrawElementsInstancedANGLE=env._emscripten_glDrawElementsInstancedANGLE;
  var _emscripten_glEnable=env._emscripten_glEnable;
  var _emscripten_glEnableVertexAttribArray=env._emscripten_glEnableVertexAttribArray;
  var _emscripten_glEndQueryEXT=env._emscripten_glEndQueryEXT;
  var _emscripten_glFinish=env._emscripten_glFinish;
  var _emscripten_glFlush=env._emscripten_glFlush;
  var _emscripten_glFramebufferRenderbuffer=env._emscripten_glFramebufferRenderbuffer;
  var _emscripten_glFramebufferTexture2D=env._emscripten_glFramebufferTexture2D;
  var _emscripten_glFrontFace=env._emscripten_glFrontFace;
  var _emscripten_glGenBuffers=env._emscripten_glGenBuffers;
  var _emscripten_glGenFramebuffers=env._emscripten_glGenFramebuffers;
  var _emscripten_glGenQueriesEXT=env._emscripten_glGenQueriesEXT;
  var _emscripten_glGenRenderbuffers=env._emscripten_glGenRenderbuffers;
  var _emscripten_glGenTextures=env._emscripten_glGenTextures;
  var _emscripten_glGenVertexArraysOES=env._emscripten_glGenVertexArraysOES;
  var _emscripten_glGenerateMipmap=env._emscripten_glGenerateMipmap;
  var _emscripten_glGetActiveAttrib=env._emscripten_glGetActiveAttrib;
  var _emscripten_glGetActiveUniform=env._emscripten_glGetActiveUniform;
  var _emscripten_glGetAttachedShaders=env._emscripten_glGetAttachedShaders;
  var _emscripten_glGetAttribLocation=env._emscripten_glGetAttribLocation;
  var _emscripten_glGetBooleanv=env._emscripten_glGetBooleanv;
  var _emscripten_glGetBufferParameteriv=env._emscripten_glGetBufferParameteriv;
  var _emscripten_glGetError=env._emscripten_glGetError;
  var _emscripten_glGetFloatv=env._emscripten_glGetFloatv;
  var _emscripten_glGetFramebufferAttachmentParameteriv=env._emscripten_glGetFramebufferAttachmentParameteriv;
  var _emscripten_glGetIntegerv=env._emscripten_glGetIntegerv;
  var _emscripten_glGetProgramInfoLog=env._emscripten_glGetProgramInfoLog;
  var _emscripten_glGetProgramiv=env._emscripten_glGetProgramiv;
  var _emscripten_glGetQueryObjecti64vEXT=env._emscripten_glGetQueryObjecti64vEXT;
  var _emscripten_glGetQueryObjectivEXT=env._emscripten_glGetQueryObjectivEXT;
  var _emscripten_glGetQueryObjectui64vEXT=env._emscripten_glGetQueryObjectui64vEXT;
  var _emscripten_glGetQueryObjectuivEXT=env._emscripten_glGetQueryObjectuivEXT;
  var _emscripten_glGetQueryivEXT=env._emscripten_glGetQueryivEXT;
  var _emscripten_glGetRenderbufferParameteriv=env._emscripten_glGetRenderbufferParameteriv;
  var _emscripten_glGetShaderInfoLog=env._emscripten_glGetShaderInfoLog;
  var _emscripten_glGetShaderPrecisionFormat=env._emscripten_glGetShaderPrecisionFormat;
  var _emscripten_glGetShaderSource=env._emscripten_glGetShaderSource;
  var _emscripten_glGetShaderiv=env._emscripten_glGetShaderiv;
  var _emscripten_glGetString=env._emscripten_glGetString;
  var _emscripten_glGetTexParameterfv=env._emscripten_glGetTexParameterfv;
  var _emscripten_glGetTexParameteriv=env._emscripten_glGetTexParameteriv;
  var _emscripten_glGetUniformLocation=env._emscripten_glGetUniformLocation;
  var _emscripten_glGetUniformfv=env._emscripten_glGetUniformfv;
  var _emscripten_glGetUniformiv=env._emscripten_glGetUniformiv;
  var _emscripten_glGetVertexAttribPointerv=env._emscripten_glGetVertexAttribPointerv;
  var _emscripten_glGetVertexAttribfv=env._emscripten_glGetVertexAttribfv;
  var _emscripten_glGetVertexAttribiv=env._emscripten_glGetVertexAttribiv;
  var _emscripten_glHint=env._emscripten_glHint;
  var _emscripten_glIsBuffer=env._emscripten_glIsBuffer;
  var _emscripten_glIsEnabled=env._emscripten_glIsEnabled;
  var _emscripten_glIsFramebuffer=env._emscripten_glIsFramebuffer;
  var _emscripten_glIsProgram=env._emscripten_glIsProgram;
  var _emscripten_glIsQueryEXT=env._emscripten_glIsQueryEXT;
  var _emscripten_glIsRenderbuffer=env._emscripten_glIsRenderbuffer;
  var _emscripten_glIsShader=env._emscripten_glIsShader;
  var _emscripten_glIsTexture=env._emscripten_glIsTexture;
  var _emscripten_glIsVertexArrayOES=env._emscripten_glIsVertexArrayOES;
  var _emscripten_glLineWidth=env._emscripten_glLineWidth;
  var _emscripten_glLinkProgram=env._emscripten_glLinkProgram;
  var _emscripten_glPixelStorei=env._emscripten_glPixelStorei;
  var _emscripten_glPolygonOffset=env._emscripten_glPolygonOffset;
  var _emscripten_glQueryCounterEXT=env._emscripten_glQueryCounterEXT;
  var _emscripten_glReadPixels=env._emscripten_glReadPixels;
  var _emscripten_glReleaseShaderCompiler=env._emscripten_glReleaseShaderCompiler;
  var _emscripten_glRenderbufferStorage=env._emscripten_glRenderbufferStorage;
  var _emscripten_glSampleCoverage=env._emscripten_glSampleCoverage;
  var _emscripten_glScissor=env._emscripten_glScissor;
  var _emscripten_glShaderBinary=env._emscripten_glShaderBinary;
  var _emscripten_glShaderSource=env._emscripten_glShaderSource;
  var _emscripten_glStencilFunc=env._emscripten_glStencilFunc;
  var _emscripten_glStencilFuncSeparate=env._emscripten_glStencilFuncSeparate;
  var _emscripten_glStencilMask=env._emscripten_glStencilMask;
  var _emscripten_glStencilMaskSeparate=env._emscripten_glStencilMaskSeparate;
  var _emscripten_glStencilOp=env._emscripten_glStencilOp;
  var _emscripten_glStencilOpSeparate=env._emscripten_glStencilOpSeparate;
  var _emscripten_glTexImage2D=env._emscripten_glTexImage2D;
  var _emscripten_glTexParameterf=env._emscripten_glTexParameterf;
  var _emscripten_glTexParameterfv=env._emscripten_glTexParameterfv;
  var _emscripten_glTexParameteri=env._emscripten_glTexParameteri;
  var _emscripten_glTexParameteriv=env._emscripten_glTexParameteriv;
  var _emscripten_glTexSubImage2D=env._emscripten_glTexSubImage2D;
  var _emscripten_glUniform1f=env._emscripten_glUniform1f;
  var _emscripten_glUniform1fv=env._emscripten_glUniform1fv;
  var _emscripten_glUniform1i=env._emscripten_glUniform1i;
  var _emscripten_glUniform1iv=env._emscripten_glUniform1iv;
  var _emscripten_glUniform2f=env._emscripten_glUniform2f;
  var _emscripten_glUniform2fv=env._emscripten_glUniform2fv;
  var _emscripten_glUniform2i=env._emscripten_glUniform2i;
  var _emscripten_glUniform2iv=env._emscripten_glUniform2iv;
  var _emscripten_glUniform3f=env._emscripten_glUniform3f;
  var _emscripten_glUniform3fv=env._emscripten_glUniform3fv;
  var _emscripten_glUniform3i=env._emscripten_glUniform3i;
  var _emscripten_glUniform3iv=env._emscripten_glUniform3iv;
  var _emscripten_glUniform4f=env._emscripten_glUniform4f;
  var _emscripten_glUniform4fv=env._emscripten_glUniform4fv;
  var _emscripten_glUniform4i=env._emscripten_glUniform4i;
  var _emscripten_glUniform4iv=env._emscripten_glUniform4iv;
  var _emscripten_glUniformMatrix2fv=env._emscripten_glUniformMatrix2fv;
  var _emscripten_glUniformMatrix3fv=env._emscripten_glUniformMatrix3fv;
  var _emscripten_glUniformMatrix4fv=env._emscripten_glUniformMatrix4fv;
  var _emscripten_glUseProgram=env._emscripten_glUseProgram;
  var _emscripten_glValidateProgram=env._emscripten_glValidateProgram;
  var _emscripten_glVertexAttrib1f=env._emscripten_glVertexAttrib1f;
  var _emscripten_glVertexAttrib1fv=env._emscripten_glVertexAttrib1fv;
  var _emscripten_glVertexAttrib2f=env._emscripten_glVertexAttrib2f;
  var _emscripten_glVertexAttrib2fv=env._emscripten_glVertexAttrib2fv;
  var _emscripten_glVertexAttrib3f=env._emscripten_glVertexAttrib3f;
  var _emscripten_glVertexAttrib3fv=env._emscripten_glVertexAttrib3fv;
  var _emscripten_glVertexAttrib4f=env._emscripten_glVertexAttrib4f;
  var _emscripten_glVertexAttrib4fv=env._emscripten_glVertexAttrib4fv;
  var _emscripten_glVertexAttribDivisorANGLE=env._emscripten_glVertexAttribDivisorANGLE;
  var _emscripten_glVertexAttribPointer=env._emscripten_glVertexAttribPointer;
  var _emscripten_glViewport=env._emscripten_glViewport;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_request_pointerlock=env._emscripten_request_pointerlock;
  var _emscripten_resize_heap=env._emscripten_resize_heap;
  var _emscripten_run_script=env._emscripten_run_script;
  var _emscripten_sample_gamepad_data=env._emscripten_sample_gamepad_data;
  var _emscripten_set_click_callback_on_thread=env._emscripten_set_click_callback_on_thread;
  var _emscripten_set_fullscreenchange_callback_on_thread=env._emscripten_set_fullscreenchange_callback_on_thread;
  var _emscripten_set_gamepadconnected_callback_on_thread=env._emscripten_set_gamepadconnected_callback_on_thread;
  var _emscripten_set_gamepaddisconnected_callback_on_thread=env._emscripten_set_gamepaddisconnected_callback_on_thread;
  var _emscripten_set_keypress_callback_on_thread=env._emscripten_set_keypress_callback_on_thread;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_set_touchcancel_callback_on_thread=env._emscripten_set_touchcancel_callback_on_thread;
  var _emscripten_set_touchend_callback_on_thread=env._emscripten_set_touchend_callback_on_thread;
  var _emscripten_set_touchmove_callback_on_thread=env._emscripten_set_touchmove_callback_on_thread;
  var _emscripten_set_touchstart_callback_on_thread=env._emscripten_set_touchstart_callback_on_thread;
  var _exit=env._exit;
  var _fd_close=env._fd_close;
  var _fd_read=env._fd_read;
  var _fd_seek=env._fd_seek;
  var _fd_write=env._fd_write;
  var _glActiveTexture=env._glActiveTexture;
  var _glAttachShader=env._glAttachShader;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var _glBindBuffer=env._glBindBuffer;
  var _glBindTexture=env._glBindTexture;
  var _glBlendFunc=env._glBlendFunc;
  var _glBufferData=env._glBufferData;
  var _glBufferSubData=env._glBufferSubData;
  var _glClear=env._glClear;
  var _glClearColor=env._glClearColor;
  var _glClearDepthf=env._glClearDepthf;
  var _glCompileShader=env._glCompileShader;
  var _glCompressedTexImage2D=env._glCompressedTexImage2D;
  var _glCreateProgram=env._glCreateProgram;
  var _glCreateShader=env._glCreateShader;
  var _glCullFace=env._glCullFace;
  var _glDeleteProgram=env._glDeleteProgram;
  var _glDepthFunc=env._glDepthFunc;
  var _glDisable=env._glDisable;
  var _glDrawArrays=env._glDrawArrays;
  var _glDrawElements=env._glDrawElements;
  var _glEnable=env._glEnable;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _glFrontFace=env._glFrontFace;
  var _glGenBuffers=env._glGenBuffers;
  var _glGenTextures=env._glGenTextures;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _glGetFloatv=env._glGetFloatv;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _glGetShaderiv=env._glGetShaderiv;
  var _glGetString=env._glGetString;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glLinkProgram=env._glLinkProgram;
  var _glPixelStorei=env._glPixelStorei;
  var _glReadPixels=env._glReadPixels;
  var _glShaderSource=env._glShaderSource;
  var _glTexImage2D=env._glTexImage2D;
  var _glTexParameteri=env._glTexParameteri;
  var _glUniform1i=env._glUniform1i;
  var _glUniform4f=env._glUniform4f;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _glUseProgram=env._glUseProgram;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glViewport=env._glViewport;
  var _glfwCreateWindow=env._glfwCreateWindow;
  var _glfwDefaultWindowHints=env._glfwDefaultWindowHints;
  var _glfwGetCursorPos=env._glfwGetCursorPos;
  var _glfwGetPrimaryMonitor=env._glfwGetPrimaryMonitor;
  var _glfwGetTime=env._glfwGetTime;
  var _glfwGetVideoModes=env._glfwGetVideoModes;
  var _glfwInit=env._glfwInit;
  var _glfwMakeContextCurrent=env._glfwMakeContextCurrent;
  var _glfwSetCharCallback=env._glfwSetCharCallback;
  var _glfwSetCursorEnterCallback=env._glfwSetCursorEnterCallback;
  var _glfwSetCursorPosCallback=env._glfwSetCursorPosCallback;
  var _glfwSetDropCallback=env._glfwSetDropCallback;
  var _glfwSetErrorCallback=env._glfwSetErrorCallback;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _glfwSetMouseButtonCallback=env._glfwSetMouseButtonCallback;
  var _glfwSetScrollCallback=env._glfwSetScrollCallback;
  var _glfwSetWindowIconifyCallback=env._glfwSetWindowIconifyCallback;
  var _glfwSetWindowShouldClose=env._glfwSetWindowShouldClose;
  var _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _glfwSwapInterval=env._glfwSwapInterval;
  var _glfwTerminate=env._glfwTerminate;
  var _glfwWindowHint=env._glfwWindowHint;
  var _llvm_cos_f32=env._llvm_cos_f32;
  var _llvm_cttz_i32=env._llvm_cttz_i32;
  var _llvm_sin_f32=env._llvm_sin_f32;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var _nanosleep=env._nanosleep;
  var _time=env._time;
  var _usleep=env._usleep;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var demangle=env.demangle;
  var demangleAll=env.demangleAll;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var emscriptenWebGLGetUniform=env.emscriptenWebGLGetUniform;
  var emscriptenWebGLGetVertexAttrib=env.emscriptenWebGLGetVertexAttrib;
  var jsStackTrace=env.jsStackTrace;
  var stackTrace=env.stackTrace;
  var stringToNewUTF8=env.stringToNewUTF8;
  var STACKTOP = 32128;
  var STACK_MAX = 5275008;
  var tempFloat = Math_fround(0);
  var asyncState = 0;
  const f0 = Math_fround(0);

// EMSCRIPTEN_START_FUNCS
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i185Z2D = 0, $$pre$phi$i48$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $110 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $120 = 0, $121 = 0, $124 = 0, $126 = 0, $128 = 0, $13 = 0, $131 = 0, $132 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $169 = 0, $172 = 0, $173 = 0, $175 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $19 = 0, $190 = 0, $193 = 0, $194 = 0, $196 = 0, $197 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$011$i$i = 0, $K305$010$i$i = 0, $K373$017$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i173 = 0, $R$1$i173$be = 0, $R$1$i173$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i177 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0, $RP$1$i172 = 0, $RP$1$i172$be = 0, $RP$1$i172$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i50$i = 0, $T$010$i$i = 0, $T$016$i = 0, $T$09$i$i = 0, $add$i$i = 0, $add$i188 = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i164 = 0, $add$ptr14$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr17$i$i = 0, $add$ptr193 = 0, $add$ptr2$i$i = 0, $add$ptr227$i = 0, $add$ptr262$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i28$i = 0, $add$ptr4$i57$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0, $add$ptr95 = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i191 = 0, $add177$i = 0, $add215$i = 0, $add26$i$i = 0, $add268$i = 0, $add278$i$i = 0, $add346$i = 0, $add54$i = 0, $add64 = 0, $add8 = 0, $add83$i$i = 0, $add9$i = 0, $and$i145 = 0, $and104$i = 0, $and11$i = 0, $and12$i = 0, $and13$i = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and3$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and37$i$i = 0, $and41 = 0, $and46 = 0, $and49 = 0, $and53 = 0, $and57 = 0, $and6$i = 0, $and61 = 0, $and64$i = 0, $and69$i$i = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0, $and89$i = 0, $and9$i = 0, $arrayidx = 0, $arrayidx$i$i = 0, $arrayidx$i39$i = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx143$i$i = 0, $arrayidx151$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i174 = 0, $arrayidx184$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx223$i$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx394$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx94$i = 0, $arrayidx96$i$i = 0, $bk = 0, $bk136$i = 0, $bk47$i = 0, $bk78 = 0, $bk82$i$i = 0, $br$2$ph$i = 0, $call131$i = 0, $call132$i = 0, $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp102$i = 0, $cmp141$i = 0, $cmp32$i = 0, $cond = 0, $cond$i$i$i = 0, $cond$i20$i = 0, $cond$i56$i = 0, $cond115$i = 0, $cond13$i$i = 0, $cond5$i = 0, $fd139$i = 0, $fd148$i$i = 0, $fd344$i$i = 0, $fd416$i = 0, $fd50$i = 0, $fd59$i$i = 0, $fd68$pre$phi$i$iZ2D = 0, $fd69 = 0, $fd85$i$i = 0, $fd9 = 0, $head$i$i = 0, $head179 = 0, $head182$i = 0, $head208$i$i = 0, $head25 = 0, $head274$i = 0, $idx$0$i = 0, $magic$i$i = 0, $nb$0 = 0, $neg$i190 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i154 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$420$i = 0, $rsize$420$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0, $shl$i146 = 0, $shl105 = 0, $shl198$i = 0, $shl22 = 0, $shl226$i$i = 0, $shl265$i$i = 0, $shl270$i$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl362$i = 0, $shl37 = 0, $shl39$i$i = 0, $shl60$i = 0, $shl70$i$i = 0, $shl75$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i$i = 0, $shr$i141 = 0, $shr$i36$i = 0, $shr101 = 0, $shr11$i = 0, $shr15$i = 0, $shr194$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr318$i = 0, $shr4$i = 0, $shr47 = 0, $shr51 = 0, $shr55 = 0, $shr58$i$i = 0, $shr59 = 0, $shr7$i = 0, $shr75$i = 0, $shr79$i = 0, $shr83$i = 0, $shr87$i = 0, $size188$i$le = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0116$i = 0, $sp$1115$i = 0, $spec$select$i159 = 0, $spec$select100$i = 0, $spec$select3$i = 0, $ssize$2$ph$i = 0, $sub$i140 = 0, $sub$i189 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub101$i = 0, $sub112$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub260$i = 0, $sub31$i = 0, $sub33$i = 0, $sub41$i = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i58$i = 0, $sub70$i = 0, $sub91 = 0, $t$0$i = 0, $t$0$i153 = 0, $t$2$i = 0, $t$4$i = 0, $t$519$i = 0, $t$519$i$ph = 0, $tbase$799$i = 0, $tsize$2687886$i = 0, $tsize$4$i = 0, $tsize$798$i = 0, $v$0$i = 0, $v$0$i155 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i222 = 0, $v$4$lcssa$i = 0, $v$421$i = 0, $v$421$i$ph = 0, label = 0, sp = 0, $181$looptemp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $magic$i$i = sp;
 do if ($bytes >>> 0 < 245) {
  $cond = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $shr = $cond >>> 3;
  $0 = HEAP32[7596] | 0;
  $shr3 = $0 >>> $shr;
  if ($shr3 & 3 | 0) {
   $add8 = ($shr3 & 1 ^ 1) + $shr | 0;
   $arrayidx = 30424 + ($add8 << 1 << 2) | 0;
   $1 = $arrayidx + 8 | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   $fd9 = $2 + 8 | 0;
   $3 = HEAP32[$fd9 >> 2] | 0;
   do if (($3 | 0) == ($arrayidx | 0)) HEAP32[7596] = $0 & ~(1 << $add8); else {
    if ((HEAP32[7600] | 0) >>> 0 > $3 >>> 0) _abort();
    $bk = $3 + 12 | 0;
    if ((HEAP32[$bk >> 2] | 0) == ($2 | 0)) {
     HEAP32[$bk >> 2] = $arrayidx;
     HEAP32[$1 >> 2] = $3;
     break;
    } else _abort();
   } while (0);
   $shl22 = $add8 << 3;
   HEAP32[$2 + 4 >> 2] = $shl22 | 3;
   $head25 = $2 + $shl22 + 4 | 0;
   HEAP32[$head25 >> 2] = HEAP32[$head25 >> 2] | 1;
   $retval$0 = $fd9;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
  $7 = HEAP32[7598] | 0;
  if ($cond >>> 0 > $7 >>> 0) {
   if ($shr3 | 0) {
    $shl37 = 2 << $shr;
    $and41 = $shr3 << $shr & ($shl37 | 0 - $shl37);
    $sub44 = ($and41 & 0 - $and41) + -1 | 0;
    $and46 = $sub44 >>> 12 & 16;
    $shr47 = $sub44 >>> $and46;
    $and49 = $shr47 >>> 5 & 8;
    $shr51 = $shr47 >>> $and49;
    $and53 = $shr51 >>> 2 & 4;
    $shr55 = $shr51 >>> $and53;
    $and57 = $shr55 >>> 1 & 2;
    $shr59 = $shr55 >>> $and57;
    $and61 = $shr59 >>> 1 & 1;
    $add64 = ($and49 | $and46 | $and53 | $and57 | $and61) + ($shr59 >>> $and61) | 0;
    $arrayidx66 = 30424 + ($add64 << 1 << 2) | 0;
    $8 = $arrayidx66 + 8 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $fd69 = $9 + 8 | 0;
    $10 = HEAP32[$fd69 >> 2] | 0;
    do if (($10 | 0) == ($arrayidx66 | 0)) {
     $and74 = $0 & ~(1 << $add64);
     HEAP32[7596] = $and74;
     $14 = $and74;
    } else {
     if ((HEAP32[7600] | 0) >>> 0 > $10 >>> 0) _abort();
     $bk78 = $10 + 12 | 0;
     if ((HEAP32[$bk78 >> 2] | 0) == ($9 | 0)) {
      HEAP32[$bk78 >> 2] = $arrayidx66;
      HEAP32[$8 >> 2] = $10;
      $14 = $0;
      break;
     } else _abort();
    } while (0);
    $shl90 = $add64 << 3;
    $sub91 = $shl90 - $cond | 0;
    HEAP32[$9 + 4 >> 2] = $cond | 3;
    $add$ptr95 = $9 + $cond | 0;
    HEAP32[$add$ptr95 + 4 >> 2] = $sub91 | 1;
    HEAP32[$9 + $shl90 >> 2] = $sub91;
    if ($7 | 0) {
     $13 = HEAP32[7601] | 0;
     $shr101 = $7 >>> 3;
     $arrayidx103 = 30424 + ($shr101 << 1 << 2) | 0;
     $shl105 = 1 << $shr101;
     if (!($14 & $shl105)) {
      HEAP32[7596] = $14 | $shl105;
      $$pre$phiZ2D = $arrayidx103 + 8 | 0;
      $F104$0 = $arrayidx103;
     } else {
      $15 = $arrayidx103 + 8 | 0;
      $16 = HEAP32[$15 >> 2] | 0;
      if ((HEAP32[7600] | 0) >>> 0 > $16 >>> 0) _abort(); else {
       $$pre$phiZ2D = $15;
       $F104$0 = $16;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $13;
     HEAP32[$F104$0 + 12 >> 2] = $13;
     HEAP32[$13 + 8 >> 2] = $F104$0;
     HEAP32[$13 + 12 >> 2] = $arrayidx103;
    }
    HEAP32[7598] = $sub91;
    HEAP32[7601] = $add$ptr95;
    $retval$0 = $fd69;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $18 = HEAP32[7597] | 0;
   if (!$18) $nb$0 = $cond; else {
    $sub2$i = ($18 & 0 - $18) + -1 | 0;
    $and3$i = $sub2$i >>> 12 & 16;
    $shr4$i = $sub2$i >>> $and3$i;
    $and6$i = $shr4$i >>> 5 & 8;
    $shr7$i = $shr4$i >>> $and6$i;
    $and9$i = $shr7$i >>> 2 & 4;
    $shr11$i = $shr7$i >>> $and9$i;
    $and13$i = $shr11$i >>> 1 & 2;
    $shr15$i = $shr11$i >>> $and13$i;
    $and17$i = $shr15$i >>> 1 & 1;
    $19 = HEAP32[30688 + (($and6$i | $and3$i | $and9$i | $and13$i | $and17$i) + ($shr15$i >>> $and17$i) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$19 + 4 >> 2] & -8) - $cond | 0;
    $t$0$i = $19;
    $v$0$i = $19;
    while (1) {
     $21 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$21) {
      $22 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$22) break; else $cond5$i = $22;
     } else $cond5$i = $21;
     $sub31$i = (HEAP32[$cond5$i + 4 >> 2] & -8) - $cond | 0;
     $cmp32$i = $sub31$i >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $cmp32$i ? $sub31$i : $rsize$0$i;
     $t$0$i = $cond5$i;
     $v$0$i = $cmp32$i ? $cond5$i : $v$0$i;
    }
    $24 = HEAP32[7600] | 0;
    if ($24 >>> 0 > $v$0$i >>> 0) _abort();
    $add$ptr$i = $v$0$i + $cond | 0;
    if ($add$ptr$i >>> 0 <= $v$0$i >>> 0) _abort();
    $25 = HEAP32[$v$0$i + 24 >> 2] | 0;
    $26 = HEAP32[$v$0$i + 12 >> 2] | 0;
    do if (($26 | 0) == ($v$0$i | 0)) {
     $arrayidx61$i = $v$0$i + 20 | 0;
     $30 = HEAP32[$arrayidx61$i >> 2] | 0;
     if (!$30) {
      $arrayidx65$i = $v$0$i + 16 | 0;
      $31 = HEAP32[$arrayidx65$i >> 2] | 0;
      if (!$31) {
       $R$3$i = 0;
       break;
      } else {
       $R$1$i$ph = $31;
       $RP$1$i$ph = $arrayidx65$i;
      }
     } else {
      $R$1$i$ph = $30;
      $RP$1$i$ph = $arrayidx61$i;
     }
     $R$1$i = $R$1$i$ph;
     $RP$1$i = $RP$1$i$ph;
     while (1) {
      $arrayidx71$i = $R$1$i + 20 | 0;
      $32 = HEAP32[$arrayidx71$i >> 2] | 0;
      if (!$32) {
       $arrayidx75$i = $R$1$i + 16 | 0;
       $33 = HEAP32[$arrayidx75$i >> 2] | 0;
       if (!$33) break; else {
        $R$1$i$be = $33;
        $RP$1$i$be = $arrayidx75$i;
       }
      } else {
       $R$1$i$be = $32;
       $RP$1$i$be = $arrayidx71$i;
      }
      $R$1$i = $R$1$i$be;
      $RP$1$i = $RP$1$i$be;
     }
     if ($24 >>> 0 > $RP$1$i >>> 0) _abort(); else {
      HEAP32[$RP$1$i >> 2] = 0;
      $R$3$i = $R$1$i;
      break;
     }
    } else {
     $27 = HEAP32[$v$0$i + 8 >> 2] | 0;
     if ($24 >>> 0 > $27 >>> 0) _abort();
     $bk47$i = $27 + 12 | 0;
     if ((HEAP32[$bk47$i >> 2] | 0) != ($v$0$i | 0)) _abort();
     $fd50$i = $26 + 8 | 0;
     if ((HEAP32[$fd50$i >> 2] | 0) == ($v$0$i | 0)) {
      HEAP32[$bk47$i >> 2] = $26;
      HEAP32[$fd50$i >> 2] = $27;
      $R$3$i = $26;
      break;
     } else _abort();
    } while (0);
    L78 : do if ($25 | 0) {
     $34 = HEAP32[$v$0$i + 28 >> 2] | 0;
     $arrayidx94$i = 30688 + ($34 << 2) | 0;
     do if (($v$0$i | 0) == (HEAP32[$arrayidx94$i >> 2] | 0)) {
      HEAP32[$arrayidx94$i >> 2] = $R$3$i;
      if (!$R$3$i) {
       HEAP32[7597] = $18 & ~(1 << $34);
       break L78;
      }
     } else if ((HEAP32[7600] | 0) >>> 0 > $25 >>> 0) _abort(); else {
      $arrayidx113$i = $25 + 16 | 0;
      HEAP32[((HEAP32[$arrayidx113$i >> 2] | 0) == ($v$0$i | 0) ? $arrayidx113$i : $25 + 20 | 0) >> 2] = $R$3$i;
      if (!$R$3$i) break L78; else break;
     } while (0);
     $38 = HEAP32[7600] | 0;
     if ($38 >>> 0 > $R$3$i >>> 0) _abort();
     HEAP32[$R$3$i + 24 >> 2] = $25;
     $39 = HEAP32[$v$0$i + 16 >> 2] | 0;
     do if ($39 | 0) if ($38 >>> 0 > $39 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 16 >> 2] = $39;
      HEAP32[$39 + 24 >> 2] = $R$3$i;
      break;
     } while (0);
     $40 = HEAP32[$v$0$i + 20 >> 2] | 0;
     if ($40 | 0) if ((HEAP32[7600] | 0) >>> 0 > $40 >>> 0) _abort(); else {
      HEAP32[$R$3$i + 20 >> 2] = $40;
      HEAP32[$40 + 24 >> 2] = $R$3$i;
      break;
     }
    } while (0);
    if ($rsize$0$i >>> 0 < 16) {
     $add177$i = $rsize$0$i + $cond | 0;
     HEAP32[$v$0$i + 4 >> 2] = $add177$i | 3;
     $head182$i = $v$0$i + $add177$i + 4 | 0;
     HEAP32[$head182$i >> 2] = HEAP32[$head182$i >> 2] | 1;
    } else {
     HEAP32[$v$0$i + 4 >> 2] = $cond | 3;
     HEAP32[$add$ptr$i + 4 >> 2] = $rsize$0$i | 1;
     HEAP32[$add$ptr$i + $rsize$0$i >> 2] = $rsize$0$i;
     if ($7 | 0) {
      $43 = HEAP32[7601] | 0;
      $shr194$i = $7 >>> 3;
      $arrayidx196$i = 30424 + ($shr194$i << 1 << 2) | 0;
      $shl198$i = 1 << $shr194$i;
      if (!($shl198$i & $0)) {
       HEAP32[7596] = $shl198$i | $0;
       $$pre$phi$iZ2D = $arrayidx196$i + 8 | 0;
       $F197$0$i = $arrayidx196$i;
      } else {
       $44 = $arrayidx196$i + 8 | 0;
       $45 = HEAP32[$44 >> 2] | 0;
       if ((HEAP32[7600] | 0) >>> 0 > $45 >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $44;
        $F197$0$i = $45;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $43;
      HEAP32[$F197$0$i + 12 >> 2] = $43;
      HEAP32[$43 + 8 >> 2] = $F197$0$i;
      HEAP32[$43 + 12 >> 2] = $arrayidx196$i;
     }
     HEAP32[7598] = $rsize$0$i;
     HEAP32[7601] = $add$ptr$i;
    }
    $retval$0 = $v$0$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
  } else $nb$0 = $cond;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $add144 = $bytes + 11 | 0;
  $and145 = $add144 & -8;
  $47 = HEAP32[7597] | 0;
  if (!$47) $nb$0 = $and145; else {
   $sub$i140 = 0 - $and145 | 0;
   $shr$i141 = $add144 >>> 8;
   if (!$shr$i141) $idx$0$i = 0; else if ($and145 >>> 0 > 16777215) $idx$0$i = 31; else {
    $and$i145 = ($shr$i141 + 1048320 | 0) >>> 16 & 8;
    $shl$i146 = $shr$i141 << $and$i145;
    $and8$i = ($shl$i146 + 520192 | 0) >>> 16 & 4;
    $shl9$i = $shl$i146 << $and8$i;
    $and12$i = ($shl9$i + 245760 | 0) >>> 16 & 2;
    $add17$i = 14 - ($and8$i | $and$i145 | $and12$i) + ($shl9$i << $and12$i >>> 15) | 0;
    $idx$0$i = $and145 >>> ($add17$i + 7 | 0) & 1 | $add17$i << 1;
   }
   $48 = HEAP32[30688 + ($idx$0$i << 2) >> 2] | 0;
   L122 : do if (!$48) {
    $rsize$3$i = $sub$i140;
    $t$2$i = 0;
    $v$3$i = 0;
    label = 85;
   } else {
    $rsize$0$i154 = $sub$i140;
    $rst$0$i = 0;
    $sizebits$0$i = $and145 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i153 = $48;
    $v$0$i155 = 0;
    while (1) {
     $sub33$i = (HEAP32[$t$0$i153 + 4 >> 2] & -8) - $and145 | 0;
     if ($sub33$i >>> 0 < $rsize$0$i154 >>> 0) if (!$sub33$i) {
      $rsize$420$i$ph = 0;
      $t$519$i$ph = $t$0$i153;
      $v$421$i$ph = $t$0$i153;
      label = 89;
      break L122;
     } else {
      $rsize$1$i = $sub33$i;
      $v$1$i = $t$0$i153;
     } else {
      $rsize$1$i = $rsize$0$i154;
      $v$1$i = $v$0$i155;
     }
     $50 = HEAP32[$t$0$i153 + 20 >> 2] | 0;
     $t$0$i153 = HEAP32[$t$0$i153 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($50 | 0) == 0 | ($50 | 0) == ($t$0$i153 | 0) ? $rst$0$i : $50;
     if (!$t$0$i153) {
      $rsize$3$i = $rsize$1$i;
      $t$2$i = $rst$1$i;
      $v$3$i = $v$1$i;
      label = 85;
      break;
     } else {
      $rsize$0$i154 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << 1;
      $v$0$i155 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 85) {
    if (($t$2$i | 0) == 0 & ($v$3$i | 0) == 0) {
     $shl60$i = 2 << $idx$0$i;
     $and64$i = ($shl60$i | 0 - $shl60$i) & $47;
     if (!$and64$i) {
      $nb$0 = $and145;
      break;
     }
     $sub70$i = ($and64$i & 0 - $and64$i) + -1 | 0;
     $and73$i = $sub70$i >>> 12 & 16;
     $shr75$i = $sub70$i >>> $and73$i;
     $and77$i = $shr75$i >>> 5 & 8;
     $shr79$i = $shr75$i >>> $and77$i;
     $and81$i = $shr79$i >>> 2 & 4;
     $shr83$i = $shr79$i >>> $and81$i;
     $and85$i = $shr83$i >>> 1 & 2;
     $shr87$i = $shr83$i >>> $and85$i;
     $and89$i = $shr87$i >>> 1 & 1;
     $t$4$i = HEAP32[30688 + (($and77$i | $and73$i | $and81$i | $and85$i | $and89$i) + ($shr87$i >>> $and89$i) << 2) >> 2] | 0;
     $v$3$i222 = 0;
    } else {
     $t$4$i = $t$2$i;
     $v$3$i222 = $v$3$i;
    }
    if (!$t$4$i) {
     $rsize$4$lcssa$i = $rsize$3$i;
     $v$4$lcssa$i = $v$3$i222;
    } else {
     $rsize$420$i$ph = $rsize$3$i;
     $t$519$i$ph = $t$4$i;
     $v$421$i$ph = $v$3$i222;
     label = 89;
    }
   }
   if ((label | 0) == 89) {
    $rsize$420$i = $rsize$420$i$ph;
    $t$519$i = $t$519$i$ph;
    $v$421$i = $v$421$i$ph;
    while (1) {
     $sub101$i = (HEAP32[$t$519$i + 4 >> 2] & -8) - $and145 | 0;
     $cmp102$i = $sub101$i >>> 0 < $rsize$420$i >>> 0;
     $spec$select$i159 = $cmp102$i ? $sub101$i : $rsize$420$i;
     $spec$select3$i = $cmp102$i ? $t$519$i : $v$421$i;
     $54 = HEAP32[$t$519$i + 16 >> 2] | 0;
     if (!$54) $cond115$i = HEAP32[$t$519$i + 20 >> 2] | 0; else $cond115$i = $54;
     if (!$cond115$i) {
      $rsize$4$lcssa$i = $spec$select$i159;
      $v$4$lcssa$i = $spec$select3$i;
      break;
     } else {
      $rsize$420$i = $spec$select$i159;
      $t$519$i = $cond115$i;
      $v$421$i = $spec$select3$i;
     }
    }
   }
   if (!$v$4$lcssa$i) $nb$0 = $and145; else if ($rsize$4$lcssa$i >>> 0 < ((HEAP32[7598] | 0) - $and145 | 0) >>> 0) {
    $57 = HEAP32[7600] | 0;
    if ($57 >>> 0 > $v$4$lcssa$i >>> 0) _abort();
    $add$ptr$i164 = $v$4$lcssa$i + $and145 | 0;
    if ($add$ptr$i164 >>> 0 <= $v$4$lcssa$i >>> 0) _abort();
    $58 = HEAP32[$v$4$lcssa$i + 24 >> 2] | 0;
    $59 = HEAP32[$v$4$lcssa$i + 12 >> 2] | 0;
    do if (($59 | 0) == ($v$4$lcssa$i | 0)) {
     $arrayidx151$i = $v$4$lcssa$i + 20 | 0;
     $63 = HEAP32[$arrayidx151$i >> 2] | 0;
     if (!$63) {
      $arrayidx155$i = $v$4$lcssa$i + 16 | 0;
      $64 = HEAP32[$arrayidx155$i >> 2] | 0;
      if (!$64) {
       $R$3$i177 = 0;
       break;
      } else {
       $R$1$i173$ph = $64;
       $RP$1$i172$ph = $arrayidx155$i;
      }
     } else {
      $R$1$i173$ph = $63;
      $RP$1$i172$ph = $arrayidx151$i;
     }
     $R$1$i173 = $R$1$i173$ph;
     $RP$1$i172 = $RP$1$i172$ph;
     while (1) {
      $arrayidx161$i = $R$1$i173 + 20 | 0;
      $65 = HEAP32[$arrayidx161$i >> 2] | 0;
      if (!$65) {
       $arrayidx165$i174 = $R$1$i173 + 16 | 0;
       $66 = HEAP32[$arrayidx165$i174 >> 2] | 0;
       if (!$66) break; else {
        $R$1$i173$be = $66;
        $RP$1$i172$be = $arrayidx165$i174;
       }
      } else {
       $R$1$i173$be = $65;
       $RP$1$i172$be = $arrayidx161$i;
      }
      $R$1$i173 = $R$1$i173$be;
      $RP$1$i172 = $RP$1$i172$be;
     }
     if ($57 >>> 0 > $RP$1$i172 >>> 0) _abort(); else {
      HEAP32[$RP$1$i172 >> 2] = 0;
      $R$3$i177 = $R$1$i173;
      break;
     }
    } else {
     $60 = HEAP32[$v$4$lcssa$i + 8 >> 2] | 0;
     if ($57 >>> 0 > $60 >>> 0) _abort();
     $bk136$i = $60 + 12 | 0;
     if ((HEAP32[$bk136$i >> 2] | 0) != ($v$4$lcssa$i | 0)) _abort();
     $fd139$i = $59 + 8 | 0;
     if ((HEAP32[$fd139$i >> 2] | 0) == ($v$4$lcssa$i | 0)) {
      HEAP32[$bk136$i >> 2] = $59;
      HEAP32[$fd139$i >> 2] = $60;
      $R$3$i177 = $59;
      break;
     } else _abort();
    } while (0);
    L176 : do if (!$58) $80 = $47; else {
     $67 = HEAP32[$v$4$lcssa$i + 28 >> 2] | 0;
     $arrayidx184$i = 30688 + ($67 << 2) | 0;
     do if (($v$4$lcssa$i | 0) == (HEAP32[$arrayidx184$i >> 2] | 0)) {
      HEAP32[$arrayidx184$i >> 2] = $R$3$i177;
      if (!$R$3$i177) {
       $and194$i = $47 & ~(1 << $67);
       HEAP32[7597] = $and194$i;
       $80 = $and194$i;
       break L176;
      }
     } else if ((HEAP32[7600] | 0) >>> 0 > $58 >>> 0) _abort(); else {
      $arrayidx204$i = $58 + 16 | 0;
      HEAP32[((HEAP32[$arrayidx204$i >> 2] | 0) == ($v$4$lcssa$i | 0) ? $arrayidx204$i : $58 + 20 | 0) >> 2] = $R$3$i177;
      if (!$R$3$i177) {
       $80 = $47;
       break L176;
      } else break;
     } while (0);
     $71 = HEAP32[7600] | 0;
     if ($71 >>> 0 > $R$3$i177 >>> 0) _abort();
     HEAP32[$R$3$i177 + 24 >> 2] = $58;
     $72 = HEAP32[$v$4$lcssa$i + 16 >> 2] | 0;
     do if ($72 | 0) if ($71 >>> 0 > $72 >>> 0) _abort(); else {
      HEAP32[$R$3$i177 + 16 >> 2] = $72;
      HEAP32[$72 + 24 >> 2] = $R$3$i177;
      break;
     } while (0);
     $73 = HEAP32[$v$4$lcssa$i + 20 >> 2] | 0;
     if (!$73) $80 = $47; else if ((HEAP32[7600] | 0) >>> 0 > $73 >>> 0) _abort(); else {
      HEAP32[$R$3$i177 + 20 >> 2] = $73;
      HEAP32[$73 + 24 >> 2] = $R$3$i177;
      $80 = $47;
      break;
     }
    } while (0);
    L200 : do if ($rsize$4$lcssa$i >>> 0 < 16) {
     $add268$i = $rsize$4$lcssa$i + $and145 | 0;
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $add268$i | 3;
     $head274$i = $v$4$lcssa$i + $add268$i + 4 | 0;
     HEAP32[$head274$i >> 2] = HEAP32[$head274$i >> 2] | 1;
    } else {
     HEAP32[$v$4$lcssa$i + 4 >> 2] = $and145 | 3;
     HEAP32[$add$ptr$i164 + 4 >> 2] = $rsize$4$lcssa$i | 1;
     HEAP32[$add$ptr$i164 + $rsize$4$lcssa$i >> 2] = $rsize$4$lcssa$i;
     $shr283$i = $rsize$4$lcssa$i >>> 3;
     if ($rsize$4$lcssa$i >>> 0 < 256) {
      $arrayidx289$i = 30424 + ($shr283$i << 1 << 2) | 0;
      $76 = HEAP32[7596] | 0;
      $shl291$i = 1 << $shr283$i;
      if (!($76 & $shl291$i)) {
       HEAP32[7596] = $76 | $shl291$i;
       $$pre$phi$i185Z2D = $arrayidx289$i + 8 | 0;
       $F290$0$i = $arrayidx289$i;
      } else {
       $77 = $arrayidx289$i + 8 | 0;
       $78 = HEAP32[$77 >> 2] | 0;
       if ((HEAP32[7600] | 0) >>> 0 > $78 >>> 0) _abort(); else {
        $$pre$phi$i185Z2D = $77;
        $F290$0$i = $78;
       }
      }
      HEAP32[$$pre$phi$i185Z2D >> 2] = $add$ptr$i164;
      HEAP32[$F290$0$i + 12 >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $F290$0$i;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $arrayidx289$i;
      break;
     }
     $shr318$i = $rsize$4$lcssa$i >>> 8;
     if (!$shr318$i) $I316$0$i = 0; else if ($rsize$4$lcssa$i >>> 0 > 16777215) $I316$0$i = 31; else {
      $and331$i = ($shr318$i + 1048320 | 0) >>> 16 & 8;
      $shl333$i = $shr318$i << $and331$i;
      $and336$i = ($shl333$i + 520192 | 0) >>> 16 & 4;
      $shl338$i = $shl333$i << $and336$i;
      $and341$i = ($shl338$i + 245760 | 0) >>> 16 & 2;
      $add346$i = 14 - ($and336$i | $and331$i | $and341$i) + ($shl338$i << $and341$i >>> 15) | 0;
      $I316$0$i = $rsize$4$lcssa$i >>> ($add346$i + 7 | 0) & 1 | $add346$i << 1;
     }
     $arrayidx355$i = 30688 + ($I316$0$i << 2) | 0;
     HEAP32[$add$ptr$i164 + 28 >> 2] = $I316$0$i;
     $child357$i = $add$ptr$i164 + 16 | 0;
     HEAP32[$child357$i + 4 >> 2] = 0;
     HEAP32[$child357$i >> 2] = 0;
     $shl362$i = 1 << $I316$0$i;
     if (!($80 & $shl362$i)) {
      HEAP32[7597] = $80 | $shl362$i;
      HEAP32[$arrayidx355$i >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 24 >> 2] = $arrayidx355$i;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $add$ptr$i164;
      break;
     }
     $81 = HEAP32[$arrayidx355$i >> 2] | 0;
     L218 : do if ((HEAP32[$81 + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) $T$0$lcssa$i = $81; else {
      $K373$017$i = $rsize$4$lcssa$i << (($I316$0$i | 0) == 31 ? 0 : 25 - ($I316$0$i >>> 1) | 0);
      $T$016$i = $81;
      while (1) {
       $arrayidx394$i = $T$016$i + 16 + ($K373$017$i >>> 31 << 2) | 0;
       $83 = HEAP32[$arrayidx394$i >> 2] | 0;
       if (!$83) break;
       if ((HEAP32[$83 + 4 >> 2] & -8 | 0) == ($rsize$4$lcssa$i | 0)) {
        $T$0$lcssa$i = $83;
        break L218;
       } else {
        $K373$017$i = $K373$017$i << 1;
        $T$016$i = $83;
       }
      }
      if ((HEAP32[7600] | 0) >>> 0 > $arrayidx394$i >>> 0) _abort(); else {
       HEAP32[$arrayidx394$i >> 2] = $add$ptr$i164;
       HEAP32[$add$ptr$i164 + 24 >> 2] = $T$016$i;
       HEAP32[$add$ptr$i164 + 12 >> 2] = $add$ptr$i164;
       HEAP32[$add$ptr$i164 + 8 >> 2] = $add$ptr$i164;
       break L200;
      }
     } while (0);
     $fd416$i = $T$0$lcssa$i + 8 | 0;
     $86 = HEAP32[$fd416$i >> 2] | 0;
     $87 = HEAP32[7600] | 0;
     if ($87 >>> 0 <= $86 >>> 0 & $87 >>> 0 <= $T$0$lcssa$i >>> 0) {
      HEAP32[$86 + 12 >> 2] = $add$ptr$i164;
      HEAP32[$fd416$i >> 2] = $add$ptr$i164;
      HEAP32[$add$ptr$i164 + 8 >> 2] = $86;
      HEAP32[$add$ptr$i164 + 12 >> 2] = $T$0$lcssa$i;
      HEAP32[$add$ptr$i164 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $retval$0 = $v$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   } else $nb$0 = $and145;
  }
 } while (0);
 $89 = HEAP32[7598] | 0;
 if ($89 >>> 0 >= $nb$0 >>> 0) {
  $sub160 = $89 - $nb$0 | 0;
  $90 = HEAP32[7601] | 0;
  if ($sub160 >>> 0 > 15) {
   $add$ptr166 = $90 + $nb$0 | 0;
   HEAP32[7601] = $add$ptr166;
   HEAP32[7598] = $sub160;
   HEAP32[$add$ptr166 + 4 >> 2] = $sub160 | 1;
   HEAP32[$90 + $89 >> 2] = $sub160;
   HEAP32[$90 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[7598] = 0;
   HEAP32[7601] = 0;
   HEAP32[$90 + 4 >> 2] = $89 | 3;
   $head179 = $90 + $89 + 4 | 0;
   HEAP32[$head179 >> 2] = HEAP32[$head179 >> 2] | 1;
  }
  $retval$0 = $90 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $92 = HEAP32[7599] | 0;
 if ($92 >>> 0 > $nb$0 >>> 0) {
  $sub190 = $92 - $nb$0 | 0;
  HEAP32[7599] = $sub190;
  $93 = HEAP32[7602] | 0;
  $add$ptr193 = $93 + $nb$0 | 0;
  HEAP32[7602] = $add$ptr193;
  HEAP32[$add$ptr193 + 4 >> 2] = $sub190 | 1;
  HEAP32[$93 + 4 >> 2] = $nb$0 | 3;
  $retval$0 = $93 + 8 | 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 if (!(HEAP32[7714] | 0)) {
  HEAP32[7716] = 4096;
  HEAP32[7715] = 4096;
  HEAP32[7717] = -1;
  HEAP32[7718] = -1;
  HEAP32[7719] = 0;
  HEAP32[7707] = 0;
  HEAP32[7714] = $magic$i$i & -16 ^ 1431655768;
  $96 = 4096;
 } else $96 = HEAP32[7716] | 0;
 $add$i188 = $nb$0 + 48 | 0;
 $sub$i189 = $nb$0 + 47 | 0;
 $add9$i = $96 + $sub$i189 | 0;
 $neg$i190 = 0 - $96 | 0;
 $and11$i = $add9$i & $neg$i190;
 if ($and11$i >>> 0 <= $nb$0 >>> 0) {
  $retval$0 = 0;
  STACKTOP = sp;
  return $retval$0 | 0;
 }
 $97 = HEAP32[7706] | 0;
 if ($97 | 0) {
  $98 = HEAP32[7704] | 0;
  $add17$i191 = $98 + $and11$i | 0;
  if ($add17$i191 >>> 0 <= $98 >>> 0 | $add17$i191 >>> 0 > $97 >>> 0) {
   $retval$0 = 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 L257 : do if (!(HEAP32[7707] & 4)) {
  $100 = HEAP32[7602] | 0;
  L259 : do if (!$100) label = 173; else {
   $sp$0$i$i = 30832;
   while (1) {
    $101 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($101 >>> 0 <= $100 >>> 0) if (($101 + (HEAP32[$sp$0$i$i + 4 >> 2] | 0) | 0) >>> 0 > $100 >>> 0) break;
    $103 = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$103) {
     label = 173;
     break L259;
    } else $sp$0$i$i = $103;
   }
   $and80$i = $add9$i - $92 & $neg$i190;
   if ($and80$i >>> 0 < 2147483647) {
    $call83$i = _sbrk($and80$i) | 0;
    if (($call83$i | 0) == ((HEAP32[$sp$0$i$i >> 2] | 0) + (HEAP32[$sp$0$i$i + 4 >> 2] | 0) | 0)) if (($call83$i | 0) == (-1 | 0)) $tsize$2687886$i = $and80$i; else {
     $tbase$799$i = $call83$i;
     $tsize$798$i = $and80$i;
     label = 190;
     break L257;
    } else {
     $br$2$ph$i = $call83$i;
     $ssize$2$ph$i = $and80$i;
     label = 181;
    }
   } else $tsize$2687886$i = 0;
  } while (0);
  do if ((label | 0) == 173) {
   $call37$i = _sbrk(0) | 0;
   if (($call37$i | 0) == (-1 | 0)) $tsize$2687886$i = 0; else {
    $104 = $call37$i;
    $105 = HEAP32[7715] | 0;
    $sub41$i = $105 + -1 | 0;
    $spec$select100$i = (($sub41$i & $104 | 0) == 0 ? 0 : ($sub41$i + $104 & 0 - $105) - $104 | 0) + $and11$i | 0;
    $106 = HEAP32[7704] | 0;
    $add54$i = $spec$select100$i + $106 | 0;
    if ($spec$select100$i >>> 0 > $nb$0 >>> 0 & $spec$select100$i >>> 0 < 2147483647) {
     $107 = HEAP32[7706] | 0;
     if ($107 | 0) if ($add54$i >>> 0 <= $106 >>> 0 | $add54$i >>> 0 > $107 >>> 0) {
      $tsize$2687886$i = 0;
      break;
     }
     $call68$i = _sbrk($spec$select100$i) | 0;
     if (($call68$i | 0) == ($call37$i | 0)) {
      $tbase$799$i = $call37$i;
      $tsize$798$i = $spec$select100$i;
      label = 190;
      break L257;
     } else {
      $br$2$ph$i = $call68$i;
      $ssize$2$ph$i = $spec$select100$i;
      label = 181;
     }
    } else $tsize$2687886$i = 0;
   }
  } while (0);
  do if ((label | 0) == 181) {
   $sub112$i = 0 - $ssize$2$ph$i | 0;
   if (!($add$i188 >>> 0 > $ssize$2$ph$i >>> 0 & ($ssize$2$ph$i >>> 0 < 2147483647 & ($br$2$ph$i | 0) != (-1 | 0)))) if (($br$2$ph$i | 0) == (-1 | 0)) {
    $tsize$2687886$i = 0;
    break;
   } else {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $ssize$2$ph$i;
    label = 190;
    break L257;
   }
   $110 = HEAP32[7716] | 0;
   $and104$i = $sub$i189 - $ssize$2$ph$i + $110 & 0 - $110;
   if ($and104$i >>> 0 >= 2147483647) {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $ssize$2$ph$i;
    label = 190;
    break L257;
   }
   if ((_sbrk($and104$i) | 0) == (-1 | 0)) {
    _sbrk($sub112$i) | 0;
    $tsize$2687886$i = 0;
    break;
   } else {
    $tbase$799$i = $br$2$ph$i;
    $tsize$798$i = $and104$i + $ssize$2$ph$i | 0;
    label = 190;
    break L257;
   }
  } while (0);
  HEAP32[7707] = HEAP32[7707] | 4;
  $tsize$4$i = $tsize$2687886$i;
  label = 188;
 } else {
  $tsize$4$i = 0;
  label = 188;
 } while (0);
 if ((label | 0) == 188) if ($and11$i >>> 0 < 2147483647) {
  $call131$i = _sbrk($and11$i) | 0;
  $call132$i = _sbrk(0) | 0;
  $sub$ptr$sub$i = $call132$i - $call131$i | 0;
  $cmp141$i = $sub$ptr$sub$i >>> 0 > ($nb$0 + 40 | 0) >>> 0;
  if (!(($call131$i | 0) == (-1 | 0) | $cmp141$i ^ 1 | $call131$i >>> 0 < $call132$i >>> 0 & (($call131$i | 0) != (-1 | 0) & ($call132$i | 0) != (-1 | 0)) ^ 1)) {
   $tbase$799$i = $call131$i;
   $tsize$798$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   label = 190;
  }
 }
 if ((label | 0) == 190) {
  $add150$i = (HEAP32[7704] | 0) + $tsize$798$i | 0;
  HEAP32[7704] = $add150$i;
  if ($add150$i >>> 0 > (HEAP32[7705] | 0) >>> 0) HEAP32[7705] = $add150$i;
  $114 = HEAP32[7602] | 0;
  L294 : do if (!$114) {
   $115 = HEAP32[7600] | 0;
   if (($115 | 0) == 0 | $tbase$799$i >>> 0 < $115 >>> 0) HEAP32[7600] = $tbase$799$i;
   HEAP32[7708] = $tbase$799$i;
   HEAP32[7709] = $tsize$798$i;
   HEAP32[7711] = 0;
   HEAP32[7605] = HEAP32[7714];
   HEAP32[7604] = -1;
   HEAP32[7609] = 30424;
   HEAP32[7608] = 30424;
   HEAP32[7611] = 30432;
   HEAP32[7610] = 30432;
   HEAP32[7613] = 30440;
   HEAP32[7612] = 30440;
   HEAP32[7615] = 30448;
   HEAP32[7614] = 30448;
   HEAP32[7617] = 30456;
   HEAP32[7616] = 30456;
   HEAP32[7619] = 30464;
   HEAP32[7618] = 30464;
   HEAP32[7621] = 30472;
   HEAP32[7620] = 30472;
   HEAP32[7623] = 30480;
   HEAP32[7622] = 30480;
   HEAP32[7625] = 30488;
   HEAP32[7624] = 30488;
   HEAP32[7627] = 30496;
   HEAP32[7626] = 30496;
   HEAP32[7629] = 30504;
   HEAP32[7628] = 30504;
   HEAP32[7631] = 30512;
   HEAP32[7630] = 30512;
   HEAP32[7633] = 30520;
   HEAP32[7632] = 30520;
   HEAP32[7635] = 30528;
   HEAP32[7634] = 30528;
   HEAP32[7637] = 30536;
   HEAP32[7636] = 30536;
   HEAP32[7639] = 30544;
   HEAP32[7638] = 30544;
   HEAP32[7641] = 30552;
   HEAP32[7640] = 30552;
   HEAP32[7643] = 30560;
   HEAP32[7642] = 30560;
   HEAP32[7645] = 30568;
   HEAP32[7644] = 30568;
   HEAP32[7647] = 30576;
   HEAP32[7646] = 30576;
   HEAP32[7649] = 30584;
   HEAP32[7648] = 30584;
   HEAP32[7651] = 30592;
   HEAP32[7650] = 30592;
   HEAP32[7653] = 30600;
   HEAP32[7652] = 30600;
   HEAP32[7655] = 30608;
   HEAP32[7654] = 30608;
   HEAP32[7657] = 30616;
   HEAP32[7656] = 30616;
   HEAP32[7659] = 30624;
   HEAP32[7658] = 30624;
   HEAP32[7661] = 30632;
   HEAP32[7660] = 30632;
   HEAP32[7663] = 30640;
   HEAP32[7662] = 30640;
   HEAP32[7665] = 30648;
   HEAP32[7664] = 30648;
   HEAP32[7667] = 30656;
   HEAP32[7666] = 30656;
   HEAP32[7669] = 30664;
   HEAP32[7668] = 30664;
   HEAP32[7671] = 30672;
   HEAP32[7670] = 30672;
   $sub172$i = $tsize$798$i + -40 | 0;
   $117 = $tbase$799$i + 8 | 0;
   $cond$i20$i = ($117 & 7 | 0) == 0 ? 0 : 0 - $117 & 7;
   $add$ptr4$i$i = $tbase$799$i + $cond$i20$i | 0;
   $sub5$i$i = $sub172$i - $cond$i20$i | 0;
   HEAP32[7602] = $add$ptr4$i$i;
   HEAP32[7599] = $sub5$i$i;
   HEAP32[$add$ptr4$i$i + 4 >> 2] = $sub5$i$i | 1;
   HEAP32[$tbase$799$i + $sub172$i + 4 >> 2] = 40;
   HEAP32[7603] = HEAP32[7718];
  } else {
   $sp$0116$i = 30832;
   while (1) {
    $119 = HEAP32[$sp$0116$i >> 2] | 0;
    $120 = HEAP32[$sp$0116$i + 4 >> 2] | 0;
    if (($tbase$799$i | 0) == ($119 + $120 | 0)) {
     label = 199;
     break;
    }
    $121 = HEAP32[$sp$0116$i + 8 >> 2] | 0;
    if (!$121) break; else $sp$0116$i = $121;
   }
   if ((label | 0) == 199) {
    $size188$i$le = $sp$0116$i + 4 | 0;
    if (!(HEAP32[$sp$0116$i + 12 >> 2] & 8)) if ($tbase$799$i >>> 0 > $114 >>> 0 & $119 >>> 0 <= $114 >>> 0) {
     HEAP32[$size188$i$le >> 2] = $120 + $tsize$798$i;
     $add215$i = (HEAP32[7599] | 0) + $tsize$798$i | 0;
     $124 = $114 + 8 | 0;
     $cond$i56$i = ($124 & 7 | 0) == 0 ? 0 : 0 - $124 & 7;
     $add$ptr4$i57$i = $114 + $cond$i56$i | 0;
     $sub5$i58$i = $add215$i - $cond$i56$i | 0;
     HEAP32[7602] = $add$ptr4$i57$i;
     HEAP32[7599] = $sub5$i58$i;
     HEAP32[$add$ptr4$i57$i + 4 >> 2] = $sub5$i58$i | 1;
     HEAP32[$114 + $add215$i + 4 >> 2] = 40;
     HEAP32[7603] = HEAP32[7718];
     break;
    }
   }
   $126 = HEAP32[7600] | 0;
   if ($tbase$799$i >>> 0 < $126 >>> 0) {
    HEAP32[7600] = $tbase$799$i;
    $139 = $tbase$799$i;
   } else $139 = $126;
   $add$ptr227$i = $tbase$799$i + $tsize$798$i | 0;
   $sp$1115$i = 30832;
   while (1) {
    if ((HEAP32[$sp$1115$i >> 2] | 0) == ($add$ptr227$i | 0)) {
     label = 207;
     break;
    }
    $128 = HEAP32[$sp$1115$i + 8 >> 2] | 0;
    if (!$128) break; else $sp$1115$i = $128;
   }
   if ((label | 0) == 207) if (!(HEAP32[$sp$1115$i + 12 >> 2] & 8)) {
    HEAP32[$sp$1115$i >> 2] = $tbase$799$i;
    $size245$i = $sp$1115$i + 4 | 0;
    HEAP32[$size245$i >> 2] = (HEAP32[$size245$i >> 2] | 0) + $tsize$798$i;
    $131 = $tbase$799$i + 8 | 0;
    $add$ptr4$i28$i = $tbase$799$i + (($131 & 7 | 0) == 0 ? 0 : 0 - $131 & 7) | 0;
    $132 = $add$ptr227$i + 8 | 0;
    $add$ptr16$i$i = $add$ptr227$i + (($132 & 7 | 0) == 0 ? 0 : 0 - $132 & 7) | 0;
    $add$ptr17$i$i = $add$ptr4$i28$i + $nb$0 | 0;
    $sub18$i$i = $add$ptr16$i$i - $add$ptr4$i28$i - $nb$0 | 0;
    HEAP32[$add$ptr4$i28$i + 4 >> 2] = $nb$0 | 3;
    L317 : do if (($114 | 0) == ($add$ptr16$i$i | 0)) {
     $add$i$i = (HEAP32[7599] | 0) + $sub18$i$i | 0;
     HEAP32[7599] = $add$i$i;
     HEAP32[7602] = $add$ptr17$i$i;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $add$i$i | 1;
    } else {
     if ((HEAP32[7601] | 0) == ($add$ptr16$i$i | 0)) {
      $add26$i$i = (HEAP32[7598] | 0) + $sub18$i$i | 0;
      HEAP32[7598] = $add26$i$i;
      HEAP32[7601] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 4 >> 2] = $add26$i$i | 1;
      HEAP32[$add$ptr17$i$i + $add26$i$i >> 2] = $add26$i$i;
      break;
     }
     $136 = HEAP32[$add$ptr16$i$i + 4 >> 2] | 0;
     if (($136 & 3 | 0) == 1) {
      $and37$i$i = $136 & -8;
      $shr$i36$i = $136 >>> 3;
      L325 : do if ($136 >>> 0 < 256) {
       $137 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
       $138 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       $arrayidx$i39$i = 30424 + ($shr$i36$i << 1 << 2) | 0;
       do if (($137 | 0) != ($arrayidx$i39$i | 0)) {
        if ($139 >>> 0 > $137 >>> 0) _abort();
        if ((HEAP32[$137 + 12 >> 2] | 0) == ($add$ptr16$i$i | 0)) break;
        _abort();
       } while (0);
       if (($138 | 0) == ($137 | 0)) {
        HEAP32[7596] = HEAP32[7596] & ~(1 << $shr$i36$i);
        break;
       }
       do if (($138 | 0) == ($arrayidx$i39$i | 0)) $fd68$pre$phi$i$iZ2D = $138 + 8 | 0; else {
        if ($139 >>> 0 > $138 >>> 0) _abort();
        $fd59$i$i = $138 + 8 | 0;
        if ((HEAP32[$fd59$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         $fd68$pre$phi$i$iZ2D = $fd59$i$i;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$137 + 12 >> 2] = $138;
       HEAP32[$fd68$pre$phi$i$iZ2D >> 2] = $137;
      } else {
       $143 = HEAP32[$add$ptr16$i$i + 24 >> 2] | 0;
       $144 = HEAP32[$add$ptr16$i$i + 12 >> 2] | 0;
       do if (($144 | 0) == ($add$ptr16$i$i | 0)) {
        $child$i$i = $add$ptr16$i$i + 16 | 0;
        $arrayidx96$i$i = $child$i$i + 4 | 0;
        $148 = HEAP32[$arrayidx96$i$i >> 2] | 0;
        if (!$148) {
         $149 = HEAP32[$child$i$i >> 2] | 0;
         if (!$149) {
          $R$3$i$i = 0;
          break;
         } else {
          $R$1$i$i$ph = $149;
          $RP$1$i$i$ph = $child$i$i;
         }
        } else {
         $R$1$i$i$ph = $148;
         $RP$1$i$i$ph = $arrayidx96$i$i;
        }
        $R$1$i$i = $R$1$i$i$ph;
        $RP$1$i$i = $RP$1$i$i$ph;
        while (1) {
         $arrayidx103$i$i = $R$1$i$i + 20 | 0;
         $150 = HEAP32[$arrayidx103$i$i >> 2] | 0;
         if (!$150) {
          $arrayidx107$i$i = $R$1$i$i + 16 | 0;
          $151 = HEAP32[$arrayidx107$i$i >> 2] | 0;
          if (!$151) break; else {
           $R$1$i$i$be = $151;
           $RP$1$i$i$be = $arrayidx107$i$i;
          }
         } else {
          $R$1$i$i$be = $150;
          $RP$1$i$i$be = $arrayidx103$i$i;
         }
         $R$1$i$i = $R$1$i$i$be;
         $RP$1$i$i = $RP$1$i$i$be;
        }
        if ($139 >>> 0 > $RP$1$i$i >>> 0) _abort(); else {
         HEAP32[$RP$1$i$i >> 2] = 0;
         $R$3$i$i = $R$1$i$i;
         break;
        }
       } else {
        $145 = HEAP32[$add$ptr16$i$i + 8 >> 2] | 0;
        if ($139 >>> 0 > $145 >>> 0) _abort();
        $bk82$i$i = $145 + 12 | 0;
        if ((HEAP32[$bk82$i$i >> 2] | 0) != ($add$ptr16$i$i | 0)) _abort();
        $fd85$i$i = $144 + 8 | 0;
        if ((HEAP32[$fd85$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
         HEAP32[$bk82$i$i >> 2] = $144;
         HEAP32[$fd85$i$i >> 2] = $145;
         $R$3$i$i = $144;
         break;
        } else _abort();
       } while (0);
       if (!$143) break;
       $152 = HEAP32[$add$ptr16$i$i + 28 >> 2] | 0;
       $arrayidx123$i$i = 30688 + ($152 << 2) | 0;
       do if ((HEAP32[$arrayidx123$i$i >> 2] | 0) == ($add$ptr16$i$i | 0)) {
        HEAP32[$arrayidx123$i$i >> 2] = $R$3$i$i;
        if ($R$3$i$i | 0) break;
        HEAP32[7597] = HEAP32[7597] & ~(1 << $152);
        break L325;
       } else if ((HEAP32[7600] | 0) >>> 0 > $143 >>> 0) _abort(); else {
        $arrayidx143$i$i = $143 + 16 | 0;
        HEAP32[((HEAP32[$arrayidx143$i$i >> 2] | 0) == ($add$ptr16$i$i | 0) ? $arrayidx143$i$i : $143 + 20 | 0) >> 2] = $R$3$i$i;
        if (!$R$3$i$i) break L325; else break;
       } while (0);
       $157 = HEAP32[7600] | 0;
       if ($157 >>> 0 > $R$3$i$i >>> 0) _abort();
       HEAP32[$R$3$i$i + 24 >> 2] = $143;
       $child166$i$i = $add$ptr16$i$i + 16 | 0;
       $158 = HEAP32[$child166$i$i >> 2] | 0;
       do if ($158 | 0) if ($157 >>> 0 > $158 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 16 >> 2] = $158;
        HEAP32[$158 + 24 >> 2] = $R$3$i$i;
        break;
       } while (0);
       $159 = HEAP32[$child166$i$i + 4 >> 2] | 0;
       if (!$159) break;
       if ((HEAP32[7600] | 0) >>> 0 > $159 >>> 0) _abort(); else {
        HEAP32[$R$3$i$i + 20 >> 2] = $159;
        HEAP32[$159 + 24 >> 2] = $R$3$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $add$ptr16$i$i + $and37$i$i | 0;
      $qsize$0$i$i = $and37$i$i + $sub18$i$i | 0;
     } else {
      $oldfirst$0$i$i = $add$ptr16$i$i;
      $qsize$0$i$i = $sub18$i$i;
     }
     $head208$i$i = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$head208$i$i >> 2] = HEAP32[$head208$i$i >> 2] & -2;
     HEAP32[$add$ptr17$i$i + 4 >> 2] = $qsize$0$i$i | 1;
     HEAP32[$add$ptr17$i$i + $qsize$0$i$i >> 2] = $qsize$0$i$i;
     $shr214$i$i = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $arrayidx223$i$i = 30424 + ($shr214$i$i << 1 << 2) | 0;
      $162 = HEAP32[7596] | 0;
      $shl226$i$i = 1 << $shr214$i$i;
      do if (!($162 & $shl226$i$i)) {
       HEAP32[7596] = $162 | $shl226$i$i;
       $$pre$phi$i48$iZ2D = $arrayidx223$i$i + 8 | 0;
       $F224$0$i$i = $arrayidx223$i$i;
      } else {
       $163 = $arrayidx223$i$i + 8 | 0;
       $164 = HEAP32[$163 >> 2] | 0;
       if ((HEAP32[7600] | 0) >>> 0 <= $164 >>> 0) {
        $$pre$phi$i48$iZ2D = $163;
        $F224$0$i$i = $164;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i48$iZ2D >> 2] = $add$ptr17$i$i;
      HEAP32[$F224$0$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $F224$0$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $arrayidx223$i$i;
      break;
     }
     $shr253$i$i = $qsize$0$i$i >>> 8;
     do if (!$shr253$i$i) $I252$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I252$0$i$i = 31;
       break;
      }
      $and264$i$i = ($shr253$i$i + 1048320 | 0) >>> 16 & 8;
      $shl265$i$i = $shr253$i$i << $and264$i$i;
      $and268$i$i = ($shl265$i$i + 520192 | 0) >>> 16 & 4;
      $shl270$i$i = $shl265$i$i << $and268$i$i;
      $and273$i$i = ($shl270$i$i + 245760 | 0) >>> 16 & 2;
      $add278$i$i = 14 - ($and268$i$i | $and264$i$i | $and273$i$i) + ($shl270$i$i << $and273$i$i >>> 15) | 0;
      $I252$0$i$i = $qsize$0$i$i >>> ($add278$i$i + 7 | 0) & 1 | $add278$i$i << 1;
     } while (0);
     $arrayidx287$i$i = 30688 + ($I252$0$i$i << 2) | 0;
     HEAP32[$add$ptr17$i$i + 28 >> 2] = $I252$0$i$i;
     $child289$i$i = $add$ptr17$i$i + 16 | 0;
     HEAP32[$child289$i$i + 4 >> 2] = 0;
     HEAP32[$child289$i$i >> 2] = 0;
     $166 = HEAP32[7597] | 0;
     $shl294$i$i = 1 << $I252$0$i$i;
     if (!($166 & $shl294$i$i)) {
      HEAP32[7597] = $166 | $shl294$i$i;
      HEAP32[$arrayidx287$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = $arrayidx287$i$i;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
      break;
     }
     $167 = HEAP32[$arrayidx287$i$i >> 2] | 0;
     L410 : do if ((HEAP32[$167 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) $T$0$lcssa$i50$i = $167; else {
      $K305$010$i$i = $qsize$0$i$i << (($I252$0$i$i | 0) == 31 ? 0 : 25 - ($I252$0$i$i >>> 1) | 0);
      $T$09$i$i = $167;
      while (1) {
       $arrayidx325$i$i = $T$09$i$i + 16 + ($K305$010$i$i >>> 31 << 2) | 0;
       $169 = HEAP32[$arrayidx325$i$i >> 2] | 0;
       if (!$169) break;
       if ((HEAP32[$169 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
        $T$0$lcssa$i50$i = $169;
        break L410;
       } else {
        $K305$010$i$i = $K305$010$i$i << 1;
        $T$09$i$i = $169;
       }
      }
      if ((HEAP32[7600] | 0) >>> 0 > $arrayidx325$i$i >>> 0) _abort(); else {
       HEAP32[$arrayidx325$i$i >> 2] = $add$ptr17$i$i;
       HEAP32[$add$ptr17$i$i + 24 >> 2] = $T$09$i$i;
       HEAP32[$add$ptr17$i$i + 12 >> 2] = $add$ptr17$i$i;
       HEAP32[$add$ptr17$i$i + 8 >> 2] = $add$ptr17$i$i;
       break L317;
      }
     } while (0);
     $fd344$i$i = $T$0$lcssa$i50$i + 8 | 0;
     $172 = HEAP32[$fd344$i$i >> 2] | 0;
     $173 = HEAP32[7600] | 0;
     if ($173 >>> 0 <= $172 >>> 0 & $173 >>> 0 <= $T$0$lcssa$i50$i >>> 0) {
      HEAP32[$172 + 12 >> 2] = $add$ptr17$i$i;
      HEAP32[$fd344$i$i >> 2] = $add$ptr17$i$i;
      HEAP32[$add$ptr17$i$i + 8 >> 2] = $172;
      HEAP32[$add$ptr17$i$i + 12 >> 2] = $T$0$lcssa$i50$i;
      HEAP32[$add$ptr17$i$i + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $retval$0 = $add$ptr4$i28$i + 8 | 0;
    STACKTOP = sp;
    return $retval$0 | 0;
   }
   $sp$0$i$i$i = 30832;
   while (1) {
    $175 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($175 >>> 0 <= $114 >>> 0) {
     $add$ptr$i$i$i = $175 + (HEAP32[$sp$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($add$ptr$i$i$i >>> 0 > $114 >>> 0) break;
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $add$ptr2$i$i = $add$ptr$i$i$i + -47 | 0;
   $178 = $add$ptr2$i$i + 8 | 0;
   $add$ptr7$i$i = $add$ptr2$i$i + (($178 & 7 | 0) == 0 ? 0 : 0 - $178 & 7) | 0;
   $add$ptr81$i$i = $114 + 16 | 0;
   $cond13$i$i = $add$ptr7$i$i >>> 0 < $add$ptr81$i$i >>> 0 ? $114 : $add$ptr7$i$i;
   $add$ptr14$i$i = $cond13$i$i + 8 | 0;
   $sub16$i$i = $tsize$798$i + -40 | 0;
   $179 = $tbase$799$i + 8 | 0;
   $cond$i$i$i = ($179 & 7 | 0) == 0 ? 0 : 0 - $179 & 7;
   $add$ptr4$i$i$i = $tbase$799$i + $cond$i$i$i | 0;
   $sub5$i$i$i = $sub16$i$i - $cond$i$i$i | 0;
   HEAP32[7602] = $add$ptr4$i$i$i;
   HEAP32[7599] = $sub5$i$i$i;
   HEAP32[$add$ptr4$i$i$i + 4 >> 2] = $sub5$i$i$i | 1;
   HEAP32[$tbase$799$i + $sub16$i$i + 4 >> 2] = 40;
   HEAP32[7603] = HEAP32[7718];
   $head$i$i = $cond13$i$i + 4 | 0;
   HEAP32[$head$i$i >> 2] = 27;
   HEAP32[$add$ptr14$i$i >> 2] = HEAP32[7708];
   HEAP32[$add$ptr14$i$i + 4 >> 2] = HEAP32[7709];
   HEAP32[$add$ptr14$i$i + 8 >> 2] = HEAP32[7710];
   HEAP32[$add$ptr14$i$i + 12 >> 2] = HEAP32[7711];
   HEAP32[7708] = $tbase$799$i;
   HEAP32[7709] = $tsize$798$i;
   HEAP32[7711] = 0;
   HEAP32[7710] = $add$ptr14$i$i;
   $181 = $cond13$i$i + 24 | 0;
   do {
    $181$looptemp = $181;
    $181 = $181 + 4 | 0;
    HEAP32[$181 >> 2] = 7;
   } while (($181$looptemp + 8 | 0) >>> 0 < $add$ptr$i$i$i >>> 0);
   if (($cond13$i$i | 0) != ($114 | 0)) {
    $sub$ptr$sub$i$i = $cond13$i$i - $114 | 0;
    HEAP32[$head$i$i >> 2] = HEAP32[$head$i$i >> 2] & -2;
    HEAP32[$114 + 4 >> 2] = $sub$ptr$sub$i$i | 1;
    HEAP32[$cond13$i$i >> 2] = $sub$ptr$sub$i$i;
    $shr$i$i = $sub$ptr$sub$i$i >>> 3;
    if ($sub$ptr$sub$i$i >>> 0 < 256) {
     $arrayidx$i$i = 30424 + ($shr$i$i << 1 << 2) | 0;
     $183 = HEAP32[7596] | 0;
     $shl39$i$i = 1 << $shr$i$i;
     if (!($183 & $shl39$i$i)) {
      HEAP32[7596] = $183 | $shl39$i$i;
      $$pre$phi$i$iZ2D = $arrayidx$i$i + 8 | 0;
      $F$0$i$i = $arrayidx$i$i;
     } else {
      $184 = $arrayidx$i$i + 8 | 0;
      $185 = HEAP32[$184 >> 2] | 0;
      if ((HEAP32[7600] | 0) >>> 0 > $185 >>> 0) _abort(); else {
       $$pre$phi$i$iZ2D = $184;
       $F$0$i$i = $185;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $114;
     HEAP32[$F$0$i$i + 12 >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $F$0$i$i;
     HEAP32[$114 + 12 >> 2] = $arrayidx$i$i;
     break;
    }
    $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
    if (!$shr58$i$i) $I57$0$i$i = 0; else if ($sub$ptr$sub$i$i >>> 0 > 16777215) $I57$0$i$i = 31; else {
     $and69$i$i = ($shr58$i$i + 1048320 | 0) >>> 16 & 8;
     $shl70$i$i = $shr58$i$i << $and69$i$i;
     $and73$i$i = ($shl70$i$i + 520192 | 0) >>> 16 & 4;
     $shl75$i$i = $shl70$i$i << $and73$i$i;
     $and78$i$i = ($shl75$i$i + 245760 | 0) >>> 16 & 2;
     $add83$i$i = 14 - ($and73$i$i | $and69$i$i | $and78$i$i) + ($shl75$i$i << $and78$i$i >>> 15) | 0;
     $I57$0$i$i = $sub$ptr$sub$i$i >>> ($add83$i$i + 7 | 0) & 1 | $add83$i$i << 1;
    }
    $arrayidx91$i$i = 30688 + ($I57$0$i$i << 2) | 0;
    HEAP32[$114 + 28 >> 2] = $I57$0$i$i;
    HEAP32[$114 + 20 >> 2] = 0;
    HEAP32[$add$ptr81$i$i >> 2] = 0;
    $187 = HEAP32[7597] | 0;
    $shl95$i$i = 1 << $I57$0$i$i;
    if (!($187 & $shl95$i$i)) {
     HEAP32[7597] = $187 | $shl95$i$i;
     HEAP32[$arrayidx91$i$i >> 2] = $114;
     HEAP32[$114 + 24 >> 2] = $arrayidx91$i$i;
     HEAP32[$114 + 12 >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $114;
     break;
    }
    $188 = HEAP32[$arrayidx91$i$i >> 2] | 0;
    L451 : do if ((HEAP32[$188 + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) $T$0$lcssa$i$i = $188; else {
     $K105$011$i$i = $sub$ptr$sub$i$i << (($I57$0$i$i | 0) == 31 ? 0 : 25 - ($I57$0$i$i >>> 1) | 0);
     $T$010$i$i = $188;
     while (1) {
      $arrayidx126$i$i = $T$010$i$i + 16 + ($K105$011$i$i >>> 31 << 2) | 0;
      $190 = HEAP32[$arrayidx126$i$i >> 2] | 0;
      if (!$190) break;
      if ((HEAP32[$190 + 4 >> 2] & -8 | 0) == ($sub$ptr$sub$i$i | 0)) {
       $T$0$lcssa$i$i = $190;
       break L451;
      } else {
       $K105$011$i$i = $K105$011$i$i << 1;
       $T$010$i$i = $190;
      }
     }
     if ((HEAP32[7600] | 0) >>> 0 > $arrayidx126$i$i >>> 0) _abort(); else {
      HEAP32[$arrayidx126$i$i >> 2] = $114;
      HEAP32[$114 + 24 >> 2] = $T$010$i$i;
      HEAP32[$114 + 12 >> 2] = $114;
      HEAP32[$114 + 8 >> 2] = $114;
      break L294;
     }
    } while (0);
    $fd148$i$i = $T$0$lcssa$i$i + 8 | 0;
    $193 = HEAP32[$fd148$i$i >> 2] | 0;
    $194 = HEAP32[7600] | 0;
    if ($194 >>> 0 <= $193 >>> 0 & $194 >>> 0 <= $T$0$lcssa$i$i >>> 0) {
     HEAP32[$193 + 12 >> 2] = $114;
     HEAP32[$fd148$i$i >> 2] = $114;
     HEAP32[$114 + 8 >> 2] = $193;
     HEAP32[$114 + 12 >> 2] = $T$0$lcssa$i$i;
     HEAP32[$114 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $196 = HEAP32[7599] | 0;
  if ($196 >>> 0 > $nb$0 >>> 0) {
   $sub260$i = $196 - $nb$0 | 0;
   HEAP32[7599] = $sub260$i;
   $197 = HEAP32[7602] | 0;
   $add$ptr262$i = $197 + $nb$0 | 0;
   HEAP32[7602] = $add$ptr262$i;
   HEAP32[$add$ptr262$i + 4 >> 2] = $sub260$i | 1;
   HEAP32[$197 + 4 >> 2] = $nb$0 | 3;
   $retval$0 = $197 + 8 | 0;
   STACKTOP = sp;
   return $retval$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 48;
 $retval$0 = 0;
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _fmt_fp($f, $y, $w, $p, $fl, $t) {
 $f = $f | 0;
 $y = +$y;
 $w = $w | 0;
 $p = $p | 0;
 $fl = $fl | 0;
 $t = $t | 0;
 var $$pr = 0, $$pr415 = 0, $$pre517 = 0, $0 = 0, $1 = 0, $15 = 0, $18 = 0, $26 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $36 = 0, $40 = 0, $43 = 0, $46 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $62 = 0, $65 = 0, $70 = 0, $75 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0, $a$9 = 0, $add = 0, $add$ptr358 = 0, $add$ptr442 = 0, $add$ptr671 = 0, $add$ptr756 = 0, $add165 = 0, $add275 = 0, $add355 = 0, $add414 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $and62 = 0, $arrayidx = 0, $arrayidx251 = 0, $arrayidx453 = 0, $big = 0, $buf = 0, $carry$0493 = 0, $carry262$0484 = 0, $cmp131 = 0, $cmp299 = 0, $cmp338 = 0, $cmp374 = 0, $cmp403 = 0, $cmp450$lcssa = 0, $cmp614 = 0, $cond100 = 0, $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond629 = 0, $conv116 = 0, $conv216 = 0, $d$0491 = 0, $d$0494 = 0, $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0, $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0, $incdec$ptr246 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr725 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $mul = 0.0, $mul322 = 0, $mul367 = 0, $mul431 = 0, $mul513 = 0, $or = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0, $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select418 = 0.0, $sub = 0.0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub789 = 0, $sub203 = 0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub343 = 0, $sub409 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool135 = 0, $tobool341 = 0, $tobool37 = 0, $tobool56 = 0, $tobool609 = 0, $tobool781 = 0, $y$addr$0 = 0.0, $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560);
 $big = sp + 32 | 0;
 $e2 = sp + 536 | 0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540 | 0;
 HEAP32[$e2 >> 2] = 0;
 $arrayidx = $ebuf0 + 12 | 0;
 $0 = ___DOUBLE_BITS_654($y) | 0;
 $1 = getTempRet0() | 0;
 if (($1 | 0) < 0) {
  $sub = -$y;
  $3 = ___DOUBLE_BITS_654($sub) | 0;
  $8 = getTempRet0() | 0;
  $85 = $3;
  $pl$0 = 1;
  $prefix$0 = 15781;
  $y$addr$0 = $sub;
 } else {
  $8 = $1;
  $85 = $0;
  $pl$0 = ($fl & 2049 | 0) != 0 & 1;
  $prefix$0 = ($fl & 2048 | 0) == 0 ? (($fl & 1 | 0) == 0 ? 15782 : 15787) : 15784;
  $y$addr$0 = $y;
 }
 do if (0 == 0 & ($8 & 2146435072 | 0) == 2146435072) {
  $tobool37 = ($t & 32 | 0) != 0;
  $add = $pl$0 + 3 | 0;
  _pad_651($f, 32, $w, $add, $fl & -65537);
  _out($f, $prefix$0, $pl$0);
  _out($f, $y$addr$0 != $y$addr$0 | 0.0 != 0.0 ? ($tobool37 ? 15808 : 15812) : $tobool37 ? 15800 : 15804, 3);
  _pad_651($f, 32, $w, $add, $fl ^ 8192);
  $add653$sink524 = $add;
 } else {
  $mul = +_frexp($y$addr$0, $e2) * 2.0;
  $tobool56 = $mul != 0.0;
  if ($tobool56) HEAP32[$e2 >> 2] = (HEAP32[$e2 >> 2] | 0) + -1;
  $or = $t | 32;
  if (($or | 0) == 97) {
   $and62 = $t & 32;
   $spec$select = ($and62 | 0) == 0 ? $prefix$0 : $prefix$0 + 9 | 0;
   $add67 = $pl$0 | 2;
   $sub74 = 12 - $p | 0;
   do if ($p >>> 0 > 11 | ($sub74 | 0) == 0) $y$addr$1 = $mul; else {
    $re$1426 = $sub74;
    $round$0425 = 8.0;
    do {
     $re$1426 = $re$1426 + -1 | 0;
     $round$0425 = $round$0425 * 16.0;
    } while (($re$1426 | 0) != 0);
    if ((HEAP8[$spec$select >> 0] | 0) == 45) {
     $y$addr$1 = -($round$0425 + (-$mul - $round$0425));
     break;
    } else {
     $y$addr$1 = $mul + $round$0425 - $round$0425;
     break;
    }
   } while (0);
   $15 = HEAP32[$e2 >> 2] | 0;
   $cond100 = ($15 | 0) < 0 ? 0 - $15 | 0 : $15;
   $18 = _fmt_u($cond100, (($cond100 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   if (($18 | 0) == ($arrayidx | 0)) {
    $incdec$ptr106 = $ebuf0 + 11 | 0;
    HEAP8[$incdec$ptr106 >> 0] = 48;
    $estr$0 = $incdec$ptr106;
   } else $estr$0 = $18;
   HEAP8[$estr$0 + -1 >> 0] = ($15 >> 31 & 2) + 43;
   $incdec$ptr115 = $estr$0 + -2 | 0;
   HEAP8[$incdec$ptr115 >> 0] = $t + 15;
   $cmp131 = ($p | 0) < 1;
   $tobool135 = ($fl & 8 | 0) == 0;
   $s$0 = $buf;
   $y$addr$2 = $y$addr$1;
   while (1) {
    $conv116 = ~~$y$addr$2;
    $incdec$ptr122 = $s$0 + 1 | 0;
    HEAP8[$s$0 >> 0] = $and62 | HEAPU8[7232 + $conv116 >> 0];
    $y$addr$2 = ($y$addr$2 - +($conv116 | 0)) * 16.0;
    if (($incdec$ptr122 - $sub$ptr$rhs$cast$le | 0) == 1) if ($tobool135 & ($cmp131 & $y$addr$2 == 0.0)) $s$1 = $incdec$ptr122; else {
     HEAP8[$incdec$ptr122 >> 0] = 46;
     $s$1 = $s$0 + 2 | 0;
    } else $s$1 = $incdec$ptr122;
    if (!($y$addr$2 != 0.0)) break; else $s$0 = $s$1;
   }
   $$pre517 = $s$1;
   if (!$p) label = 25; else if ((-2 - $sub$ptr$rhs$cast$le + $$pre517 | 0) < ($p | 0)) {
    $sub$ptr$lhs$cast151 = $arrayidx;
    $sub$ptr$rhs$cast152 = $incdec$ptr115;
    $l$0 = $p + 2 + $sub$ptr$lhs$cast151 - $sub$ptr$rhs$cast152 | 0;
    $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;
    $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
   } else label = 25;
   if ((label | 0) == 25) {
    $sub$ptr$lhs$cast160 = $arrayidx;
    $sub$ptr$rhs$cast161 = $incdec$ptr115;
    $l$0 = $sub$ptr$lhs$cast160 - $sub$ptr$rhs$cast$le - $sub$ptr$rhs$cast161 + $$pre517 | 0;
    $sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;
    $sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
   }
   $add165 = $l$0 + $add67 | 0;
   _pad_651($f, 32, $w, $add165, $fl);
   _out($f, $spec$select, $add67);
   _pad_651($f, 48, $w, $add165, $fl ^ 65536);
   $sub$ptr$sub172 = $$pre517 - $sub$ptr$rhs$cast$le | 0;
   _out($f, $buf, $sub$ptr$sub172);
   $sub$ptr$sub175 = $sub$ptr$lhs$cast173$pre$phiZZZZ2D - $sub$ptr$rhs$cast174$pre$phiZZZZ2D | 0;
   _pad_651($f, 48, $l$0 - ($sub$ptr$sub172 + $sub$ptr$sub175) | 0, 0, 0);
   _out($f, $incdec$ptr115, $sub$ptr$sub175);
   _pad_651($f, 32, $w, $add165, $fl ^ 8192);
   $add653$sink524 = $add165;
   break;
  }
  $spec$select395 = ($p | 0) < 0 ? 6 : $p;
  if ($tobool56) {
   $sub203 = (HEAP32[$e2 >> 2] | 0) + -28 | 0;
   HEAP32[$e2 >> 2] = $sub203;
   $$pr = $sub203;
   $y$addr$3 = $mul * 268435456.0;
  } else {
   $$pr = HEAP32[$e2 >> 2] | 0;
   $y$addr$3 = $mul;
  }
  $z$0 = ($$pr | 0) < 0 ? $big : $big + 288 | 0;
  $y$addr$4 = $y$addr$3;
  $z$1 = $z$0;
  do {
   $conv216 = ~~$y$addr$4 >>> 0;
   HEAP32[$z$1 >> 2] = $conv216;
   $z$1 = $z$1 + 4 | 0;
   $y$addr$4 = ($y$addr$4 - +($conv216 >>> 0)) * 1.0e9;
  } while ($y$addr$4 != 0.0);
  $sub$ptr$rhs$cast345 = $z$0;
  if (($$pr | 0) > 0) {
   $26 = $$pr;
   $a$1502 = $z$0;
   $z$2501 = $z$1;
   while (1) {
    $cond233 = ($26 | 0) < 29 ? $26 : 29;
    $d$0491 = $z$2501 + -4 | 0;
    if ($d$0491 >>> 0 < $a$1502 >>> 0) $a$2 = $a$1502; else {
     $carry$0493 = 0;
     $d$0494 = $d$0491;
     do {
      $28 = _bitshift64Shl(HEAP32[$d$0494 >> 2] | 0, 0, $cond233 | 0) | 0;
      $30 = _i64Add($28 | 0, getTempRet0() | 0, $carry$0493 | 0, 0) | 0;
      $31 = getTempRet0() | 0;
      $carry$0493 = ___udivdi3($30 | 0, $31 | 0, 1e9, 0) | 0;
      $34 = ___muldi3($carry$0493 | 0, getTempRet0() | 0, 1e9, 0) | 0;
      $36 = _i64Subtract($30 | 0, $31 | 0, $34 | 0, getTempRet0() | 0) | 0;
      getTempRet0() | 0;
      HEAP32[$d$0494 >> 2] = $36;
      $d$0494 = $d$0494 + -4 | 0;
     } while ($d$0494 >>> 0 >= $a$1502 >>> 0);
     if (!$carry$0493) $a$2 = $a$1502; else {
      $incdec$ptr246 = $a$1502 + -4 | 0;
      HEAP32[$incdec$ptr246 >> 2] = $carry$0493;
      $a$2 = $incdec$ptr246;
     }
    }
    L57 : do if ($z$2501 >>> 0 > $a$2 >>> 0) {
     $z$3497 = $z$2501;
     while (1) {
      $arrayidx251 = $z$3497 + -4 | 0;
      if (HEAP32[$arrayidx251 >> 2] | 0) {
       $z$3$lcssa = $z$3497;
       break L57;
      }
      if ($arrayidx251 >>> 0 > $a$2 >>> 0) $z$3497 = $arrayidx251; else {
       $z$3$lcssa = $arrayidx251;
       break;
      }
     }
    } else $z$3$lcssa = $z$2501; while (0);
    $sub256 = (HEAP32[$e2 >> 2] | 0) - $cond233 | 0;
    HEAP32[$e2 >> 2] = $sub256;
    if (($sub256 | 0) > 0) {
     $26 = $sub256;
     $a$1502 = $a$2;
     $z$2501 = $z$3$lcssa;
    } else {
     $$pr415 = $sub256;
     $a$1$lcssa = $a$2;
     $z$2$lcssa = $z$3$lcssa;
     break;
    }
   }
  } else {
   $$pr415 = $$pr;
   $a$1$lcssa = $z$0;
   $z$2$lcssa = $z$1;
  }
  if (($$pr415 | 0) < 0) {
   $add275 = (($spec$select395 + 25 | 0) / 9 | 0) + 1 | 0;
   $cmp299 = ($or | 0) == 102;
   $40 = $$pr415;
   $a$3488 = $a$1$lcssa;
   $z$4487 = $z$2$lcssa;
   while (1) {
    $sub264 = 0 - $40 | 0;
    $cond271 = ($sub264 | 0) < 9 ? $sub264 : 9;
    if ($a$3488 >>> 0 < $z$4487 >>> 0) {
     $sub281 = (1 << $cond271) + -1 | 0;
     $shr285 = 1e9 >>> $cond271;
     $carry262$0484 = 0;
     $d$1483 = $a$3488;
     do {
      $43 = HEAP32[$d$1483 >> 2] | 0;
      HEAP32[$d$1483 >> 2] = ($43 >>> $cond271) + $carry262$0484;
      $carry262$0484 = Math_imul($43 & $sub281, $shr285) | 0;
      $d$1483 = $d$1483 + 4 | 0;
     } while ($d$1483 >>> 0 < $z$4487 >>> 0);
     $spec$select396 = (HEAP32[$a$3488 >> 2] | 0) == 0 ? $a$3488 + 4 | 0 : $a$3488;
     if (!$carry262$0484) {
      $spec$select396523 = $spec$select396;
      $z$5 = $z$4487;
     } else {
      HEAP32[$z$4487 >> 2] = $carry262$0484;
      $spec$select396523 = $spec$select396;
      $z$5 = $z$4487 + 4 | 0;
     }
    } else {
     $spec$select396523 = (HEAP32[$a$3488 >> 2] | 0) == 0 ? $a$3488 + 4 | 0 : $a$3488;
     $z$5 = $z$4487;
    }
    $cond304 = $cmp299 ? $z$0 : $spec$select396523;
    $spec$select397 = ($z$5 - $cond304 >> 2 | 0) > ($add275 | 0) ? $cond304 + ($add275 << 2) | 0 : $z$5;
    $40 = (HEAP32[$e2 >> 2] | 0) + $cond271 | 0;
    HEAP32[$e2 >> 2] = $40;
    if (($40 | 0) >= 0) {
     $a$3$lcssa = $spec$select396523;
     $z$4$lcssa = $spec$select397;
     break;
    } else {
     $a$3488 = $spec$select396523;
     $z$4487 = $spec$select397;
    }
   }
  } else {
   $a$3$lcssa = $a$1$lcssa;
   $z$4$lcssa = $z$2$lcssa;
  }
  if ($a$3$lcssa >>> 0 < $z$4$lcssa >>> 0) {
   $mul322 = ($sub$ptr$rhs$cast345 - $a$3$lcssa >> 2) * 9 | 0;
   $46 = HEAP32[$a$3$lcssa >> 2] | 0;
   if ($46 >>> 0 < 10) $e$1 = $mul322; else {
    $e$0480 = $mul322;
    $i$0479 = 10;
    while (1) {
     $i$0479 = $i$0479 * 10 | 0;
     $inc = $e$0480 + 1 | 0;
     if ($46 >>> 0 < $i$0479 >>> 0) {
      $e$1 = $inc;
      break;
     } else $e$0480 = $inc;
    }
   }
  } else $e$1 = 0;
  $cmp338 = ($or | 0) == 103;
  $tobool341 = ($spec$select395 | 0) != 0;
  $sub343 = $spec$select395 - (($or | 0) == 102 ? 0 : $e$1) + (($tobool341 & $cmp338) << 31 >> 31) | 0;
  if (($sub343 | 0) < ((($z$4$lcssa - $sub$ptr$rhs$cast345 >> 2) * 9 | 0) + -9 | 0)) {
   $add355 = $sub343 + 9216 | 0;
   $div356 = ($add355 | 0) / 9 | 0;
   $add$ptr358 = $z$0 + 4 + ($div356 + -1024 << 2) | 0;
   $50 = $add355 - ($div356 * 9 | 0) | 0;
   if (($50 | 0) < 8) {
    $i$1475 = 10;
    $j$0$in476 = $50;
    while (1) {
     $mul367 = $i$1475 * 10 | 0;
     if (($j$0$in476 | 0) < 7) {
      $i$1475 = $mul367;
      $j$0$in476 = $j$0$in476 + 1 | 0;
     } else {
      $i$1$lcssa = $mul367;
      break;
     }
    }
   } else $i$1$lcssa = 10;
   $51 = HEAP32[$add$ptr358 >> 2] | 0;
   $div378 = ($51 >>> 0) / ($i$1$lcssa >>> 0) | 0;
   $53 = $51 - (Math_imul($div378, $i$1$lcssa) | 0) | 0;
   $cmp374 = ($add$ptr358 + 4 | 0) == ($z$4$lcssa | 0);
   if ($cmp374 & ($53 | 0) == 0) {
    $a$8 = $a$3$lcssa;
    $d$4 = $add$ptr358;
    $e$4 = $e$1;
   } else {
    $spec$select399 = ($div378 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $div384 = $i$1$lcssa >>> 1;
    $spec$select418 = $53 >>> 0 < $div384 >>> 0 ? .5 : $cmp374 & ($53 | 0) == ($div384 | 0) ? 1.0 : 1.5;
    if (!$pl$0) {
     $round377$1 = $spec$select399;
     $small$1 = $spec$select418;
    } else {
     $cmp403 = (HEAP8[$prefix$0 >> 0] | 0) == 45;
     $round377$1 = $cmp403 ? -$spec$select399 : $spec$select399;
     $small$1 = $cmp403 ? -$spec$select418 : $spec$select418;
    }
    $sub409 = $51 - $53 | 0;
    HEAP32[$add$ptr358 >> 2] = $sub409;
    if ($round377$1 + $small$1 != $round377$1) {
     $add414 = $sub409 + $i$1$lcssa | 0;
     HEAP32[$add$ptr358 >> 2] = $add414;
     if ($add414 >>> 0 > 999999999) {
      $a$5471 = $a$3$lcssa;
      $d$2470 = $add$ptr358;
      while (1) {
       $incdec$ptr419 = $d$2470 + -4 | 0;
       HEAP32[$d$2470 >> 2] = 0;
       if ($incdec$ptr419 >>> 0 < $a$5471 >>> 0) {
        $incdec$ptr423 = $a$5471 + -4 | 0;
        HEAP32[$incdec$ptr423 >> 2] = 0;
        $a$6 = $incdec$ptr423;
       } else $a$6 = $a$5471;
       $inc425 = (HEAP32[$incdec$ptr419 >> 2] | 0) + 1 | 0;
       HEAP32[$incdec$ptr419 >> 2] = $inc425;
       if ($inc425 >>> 0 > 999999999) {
        $a$5471 = $a$6;
        $d$2470 = $incdec$ptr419;
       } else {
        $a$5$lcssa = $a$6;
        $d$2$lcssa = $incdec$ptr419;
        break;
       }
      }
     } else {
      $a$5$lcssa = $a$3$lcssa;
      $d$2$lcssa = $add$ptr358;
     }
     $mul431 = ($sub$ptr$rhs$cast345 - $a$5$lcssa >> 2) * 9 | 0;
     $56 = HEAP32[$a$5$lcssa >> 2] | 0;
     if ($56 >>> 0 < 10) {
      $a$8 = $a$5$lcssa;
      $d$4 = $d$2$lcssa;
      $e$4 = $mul431;
     } else {
      $e$2467 = $mul431;
      $i$2466 = 10;
      while (1) {
       $i$2466 = $i$2466 * 10 | 0;
       $inc438 = $e$2467 + 1 | 0;
       if ($56 >>> 0 < $i$2466 >>> 0) {
        $a$8 = $a$5$lcssa;
        $d$4 = $d$2$lcssa;
        $e$4 = $inc438;
        break;
       } else $e$2467 = $inc438;
      }
     }
    } else {
     $a$8 = $a$3$lcssa;
     $d$4 = $add$ptr358;
     $e$4 = $e$1;
    }
   }
   $add$ptr442 = $d$4 + 4 | 0;
   $a$9 = $a$8;
   $e$5 = $e$4;
   $z$8 = $z$4$lcssa >>> 0 > $add$ptr442 >>> 0 ? $add$ptr442 : $z$4$lcssa;
  } else {
   $a$9 = $a$3$lcssa;
   $e$5 = $e$1;
   $z$8 = $z$4$lcssa;
  }
  $sub626 = 0 - $e$5 | 0;
  L109 : do if ($z$8 >>> 0 > $a$9 >>> 0) {
   $z$9459 = $z$8;
   while (1) {
    $arrayidx453 = $z$9459 + -4 | 0;
    if (HEAP32[$arrayidx453 >> 2] | 0) {
     $cmp450$lcssa = 1;
     $z$9$lcssa = $z$9459;
     break L109;
    }
    if ($arrayidx453 >>> 0 > $a$9 >>> 0) $z$9459 = $arrayidx453; else {
     $cmp450$lcssa = 0;
     $z$9$lcssa = $arrayidx453;
     break;
    }
   }
  } else {
   $cmp450$lcssa = 0;
   $z$9$lcssa = $z$8;
  } while (0);
  do if ($cmp338) {
   $spec$select402 = $spec$select395 + (($tobool341 ^ 1) & 1) | 0;
   if (($spec$select402 | 0) > ($e$5 | 0) & ($e$5 | 0) > -5) {
    $p$addr$2 = $spec$select402 + -1 - $e$5 | 0;
    $t$addr$0 = $t + -1 | 0;
   } else {
    $p$addr$2 = $spec$select402 + -1 | 0;
    $t$addr$0 = $t + -2 | 0;
   }
   if (!($fl & 8)) {
    if ($cmp450$lcssa) {
     $58 = HEAP32[$z$9$lcssa + -4 >> 2] | 0;
     if (!$58) $j$2 = 9; else if (!(($58 >>> 0) % 10 | 0)) {
      $i$3455 = 10;
      $j$1456 = 0;
      while (1) {
       $i$3455 = $i$3455 * 10 | 0;
       $inc500 = $j$1456 + 1 | 0;
       if (($58 >>> 0) % ($i$3455 >>> 0) | 0 | 0) {
        $j$2 = $inc500;
        break;
       } else $j$1456 = $inc500;
      }
     } else $j$2 = 0;
    } else $j$2 = 9;
    $mul513 = (($z$9$lcssa - $sub$ptr$rhs$cast345 >> 2) * 9 | 0) + -9 | 0;
    if (($t$addr$0 | 32 | 0) == 102) {
     $sub514 = $mul513 - $j$2 | 0;
     $spec$select403 = ($sub514 | 0) > 0 ? $sub514 : 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($spec$select403 | 0) ? $p$addr$2 : $spec$select403;
     $t$addr$1 = $t$addr$0;
     break;
    } else {
     $sub562 = $mul513 + $e$5 - $j$2 | 0;
     $spec$select405 = ($sub562 | 0) > 0 ? $sub562 : 0;
     $p$addr$3 = ($p$addr$2 | 0) < ($spec$select405 | 0) ? $p$addr$2 : $spec$select405;
     $t$addr$1 = $t$addr$0;
     break;
    }
   } else {
    $p$addr$3 = $p$addr$2;
    $t$addr$1 = $t$addr$0;
   }
  } else {
   $p$addr$3 = $spec$select395;
   $t$addr$1 = $t;
  } while (0);
  $tobool609 = ($p$addr$3 | 0) != 0;
  $62 = $tobool609 ? 1 : $fl >>> 3 & 1;
  $cmp614 = ($t$addr$1 | 32 | 0) == 102;
  if ($cmp614) {
   $estr$2 = 0;
   $sub$ptr$sub650$pn = ($e$5 | 0) > 0 ? $e$5 : 0;
  } else {
   $cond629 = ($e$5 | 0) < 0 ? $sub626 : $e$5;
   $65 = _fmt_u($cond629, (($cond629 | 0) < 0) << 31 >> 31, $arrayidx) | 0;
   $sub$ptr$lhs$cast633 = $arrayidx;
   if (($sub$ptr$lhs$cast633 - $65 | 0) < 2) {
    $estr$1450 = $65;
    while (1) {
     $incdec$ptr639 = $estr$1450 + -1 | 0;
     HEAP8[$incdec$ptr639 >> 0] = 48;
     if (($sub$ptr$lhs$cast633 - $incdec$ptr639 | 0) < 2) $estr$1450 = $incdec$ptr639; else {
      $estr$1$lcssa = $incdec$ptr639;
      break;
     }
    }
   } else $estr$1$lcssa = $65;
   HEAP8[$estr$1$lcssa + -1 >> 0] = ($e$5 >> 31 & 2) + 43;
   $incdec$ptr647 = $estr$1$lcssa + -2 | 0;
   HEAP8[$incdec$ptr647 >> 0] = $t$addr$1;
   $estr$2 = $incdec$ptr647;
   $sub$ptr$sub650$pn = $sub$ptr$lhs$cast633 - $incdec$ptr647 | 0;
  }
  $add653 = $pl$0 + 1 + $p$addr$3 + $62 + $sub$ptr$sub650$pn | 0;
  _pad_651($f, 32, $w, $add653, $fl);
  _out($f, $prefix$0, $pl$0);
  _pad_651($f, 48, $w, $add653, $fl ^ 65536);
  if ($cmp614) {
   $spec$select408 = $a$9 >>> 0 > $z$0 >>> 0 ? $z$0 : $a$9;
   $add$ptr671 = $buf + 9 | 0;
   $sub$ptr$lhs$cast694 = $add$ptr671;
   $incdec$ptr689 = $buf + 8 | 0;
   $d$5438 = $spec$select408;
   do {
    $70 = _fmt_u(HEAP32[$d$5438 >> 2] | 0, 0, $add$ptr671) | 0;
    if (($d$5438 | 0) == ($spec$select408 | 0)) if (($70 | 0) == ($add$ptr671 | 0)) {
     HEAP8[$incdec$ptr689 >> 0] = 48;
     $s668$1 = $incdec$ptr689;
    } else $s668$1 = $70; else if ($70 >>> 0 > $buf >>> 0) {
     _memset($buf | 0, 48, $70 - $sub$ptr$rhs$cast$le | 0) | 0;
     $s668$0436 = $70;
     while (1) {
      $incdec$ptr681 = $s668$0436 + -1 | 0;
      if ($incdec$ptr681 >>> 0 > $buf >>> 0) $s668$0436 = $incdec$ptr681; else {
       $s668$1 = $incdec$ptr681;
       break;
      }
     }
    } else $s668$1 = $70;
    _out($f, $s668$1, $sub$ptr$lhs$cast694 - $s668$1 | 0);
    $d$5438 = $d$5438 + 4 | 0;
   } while ($d$5438 >>> 0 <= $z$0 >>> 0);
   if (!(($fl & 8 | 0) == 0 & ($tobool609 ^ 1))) _out($f, 15816, 1);
   if ($d$5438 >>> 0 < $z$9$lcssa >>> 0 & ($p$addr$3 | 0) > 0) {
    $d$6432 = $d$5438;
    $p$addr$4433 = $p$addr$3;
    while (1) {
     $75 = _fmt_u(HEAP32[$d$6432 >> 2] | 0, 0, $add$ptr671) | 0;
     if ($75 >>> 0 > $buf >>> 0) {
      _memset($buf | 0, 48, $75 - $sub$ptr$rhs$cast$le | 0) | 0;
      $s715$0428 = $75;
      while (1) {
       $incdec$ptr725 = $s715$0428 + -1 | 0;
       if ($incdec$ptr725 >>> 0 > $buf >>> 0) $s715$0428 = $incdec$ptr725; else {
        $s715$0$lcssa = $incdec$ptr725;
        break;
       }
      }
     } else $s715$0$lcssa = $75;
     _out($f, $s715$0$lcssa, ($p$addr$4433 | 0) < 9 ? $p$addr$4433 : 9);
     $d$6432 = $d$6432 + 4 | 0;
     $sub735 = $p$addr$4433 + -9 | 0;
     if (!($d$6432 >>> 0 < $z$9$lcssa >>> 0 & ($p$addr$4433 | 0) > 9)) {
      $p$addr$4$lcssa = $sub735;
      break;
     } else $p$addr$4433 = $sub735;
    }
   } else $p$addr$4$lcssa = $p$addr$3;
   _pad_651($f, 48, $p$addr$4$lcssa + 9 | 0, 9, 0);
  } else {
   $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $a$9 + 4 | 0;
   if ($a$9 >>> 0 < $spec$select410 >>> 0 & ($p$addr$3 | 0) > -1) {
    $add$ptr756 = $buf + 9 | 0;
    $tobool781 = ($fl & 8 | 0) == 0;
    $sub$ptr$lhs$cast787 = $add$ptr756;
    $81 = 0 - $sub$ptr$rhs$cast$le | 0;
    $incdec$ptr763 = $buf + 8 | 0;
    $d$7444 = $a$9;
    $p$addr$5445 = $p$addr$3;
    while (1) {
     $83 = _fmt_u(HEAP32[$d$7444 >> 2] | 0, 0, $add$ptr756) | 0;
     if (($83 | 0) == ($add$ptr756 | 0)) {
      HEAP8[$incdec$ptr763 >> 0] = 48;
      $s753$0 = $incdec$ptr763;
     } else $s753$0 = $83;
     do if (($d$7444 | 0) == ($a$9 | 0)) {
      $incdec$ptr776 = $s753$0 + 1 | 0;
      _out($f, $s753$0, 1);
      if ($tobool781 & ($p$addr$5445 | 0) < 1) {
       $s753$2 = $incdec$ptr776;
       break;
      }
      _out($f, 15816, 1);
      $s753$2 = $incdec$ptr776;
     } else {
      if ($s753$0 >>> 0 <= $buf >>> 0) {
       $s753$2 = $s753$0;
       break;
      }
      _memset($buf | 0, 48, $s753$0 + $81 | 0) | 0;
      $s753$1440 = $s753$0;
      while (1) {
       $incdec$ptr773 = $s753$1440 + -1 | 0;
       if ($incdec$ptr773 >>> 0 > $buf >>> 0) $s753$1440 = $incdec$ptr773; else {
        $s753$2 = $incdec$ptr773;
        break;
       }
      }
     } while (0);
     $sub$ptr$sub789 = $sub$ptr$lhs$cast787 - $s753$2 | 0;
     _out($f, $s753$2, ($p$addr$5445 | 0) > ($sub$ptr$sub789 | 0) ? $sub$ptr$sub789 : $p$addr$5445);
     $sub806 = $p$addr$5445 - $sub$ptr$sub789 | 0;
     $d$7444 = $d$7444 + 4 | 0;
     if (!($d$7444 >>> 0 < $spec$select410 >>> 0 & ($sub806 | 0) > -1)) {
      $p$addr$5$lcssa = $sub806;
      break;
     } else $p$addr$5445 = $sub806;
    }
   } else $p$addr$5$lcssa = $p$addr$3;
   _pad_651($f, 48, $p$addr$5$lcssa + 18 | 0, 18, 0);
   _out($f, $estr$2, $arrayidx - $estr$2 | 0);
  }
  _pad_651($f, 32, $w, $add653, $fl ^ 8192);
  $add653$sink524 = $add653;
 } while (0);
 STACKTOP = sp;
 return (($add653$sink524 | 0) < ($w | 0) ? $w : $add653$sink524) | 0;
}

function _stbir__resample_vertical_upsample($stbir_info, $n) {
 $stbir_info = $stbir_info | 0;
 $n = $n | 0;
 var $101 = f0, $111 = 0, $127 = f0, $134 = f0, $141 = f0, $151 = 0, $167 = f0, $174 = f0, $181 = f0, $188 = f0, $198 = 0, $218 = f0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $52 = 0, $68 = f0, $78 = 0, $94 = f0, $add$ptr = 0, $alpha_channel = 0, $arrayidx103 = 0, $arrayidx131 = 0, $arrayidx137 = 0, $arrayidx143 = 0, $arrayidx149 = 0, $arrayidx179 = 0, $arrayidx31 = 0, $arrayidx57 = 0, $arrayidx63 = 0, $arrayidx91 = 0, $arrayidx97 = 0, $c = 0, $channels = 0, $coefficient = 0, $coefficient119 = 0, $coefficient164 = 0, $coefficient45 = 0, $coefficient79 = 0, $coefficient_counter = 0, $coefficient_group = 0, $coefficient_index = 0, $coefficient_index115 = 0, $coefficient_index160 = 0, $coefficient_index41 = 0, $coefficient_index75 = 0, $coefficient_width = 0, $colorspace = 0, $contributor = 0, $decode = 0, $encode_buffer = 0, $in_pixel_index = 0, $in_pixel_index125 = 0, $in_pixel_index170 = 0, $in_pixel_index51 = 0, $in_pixel_index85 = 0, $k = 0, $mul101 = f0, $mul129 = f0, $mul135 = f0, $mul141 = f0, $mul147 = f0, $mul177 = f0, $mul29 = f0, $mul55 = f0, $mul61 = f0, $mul89 = f0, $mul95 = f0, $n$addr = 0, $n0 = 0, $n1 = 0, $output_data = 0, $output_row_start = 0, $output_w = 0, $ring_buffer = 0, $ring_buffer_begin_index = 0, $ring_buffer_entries = 0, $ring_buffer_entry = 0, $ring_buffer_entry117 = 0, $ring_buffer_entry162 = 0, $ring_buffer_entry43 = 0, $ring_buffer_entry77 = 0, $ring_buffer_first_scanline = 0, $ring_buffer_length = 0, $stbir_info$addr = 0, $type = 0, $vertical_coefficients = 0, $vertical_contributors = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 $stbir_info$addr = sp + 184 | 0;
 $n$addr = sp + 180 | 0;
 $x = sp + 176 | 0;
 $k = sp + 172 | 0;
 $output_w = sp + 168 | 0;
 $vertical_contributors = sp + 164 | 0;
 $vertical_coefficients = sp + 160 | 0;
 $channels = sp + 156 | 0;
 $alpha_channel = sp + 152 | 0;
 $type = sp + 148 | 0;
 $colorspace = sp + 144 | 0;
 $ring_buffer_entries = sp + 140 | 0;
 $output_data = sp + 136 | 0;
 $encode_buffer = sp + 132 | 0;
 $decode = sp + 128 | 0;
 $coefficient_width = sp + 124 | 0;
 $coefficient_counter = sp + 120 | 0;
 $contributor = sp + 116 | 0;
 $ring_buffer = sp + 112 | 0;
 $ring_buffer_begin_index = sp + 108 | 0;
 $ring_buffer_first_scanline = sp + 104 | 0;
 $ring_buffer_length = sp + 100 | 0;
 $n0 = sp + 96 | 0;
 $n1 = sp + 92 | 0;
 $output_row_start = sp + 88 | 0;
 $coefficient_group = sp + 84 | 0;
 $coefficient_index = sp + 80 | 0;
 $ring_buffer_entry = sp + 76 | 0;
 $coefficient = sp + 72 | 0;
 $in_pixel_index = sp + 68 | 0;
 $coefficient_index41 = sp + 64 | 0;
 $ring_buffer_entry43 = sp + 60 | 0;
 $coefficient45 = sp + 56 | 0;
 $in_pixel_index51 = sp + 52 | 0;
 $coefficient_index75 = sp + 48 | 0;
 $ring_buffer_entry77 = sp + 44 | 0;
 $coefficient79 = sp + 40 | 0;
 $in_pixel_index85 = sp + 36 | 0;
 $coefficient_index115 = sp + 32 | 0;
 $ring_buffer_entry117 = sp + 28 | 0;
 $coefficient119 = sp + 24 | 0;
 $in_pixel_index125 = sp + 20 | 0;
 $coefficient_index160 = sp + 16 | 0;
 $ring_buffer_entry162 = sp + 12 | 0;
 $coefficient164 = sp + 8 | 0;
 $in_pixel_index170 = sp + 4 | 0;
 $c = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$output_w >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 20 >> 2];
 HEAP32[$vertical_contributors >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 108 >> 2];
 HEAP32[$vertical_coefficients >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 112 >> 2];
 HEAP32[$channels >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 64 >> 2];
 HEAP32[$alpha_channel >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 68 >> 2];
 HEAP32[$type >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 76 >> 2];
 HEAP32[$colorspace >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 96 >> 2];
 HEAP32[$ring_buffer_entries >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 164 >> 2];
 HEAP32[$output_data >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 16 >> 2];
 HEAP32[$encode_buffer >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 184 >> 2];
 HEAP32[$decode >> 2] = (HEAP32[$type >> 2] << 1) + (HEAP32[$colorspace >> 2] | 0);
 HEAP32[$coefficient_width >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 132 >> 2];
 HEAP32[$contributor >> 2] = HEAP32[$n$addr >> 2];
 HEAP32[$ring_buffer >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 180 >> 2];
 HEAP32[$ring_buffer_begin_index >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2];
 HEAP32[$ring_buffer_first_scanline >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2];
 HEAP32[$ring_buffer_length >> 2] = ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 160 >> 2] | 0) >>> 0) / 4 | 0;
 HEAP32[$coefficient_group >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$contributor >> 2] | 0) | 0;
 HEAP32[$n0 >> 2] = HEAP32[(HEAP32[$vertical_contributors >> 2] | 0) + (HEAP32[$contributor >> 2] << 3) >> 2];
 HEAP32[$n1 >> 2] = HEAP32[(HEAP32[$vertical_contributors >> 2] | 0) + (HEAP32[$contributor >> 2] << 3) + 4 >> 2];
 HEAP32[$output_row_start >> 2] = Math_imul(HEAP32[$n$addr >> 2] | 0, HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 28 >> 2] | 0) | 0;
 if (!(_stbir__use_height_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0)) ___assert_fail(13907, 12378, 1897, 14056);
 _memset(HEAP32[$encode_buffer >> 2] | 0, 0, Math_imul(HEAP32[$output_w >> 2] << 2, HEAP32[$channels >> 2] | 0) | 0) | 0;
 HEAP32[$coefficient_counter >> 2] = 0;
 switch (HEAP32[$channels >> 2] | 0) {
 case 1:
  {
   HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
   while (1) {
    if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break;
    $52 = HEAP32[$coefficient_counter >> 2] | 0;
    HEAP32[$coefficient_counter >> 2] = $52 + 1;
    HEAP32[$coefficient_index >> 2] = $52;
    HEAP32[$ring_buffer_entry >> 2] = _stbir__get_ring_buffer_scanline(HEAP32[$k >> 2] | 0, HEAP32[$ring_buffer >> 2] | 0, HEAP32[$ring_buffer_begin_index >> 2] | 0, HEAP32[$ring_buffer_first_scanline >> 2] | 0, HEAP32[$ring_buffer_entries >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
    HEAPF32[$coefficient >> 2] = Math_fround(HEAPF32[(HEAP32[$vertical_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$coefficient_index >> 2] | 0) << 2) >> 2]);
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break;
     HEAP32[$in_pixel_index >> 2] = HEAP32[$x >> 2];
     $68 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index >> 2] | 0) + 0 << 2) >> 2]);
     $mul29 = Math_fround($68 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx31 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx31 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx31 >> 2]) + $mul29);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   $227 = HEAP32[$stbir_info$addr >> 2] | 0;
   $228 = HEAP32[$output_w >> 2] | 0;
   $229 = HEAP32[$output_data >> 2] | 0;
   $230 = HEAP32[$output_row_start >> 2] | 0;
   $add$ptr = $229 + $230 | 0;
   $231 = HEAP32[$encode_buffer >> 2] | 0;
   $232 = HEAP32[$channels >> 2] | 0;
   $233 = HEAP32[$alpha_channel >> 2] | 0;
   $234 = HEAP32[$decode >> 2] | 0;
   _stbir__encode_scanline($227, $228, $add$ptr, $231, $232, $233, $234);
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
   while (1) {
    if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break;
    $78 = HEAP32[$coefficient_counter >> 2] | 0;
    HEAP32[$coefficient_counter >> 2] = $78 + 1;
    HEAP32[$coefficient_index41 >> 2] = $78;
    HEAP32[$ring_buffer_entry43 >> 2] = _stbir__get_ring_buffer_scanline(HEAP32[$k >> 2] | 0, HEAP32[$ring_buffer >> 2] | 0, HEAP32[$ring_buffer_begin_index >> 2] | 0, HEAP32[$ring_buffer_first_scanline >> 2] | 0, HEAP32[$ring_buffer_entries >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
    HEAPF32[$coefficient45 >> 2] = Math_fround(HEAPF32[(HEAP32[$vertical_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$coefficient_index41 >> 2] | 0) << 2) >> 2]);
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break;
     HEAP32[$in_pixel_index51 >> 2] = HEAP32[$x >> 2] << 1;
     $94 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry43 >> 2] | 0) + ((HEAP32[$in_pixel_index51 >> 2] | 0) + 0 << 2) >> 2]);
     $mul55 = Math_fround($94 * Math_fround(HEAPF32[$coefficient45 >> 2]));
     $arrayidx57 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index51 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx57 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx57 >> 2]) + $mul55);
     $101 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry43 >> 2] | 0) + ((HEAP32[$in_pixel_index51 >> 2] | 0) + 1 << 2) >> 2]);
     $mul61 = Math_fround($101 * Math_fround(HEAPF32[$coefficient45 >> 2]));
     $arrayidx63 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index51 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx63 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx63 >> 2]) + $mul61);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   $227 = HEAP32[$stbir_info$addr >> 2] | 0;
   $228 = HEAP32[$output_w >> 2] | 0;
   $229 = HEAP32[$output_data >> 2] | 0;
   $230 = HEAP32[$output_row_start >> 2] | 0;
   $add$ptr = $229 + $230 | 0;
   $231 = HEAP32[$encode_buffer >> 2] | 0;
   $232 = HEAP32[$channels >> 2] | 0;
   $233 = HEAP32[$alpha_channel >> 2] | 0;
   $234 = HEAP32[$decode >> 2] | 0;
   _stbir__encode_scanline($227, $228, $add$ptr, $231, $232, $233, $234);
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
   while (1) {
    if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break;
    $111 = HEAP32[$coefficient_counter >> 2] | 0;
    HEAP32[$coefficient_counter >> 2] = $111 + 1;
    HEAP32[$coefficient_index75 >> 2] = $111;
    HEAP32[$ring_buffer_entry77 >> 2] = _stbir__get_ring_buffer_scanline(HEAP32[$k >> 2] | 0, HEAP32[$ring_buffer >> 2] | 0, HEAP32[$ring_buffer_begin_index >> 2] | 0, HEAP32[$ring_buffer_first_scanline >> 2] | 0, HEAP32[$ring_buffer_entries >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
    HEAPF32[$coefficient79 >> 2] = Math_fround(HEAPF32[(HEAP32[$vertical_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$coefficient_index75 >> 2] | 0) << 2) >> 2]);
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break;
     HEAP32[$in_pixel_index85 >> 2] = (HEAP32[$x >> 2] | 0) * 3;
     $127 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry77 >> 2] | 0) + ((HEAP32[$in_pixel_index85 >> 2] | 0) + 0 << 2) >> 2]);
     $mul89 = Math_fround($127 * Math_fround(HEAPF32[$coefficient79 >> 2]));
     $arrayidx91 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index85 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx91 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx91 >> 2]) + $mul89);
     $134 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry77 >> 2] | 0) + ((HEAP32[$in_pixel_index85 >> 2] | 0) + 1 << 2) >> 2]);
     $mul95 = Math_fround($134 * Math_fround(HEAPF32[$coefficient79 >> 2]));
     $arrayidx97 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index85 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx97 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx97 >> 2]) + $mul95);
     $141 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry77 >> 2] | 0) + ((HEAP32[$in_pixel_index85 >> 2] | 0) + 2 << 2) >> 2]);
     $mul101 = Math_fround($141 * Math_fround(HEAPF32[$coefficient79 >> 2]));
     $arrayidx103 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index85 >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx103 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx103 >> 2]) + $mul101);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   $227 = HEAP32[$stbir_info$addr >> 2] | 0;
   $228 = HEAP32[$output_w >> 2] | 0;
   $229 = HEAP32[$output_data >> 2] | 0;
   $230 = HEAP32[$output_row_start >> 2] | 0;
   $add$ptr = $229 + $230 | 0;
   $231 = HEAP32[$encode_buffer >> 2] | 0;
   $232 = HEAP32[$channels >> 2] | 0;
   $233 = HEAP32[$alpha_channel >> 2] | 0;
   $234 = HEAP32[$decode >> 2] | 0;
   _stbir__encode_scanline($227, $228, $add$ptr, $231, $232, $233, $234);
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
   while (1) {
    if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break;
    $151 = HEAP32[$coefficient_counter >> 2] | 0;
    HEAP32[$coefficient_counter >> 2] = $151 + 1;
    HEAP32[$coefficient_index115 >> 2] = $151;
    HEAP32[$ring_buffer_entry117 >> 2] = _stbir__get_ring_buffer_scanline(HEAP32[$k >> 2] | 0, HEAP32[$ring_buffer >> 2] | 0, HEAP32[$ring_buffer_begin_index >> 2] | 0, HEAP32[$ring_buffer_first_scanline >> 2] | 0, HEAP32[$ring_buffer_entries >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
    HEAPF32[$coefficient119 >> 2] = Math_fround(HEAPF32[(HEAP32[$vertical_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$coefficient_index115 >> 2] | 0) << 2) >> 2]);
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break;
     HEAP32[$in_pixel_index125 >> 2] = HEAP32[$x >> 2] << 2;
     $167 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry117 >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 0 << 2) >> 2]);
     $mul129 = Math_fround($167 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx131 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx131 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx131 >> 2]) + $mul129);
     $174 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry117 >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 1 << 2) >> 2]);
     $mul135 = Math_fround($174 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx137 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx137 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx137 >> 2]) + $mul135);
     $181 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry117 >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 2 << 2) >> 2]);
     $mul141 = Math_fround($181 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx143 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx143 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx143 >> 2]) + $mul141);
     $188 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry117 >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 3 << 2) >> 2]);
     $mul147 = Math_fround($188 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx149 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index125 >> 2] | 0) + 3 << 2) | 0;
     HEAPF32[$arrayidx149 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx149 >> 2]) + $mul147);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   $227 = HEAP32[$stbir_info$addr >> 2] | 0;
   $228 = HEAP32[$output_w >> 2] | 0;
   $229 = HEAP32[$output_data >> 2] | 0;
   $230 = HEAP32[$output_row_start >> 2] | 0;
   $add$ptr = $229 + $230 | 0;
   $231 = HEAP32[$encode_buffer >> 2] | 0;
   $232 = HEAP32[$channels >> 2] | 0;
   $233 = HEAP32[$alpha_channel >> 2] | 0;
   $234 = HEAP32[$decode >> 2] | 0;
   _stbir__encode_scanline($227, $228, $add$ptr, $231, $232, $233, $234);
   STACKTOP = sp;
   return;
  }
 default:
  {
   HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
   while (1) {
    if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break;
    $198 = HEAP32[$coefficient_counter >> 2] | 0;
    HEAP32[$coefficient_counter >> 2] = $198 + 1;
    HEAP32[$coefficient_index160 >> 2] = $198;
    HEAP32[$ring_buffer_entry162 >> 2] = _stbir__get_ring_buffer_scanline(HEAP32[$k >> 2] | 0, HEAP32[$ring_buffer >> 2] | 0, HEAP32[$ring_buffer_begin_index >> 2] | 0, HEAP32[$ring_buffer_first_scanline >> 2] | 0, HEAP32[$ring_buffer_entries >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
    HEAPF32[$coefficient164 >> 2] = Math_fround(HEAPF32[(HEAP32[$vertical_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$coefficient_index160 >> 2] | 0) << 2) >> 2]);
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break;
     HEAP32[$in_pixel_index170 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
     HEAP32[$c >> 2] = 0;
     while (1) {
      if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
      $218 = Math_fround(HEAPF32[(HEAP32[$ring_buffer_entry162 >> 2] | 0) + ((HEAP32[$in_pixel_index170 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2]);
      $mul177 = Math_fround($218 * Math_fround(HEAPF32[$coefficient164 >> 2]));
      $arrayidx179 = (HEAP32[$encode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index170 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) | 0;
      HEAPF32[$arrayidx179 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx179 >> 2]) + $mul177);
      HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
     }
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   $227 = HEAP32[$stbir_info$addr >> 2] | 0;
   $228 = HEAP32[$output_w >> 2] | 0;
   $229 = HEAP32[$output_data >> 2] | 0;
   $230 = HEAP32[$output_row_start >> 2] | 0;
   $add$ptr = $229 + $230 | 0;
   $231 = HEAP32[$encode_buffer >> 2] | 0;
   $232 = HEAP32[$channels >> 2] | 0;
   $233 = HEAP32[$alpha_channel >> 2] | 0;
   $234 = HEAP32[$decode >> 2] | 0;
   _stbir__encode_scanline($227, $228, $add$ptr, $231, $232, $233, $234);
   STACKTOP = sp;
   return;
  }
 }
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 $fmt_fp = $fmt_fp | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $$lcssa213 = 0, $$pre261 = 0, $$pre263 = 0, $$sink = 0, $0 = 0, $1 = 0, $102 = 0, $103 = 0, $11 = 0, $112 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $146 = 0, $154 = 0, $162 = 0, $164 = 0, $166 = 0, $2 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $4 = 0, $42 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $69 = 0, $71 = 0, $82 = 0, $92 = 0, $96 = 0, $a$0 = 0, $a$1 = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr341 = 0, $add323 = 0, $add390 = 0, $add436 = 0, $and220 = 0, $arg = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx129 = 0, $arrayidx365 = 0, $arrayidx78 = 0, $buf = 0, $call104 = 0, $call160 = 0, $call351 = 0, $call379 = 0, $call406 = 0, $cmp185 = 0, $cmp380 = 0, $cmp97 = 0, $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond350 = 0, $conv175 = 0, $conv208 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr23 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $l$0 = 0, $l$0$ph = 0, $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond190 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $spec$select = 0, $spec$select195 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub428 = 0, $sub49230 = 0, $sub49238 = 0, $t$0 = 0, $t$1 = 0, $tobool25 = 0, $tobool34 = 0, $tobool352 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $z$0$lcssa = 0, $z$0226 = 0, label = 0, sp = 0, $55$looptemp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $s = sp + 56 | 0;
 $arg = sp + 40 | 0;
 $buf = sp;
 $wc = sp + 48 | 0;
 $mb = sp + 60 | 0;
 HEAP32[$s >> 2] = $fmt;
 $tobool25 = ($f | 0) != 0;
 $add$ptr206 = $buf + 40 | 0;
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = $buf + 39 | 0;
 $arrayidx365 = $wc + 4 | 0;
 $cnt$0$ph = 0;
 $l$0$ph = 0;
 $l10n$0$ph = 0;
 L1 : while (1) {
  $cnt$0 = $cnt$0$ph;
  $l$0 = $l$0$ph;
  while (1) {
   do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 61;
    $cnt$1 = -1;
    break;
   } else {
    $cnt$1 = $l$0 + $cnt$0 | 0;
    break;
   } else $cnt$1 = $cnt$0; while (0);
   $0 = HEAP32[$s >> 2] | 0;
   $1 = HEAP8[$0 >> 0] | 0;
   if (!($1 << 24 >> 24)) {
    label = 92;
    break L1;
   }
   $2 = $1;
   $3 = $0;
   L12 : while (1) {
    switch ($2 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $z$0$lcssa = $3;
      break L12;
      break;
     }
    default:
     {}
    }
    $incdec$ptr = $3 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr;
    $2 = HEAP8[$incdec$ptr >> 0] | 0;
    $3 = $incdec$ptr;
   }
   L15 : do if ((label | 0) == 10) {
    label = 0;
    $4 = $3;
    $z$0226 = $3;
    while (1) {
     if ((HEAP8[$4 + 1 >> 0] | 0) != 37) {
      $z$0$lcssa = $z$0226;
      break L15;
     }
     $incdec$ptr23 = $z$0226 + 1 | 0;
     $4 = $4 + 2 | 0;
     HEAP32[$s >> 2] = $4;
     if ((HEAP8[$4 >> 0] | 0) != 37) {
      $z$0$lcssa = $incdec$ptr23;
      break;
     } else $z$0226 = $incdec$ptr23;
    }
   } while (0);
   $l$0 = $z$0$lcssa - $0 | 0;
   if ($tobool25) _out($f, $0, $l$0);
   if (!$l$0) break; else $cnt$0 = $cnt$1;
  }
  $tobool34 = (_isdigit(HEAP8[(HEAP32[$s >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  $$pre261 = HEAP32[$s >> 2] | 0;
  if ($tobool34) {
   $$sink = 1;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0$ph;
  } else if ((HEAP8[$$pre261 + 2 >> 0] | 0) == 36) {
   $$sink = 3;
   $argpos$0 = (HEAP8[$$pre261 + 1 >> 0] | 0) + -48 | 0;
   $l10n$1 = 1;
  } else {
   $$sink = 1;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0$ph;
  }
  $incdec$ptr45 = $$pre261 + $$sink | 0;
  HEAP32[$s >> 2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45 >> 0] | 0;
  $sub49230 = ($11 << 24 >> 24) + -32 | 0;
  if ($sub49230 >>> 0 > 31 | (1 << $sub49230 & 75913 | 0) == 0) {
   $$lcssa213 = $11;
   $fl$0$lcssa = 0;
   $storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;
   $storemerge187236 = $incdec$ptr45;
   $sub49238 = $sub49230;
   while (1) {
    $or = 1 << $sub49238 | $fl$0237;
    $incdec$ptr62 = $storemerge187236 + 1 | 0;
    HEAP32[$s >> 2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62 >> 0] | 0;
    $sub49238 = ($12 << 24 >> 24) + -32 | 0;
    if ($sub49238 >>> 0 > 31 | (1 << $sub49238 & 75913 | 0) == 0) {
     $$lcssa213 = $12;
     $fl$0$lcssa = $or;
     $storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;
     $storemerge187236 = $incdec$ptr62;
    }
   }
  }
  if ($$lcssa213 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$storemerge187$lcssa + 1 >> 0] | 0) | 0)) label = 27; else {
    $14 = HEAP32[$s >> 2] | 0;
    if ((HEAP8[$14 + 2 >> 0] | 0) == 36) {
     $arrayidx78 = $14 + 1 | 0;
     HEAP32[$nl_type + ((HEAP8[$arrayidx78 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $l10n$2 = 1;
     $storemerge188 = $14 + 3 | 0;
     $w$0 = HEAP32[$nl_arg + ((HEAP8[$arrayidx78 >> 0] | 0) + -48 << 3) >> 2] | 0;
    } else label = 27;
   }
   if ((label | 0) == 27) {
    label = 0;
    if ($l10n$1 | 0) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $29 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $30 = HEAP32[$29 >> 2] | 0;
     HEAP32[$ap >> 2] = $29 + 4;
     $cond = $30;
    } else $cond = 0;
    $l10n$2 = 0;
    $storemerge188 = (HEAP32[$s >> 2] | 0) + 1 | 0;
    $w$0 = $cond;
   }
   HEAP32[$s >> 2] = $storemerge188;
   $cmp97 = ($w$0 | 0) < 0;
   $33 = $storemerge188;
   $fl$1 = $cmp97 ? $fl$0$lcssa | 8192 : $fl$0$lcssa;
   $l10n$3 = $l10n$2;
   $w$1 = $cmp97 ? 0 - $w$0 | 0 : $w$0;
  } else {
   $call104 = _getint($s) | 0;
   if (($call104 | 0) < 0) {
    $retval$0 = -1;
    break;
   }
   $33 = HEAP32[$s >> 2] | 0;
   $fl$1 = $fl$0$lcssa;
   $l10n$3 = $l10n$1;
   $w$1 = $call104;
  }
  do if ((HEAP8[$33 >> 0] | 0) == 46) {
   $arrayidx114 = $33 + 1 | 0;
   if ((HEAP8[$arrayidx114 >> 0] | 0) != 42) {
    HEAP32[$s >> 2] = $arrayidx114;
    $call160 = _getint($s) | 0;
    $$pre263 = HEAP32[$s >> 2] | 0;
    $p$0 = $call160;
    break;
   }
   if (_isdigit(HEAP8[$33 + 2 >> 0] | 0) | 0) {
    $36 = HEAP32[$s >> 2] | 0;
    if ((HEAP8[$36 + 3 >> 0] | 0) == 36) {
     $arrayidx129 = $36 + 2 | 0;
     HEAP32[$nl_type + ((HEAP8[$arrayidx129 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $42 = HEAP32[$nl_arg + ((HEAP8[$arrayidx129 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $add$ptr139 = $36 + 4 | 0;
     HEAP32[$s >> 2] = $add$ptr139;
     $$pre263 = $add$ptr139;
     $p$0 = $42;
     break;
    }
   }
   if ($l10n$3 | 0) {
    $retval$0 = -1;
    break L1;
   }
   if ($tobool25) {
    $51 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $52 = HEAP32[$51 >> 2] | 0;
    HEAP32[$ap >> 2] = $51 + 4;
    $cond149 = $52;
   } else $cond149 = 0;
   $add$ptr150 = (HEAP32[$s >> 2] | 0) + 2 | 0;
   HEAP32[$s >> 2] = $add$ptr150;
   $$pre263 = $add$ptr150;
   $p$0 = $cond149;
  } else {
   $$pre263 = $33;
   $p$0 = -1;
  } while (0);
  $55 = $$pre263;
  $st$0 = 0;
  while (1) {
   if (((HEAP8[$55 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $retval$0 = -1;
    break L1;
   }
   $55$looptemp = $55;
   $55 = $55 + 1 | 0;
   HEAP32[$s >> 2] = $55;
   $57 = HEAP8[(HEAP8[$55$looptemp >> 0] | 0) + -65 + (6768 + ($st$0 * 58 | 0)) >> 0] | 0;
   $conv175 = $57 & 255;
   if (($conv175 + -1 | 0) >>> 0 >= 8) break; else $st$0 = $conv175;
  }
  if (!($57 << 24 >> 24)) {
   $retval$0 = -1;
   break;
  }
  $cmp185 = ($argpos$0 | 0) > -1;
  do if ($57 << 24 >> 24 == 19) if ($cmp185) {
   $retval$0 = -1;
   break L1;
  } else label = 54; else {
   if ($cmp185) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $conv175;
    $59 = $nl_arg + ($argpos$0 << 3) | 0;
    $64 = HEAP32[$59 + 4 >> 2] | 0;
    $65 = $arg;
    HEAP32[$65 >> 2] = HEAP32[$59 >> 2];
    HEAP32[$65 + 4 >> 2] = $64;
    label = 54;
    break;
   }
   if (!$tobool25) {
    $retval$0 = 0;
    break L1;
   }
   _pop_arg($arg, $conv175, $ap, $pop_arg_long_double);
   $69 = HEAP32[$s >> 2] | 0;
   label = 55;
  } while (0);
  if ((label | 0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $55;
    label = 55;
   } else $l$0$ph$be = 0;
  }
  L77 : do if ((label | 0) == 55) {
   label = 0;
   $conv208 = HEAP8[$69 + -1 >> 0] | 0;
   $t$0 = ($st$0 | 0) != 0 & ($conv208 & 15 | 0) == 3 ? $conv208 & -33 : $conv208;
   $and220 = $fl$1 & -65537;
   $spec$select = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $and220;
   L79 : do switch ($t$0 | 0) {
   case 110:
    {
     switch (($st$0 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 2:
      {
       $82 = HEAP32[$arg >> 2] | 0;
       HEAP32[$82 >> 2] = $cnt$1;
       HEAP32[$82 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$arg >> 2] >> 1] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$arg >> 2] >> 0] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$arg >> 2] >> 2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     case 7:
      {
       $92 = HEAP32[$arg >> 2] | 0;
       HEAP32[$92 >> 2] = $cnt$1;
       HEAP32[$92 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
     default:
      {
       $l$0$ph$be = 0;
       break L77;
      }
     }
     break;
    }
   case 112:
    {
     $fl$3 = $spec$select | 8;
     $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
     $t$1 = 120;
     label = 67;
     break;
    }
   case 88:
   case 120:
    {
     $fl$3 = $spec$select;
     $p$1 = $p$0;
     $t$1 = $t$0;
     label = 67;
     break;
    }
   case 111:
    {
     $112 = $arg;
     $118 = _fmt_o(HEAP32[$112 >> 2] | 0, HEAP32[$112 + 4 >> 2] | 0, $add$ptr206) | 0;
     $sub$ptr$sub269 = $sub$ptr$lhs$cast318 - $118 | 0;
     $a$0 = $118;
     $fl$4 = $spec$select;
     $p$2 = ($spec$select & 8 | 0) == 0 | ($p$0 | 0) > ($sub$ptr$sub269 | 0) ? $p$0 : $sub$ptr$sub269 + 1 | 0;
     $pl$1 = 0;
     $prefix$1 = 15764;
     label = 73;
     break;
    }
   case 105:
   case 100:
    {
     $120 = $arg;
     $122 = HEAP32[$120 >> 2] | 0;
     $125 = HEAP32[$120 + 4 >> 2] | 0;
     if (($125 | 0) < 0) {
      $127 = _i64Subtract(0, 0, $122 | 0, $125 | 0) | 0;
      $128 = getTempRet0() | 0;
      $129 = $arg;
      HEAP32[$129 >> 2] = $127;
      HEAP32[$129 + 4 >> 2] = $128;
      $135 = $127;
      $136 = $128;
      $pl$0 = 1;
      $prefix$0 = 15764;
      label = 72;
      break L79;
     } else {
      $135 = $122;
      $136 = $125;
      $pl$0 = ($spec$select & 2049 | 0) != 0 & 1;
      $prefix$0 = ($spec$select & 2048 | 0) == 0 ? (($spec$select & 1 | 0) == 0 ? 15764 : 15766) : 15765;
      label = 72;
      break L79;
     }
     break;
    }
   case 117:
    {
     $71 = $arg;
     $135 = HEAP32[$71 >> 2] | 0;
     $136 = HEAP32[$71 + 4 >> 2] | 0;
     $pl$0 = 0;
     $prefix$0 = 15764;
     label = 72;
     break;
    }
   case 99:
    {
     HEAP8[$add$ptr341 >> 0] = HEAP32[$arg >> 2];
     $a$1 = $add$ptr341;
     $fl$6 = $and220;
     $p$5 = 1;
     $pl$2 = 0;
     $prefix$2 = 15764;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     break;
    }
   case 115:
    {
     $154 = HEAP32[$arg >> 2] | 0;
     $cond350 = ($154 | 0) == 0 ? 15774 : $154;
     $call351 = _memchr($cond350, 0, $p$0) | 0;
     $tobool352 = ($call351 | 0) == 0;
     $a$1 = $cond350;
     $fl$6 = $and220;
     $p$5 = $tobool352 ? $p$0 : $call351 - $cond350 | 0;
     $pl$2 = 0;
     $prefix$2 = 15764;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $tobool352 ? $cond350 + $p$0 | 0 : $call351;
     break;
    }
   case 67:
    {
     HEAP32[$wc >> 2] = HEAP32[$arg >> 2];
     HEAP32[$arrayidx365 >> 2] = 0;
     HEAP32[$arg >> 2] = $wc;
     $p$4269 = -1;
     label = 79;
     break;
    }
   case 83:
    {
     if (!$p$0) {
      _pad_651($f, 32, $w$1, 0, $spec$select);
      $i$0217271 = 0;
      label = 89;
     } else {
      $p$4269 = $p$0;
      label = 79;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $l$0$ph$be = FUNCTION_TABLE_iidiiii[$fmt_fp & 1]($f, +HEAPF64[$arg >> 3], $w$1, $p$0, $spec$select, $t$0) | 0;
     break L77;
     break;
    }
   default:
    {
     $a$1 = $0;
     $fl$6 = $spec$select;
     $p$5 = $p$0;
     $pl$2 = 0;
     $prefix$2 = 15764;
     $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
   } while (0);
   L102 : do if ((label | 0) == 67) {
    label = 0;
    $96 = $arg;
    $102 = _fmt_x(HEAP32[$96 >> 2] | 0, HEAP32[$96 + 4 >> 2] | 0, $add$ptr206, $t$1 & 32) | 0;
    $103 = $arg;
    $or$cond190 = ($fl$3 & 8 | 0) == 0 | (HEAP32[$103 >> 2] | 0) == 0 & (HEAP32[$103 + 4 >> 2] | 0) == 0;
    $a$0 = $102;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = $or$cond190 ? 0 : 2;
    $prefix$1 = $or$cond190 ? 15764 : 15764 + ($t$1 >>> 4) | 0;
    label = 73;
   } else if ((label | 0) == 72) {
    label = 0;
    $a$0 = _fmt_u($135, $136, $add$ptr206) | 0;
    $fl$4 = $spec$select;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 73;
   } else if ((label | 0) == 79) {
    label = 0;
    $i$0243 = 0;
    $ws$0244 = HEAP32[$arg >> 2] | 0;
    while (1) {
     $162 = HEAP32[$ws$0244 >> 2] | 0;
     if (!$162) {
      $i$0217 = $i$0243;
      break;
     }
     $call379 = _wctomb($mb, $162) | 0;
     $cmp380 = ($call379 | 0) < 0;
     if ($cmp380 | $call379 >>> 0 > ($p$4269 - $i$0243 | 0) >>> 0) {
      label = 83;
      break;
     }
     $add390 = $call379 + $i$0243 | 0;
     if ($p$4269 >>> 0 > $add390 >>> 0) {
      $i$0243 = $add390;
      $ws$0244 = $ws$0244 + 4 | 0;
     } else {
      $i$0217 = $add390;
      break;
     }
    }
    if ((label | 0) == 83) {
     label = 0;
     if ($cmp380) {
      $retval$0 = -1;
      break L1;
     } else $i$0217 = $i$0243;
    }
    _pad_651($f, 32, $w$1, $i$0217, $spec$select);
    if (!$i$0217) {
     $i$0217271 = 0;
     label = 89;
    } else {
     $i$1248 = 0;
     $ws$1249 = HEAP32[$arg >> 2] | 0;
     while (1) {
      $164 = HEAP32[$ws$1249 >> 2] | 0;
      if (!$164) {
       $i$0217271 = $i$0217;
       label = 89;
       break L102;
      }
      $call406 = _wctomb($mb, $164) | 0;
      $i$1248 = $call406 + $i$1248 | 0;
      if (($i$1248 | 0) > ($i$0217 | 0)) {
       $i$0217271 = $i$0217;
       label = 89;
       break L102;
      }
      _out($f, $mb, $call406);
      if ($i$1248 >>> 0 >= $i$0217 >>> 0) {
       $i$0217271 = $i$0217;
       label = 89;
       break;
      } else $ws$1249 = $ws$1249 + 4 | 0;
     }
    }
   } while (0);
   if ((label | 0) == 73) {
    label = 0;
    $138 = $arg;
    $146 = (HEAP32[$138 >> 2] | 0) != 0 | (HEAP32[$138 + 4 >> 2] | 0) != 0;
    $or$cond = ($p$2 | 0) != 0 | $146;
    $add323 = $sub$ptr$lhs$cast318 - $a$0 + (($146 ^ 1) & 1) | 0;
    $a$1 = $or$cond ? $a$0 : $add$ptr206;
    $fl$6 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
    $p$5 = $or$cond ? (($p$2 | 0) > ($add323 | 0) ? $p$2 : $add323) : 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
   } else if ((label | 0) == 89) {
    label = 0;
    _pad_651($f, 32, $w$1, $i$0217271, $spec$select ^ 8192);
    $l$0$ph$be = ($w$1 | 0) > ($i$0217271 | 0) ? $w$1 : $i$0217271;
    break;
   }
   $sub$ptr$sub428 = $sub$ptr$lhs$cast426$pre$phiZZZZ2D - $a$1 | 0;
   $spec$select195 = ($p$5 | 0) < ($sub$ptr$sub428 | 0) ? $sub$ptr$sub428 : $p$5;
   $add436 = $spec$select195 + $pl$2 | 0;
   $w$2 = ($w$1 | 0) < ($add436 | 0) ? $add436 : $w$1;
   _pad_651($f, 32, $w$2, $add436, $fl$6);
   _out($f, $prefix$2, $pl$2);
   _pad_651($f, 48, $w$2, $add436, $fl$6 ^ 65536);
   _pad_651($f, 48, $spec$select195, $sub$ptr$sub428, 0);
   _out($f, $a$1, $sub$ptr$sub428);
   _pad_651($f, 32, $w$2, $add436, $fl$6 ^ 8192);
   $l$0$ph$be = $w$2;
  } while (0);
  $cnt$0$ph = $cnt$1;
  $l$0$ph = $l$0$ph$be;
  $l10n$0$ph = $l10n$3;
 }
 L123 : do if ((label | 0) == 92) if (!$f) if (!$l10n$0$ph) $retval$0 = 0; else {
  $i$2224 = 1;
  while (1) {
   $166 = HEAP32[$nl_type + ($i$2224 << 2) >> 2] | 0;
   if (!$166) break;
   _pop_arg($nl_arg + ($i$2224 << 3) | 0, $166, $ap, $pop_arg_long_double);
   $inc = $i$2224 + 1 | 0;
   if ($inc >>> 0 < 10) $i$2224 = $inc; else {
    $retval$0 = 1;
    break L123;
   }
  }
  $i$3221 = $i$2224;
  while (1) {
   if (HEAP32[$nl_type + ($i$3221 << 2) >> 2] | 0) {
    $retval$0 = -1;
    break L123;
   }
   $i$3221 = $i$3221 + 1 | 0;
   if ($i$3221 >>> 0 >= 10) {
    $retval$0 = 1;
    break;
   }
  }
 } else $retval$0 = $cnt$1; while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _stbir__decode_scanline($stbir_info, $n) {
 $stbir_info = $stbir_info | 0;
 $n = $n | 0;
 var $203 = f0, $232 = f0, $252 = f0, $260 = f0, $81 = f0, $alpha = 0, $alpha_channel = 0, $arrayidx298 = 0, $c = 0, $call112 = 0, $call122 = f0, $call150 = 0, $call177 = 0, $call188 = f0, $call217 = 0, $call241 = 0, $call249 = f0, $call30 = 0, $call53 = 0, $call86 = 0, $call9 = 0, $channels = 0, $colorspace = 0, $conv160 = f0, $conv202 = f0, $decode = 0, $decode_buffer = 0, $decode_pixel_index = 0, $decode_pixel_index109 = 0, $decode_pixel_index147 = 0, $decode_pixel_index174 = 0, $decode_pixel_index214 = 0, $decode_pixel_index238 = 0, $decode_pixel_index277 = 0, $decode_pixel_index50 = 0, $decode_pixel_index83 = 0, $div = f0, $div135 = f0, $div71 = f0, $div95 = f0, $edge_horizontal = 0, $edge_vertical = 0, $in_buffer_row_offset = 0, $input_data = 0, $input_pixel_index = 0, $input_pixel_index111 = 0, $input_pixel_index149 = 0, $input_pixel_index176 = 0, $input_pixel_index216 = 0, $input_pixel_index240 = 0, $input_pixel_index52 = 0, $input_pixel_index85 = 0, $input_stride_bytes = 0, $input_w = 0, $max_x = 0, $mul21 = 0, $mul320 = 0, $mul337 = 0, $n$addr = 0, $stbir_info$addr = 0, $type = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $stbir_info$addr = sp + 136 | 0;
 $n$addr = sp + 132 | 0;
 $c = sp + 128 | 0;
 $channels = sp + 124 | 0;
 $alpha_channel = sp + 120 | 0;
 $type = sp + 116 | 0;
 $colorspace = sp + 112 | 0;
 $input_w = sp + 108 | 0;
 $input_stride_bytes = sp + 104 | 0;
 $decode_buffer = sp + 100 | 0;
 $edge_horizontal = sp + 96 | 0;
 $edge_vertical = sp + 92 | 0;
 $in_buffer_row_offset = sp + 88 | 0;
 $input_data = sp + 84 | 0;
 $max_x = sp + 80 | 0;
 $decode = sp + 76 | 0;
 $x = sp + 72 | 0;
 $decode_pixel_index = sp + 68 | 0;
 $input_pixel_index = sp + 64 | 0;
 $decode_pixel_index50 = sp + 60 | 0;
 $input_pixel_index52 = sp + 56 | 0;
 $decode_pixel_index83 = sp + 52 | 0;
 $input_pixel_index85 = sp + 48 | 0;
 $decode_pixel_index109 = sp + 44 | 0;
 $input_pixel_index111 = sp + 40 | 0;
 $decode_pixel_index147 = sp + 36 | 0;
 $input_pixel_index149 = sp + 32 | 0;
 $decode_pixel_index174 = sp + 28 | 0;
 $input_pixel_index176 = sp + 24 | 0;
 $decode_pixel_index214 = sp + 20 | 0;
 $input_pixel_index216 = sp + 16 | 0;
 $decode_pixel_index238 = sp + 12 | 0;
 $input_pixel_index240 = sp + 8 | 0;
 $decode_pixel_index277 = sp + 4 | 0;
 $alpha = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$channels >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 64 >> 2];
 HEAP32[$alpha_channel >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 68 >> 2];
 HEAP32[$type >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 76 >> 2];
 HEAP32[$colorspace >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 96 >> 2];
 HEAP32[$input_w >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 4 >> 2];
 HEAP32[$input_stride_bytes >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 12 >> 2];
 HEAP32[$decode_buffer >> 2] = _stbir__get_decode_buffer(HEAP32[$stbir_info$addr >> 2] | 0) | 0;
 HEAP32[$edge_horizontal >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 88 >> 2];
 HEAP32[$edge_vertical >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 92 >> 2];
 $call9 = _stbir__edge_wrap(HEAP32[$edge_vertical >> 2] | 0, HEAP32[$n$addr >> 2] | 0, HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 8 >> 2] | 0) | 0;
 HEAP32[$in_buffer_row_offset >> 2] = Math_imul($call9, HEAP32[$input_stride_bytes >> 2] | 0) | 0;
 HEAP32[$input_data >> 2] = (HEAP32[HEAP32[$stbir_info$addr >> 2] >> 2] | 0) + (HEAP32[$in_buffer_row_offset >> 2] | 0);
 HEAP32[$max_x >> 2] = (HEAP32[$input_w >> 2] | 0) + (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0);
 HEAP32[$decode >> 2] = (HEAP32[$type >> 2] << 1) + (HEAP32[$colorspace >> 2] | 0);
 HEAP32[$x >> 2] = 0 - (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0);
 do if ((HEAP32[$edge_vertical >> 2] | 0) == 4) {
  if ((HEAP32[$n$addr >> 2] | 0) >= 0) if ((HEAP32[$n$addr >> 2] | 0) < (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 8 >> 2] | 0)) break;
  while (1) {
   if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break;
   HEAP32[$c >> 2] = 0;
   while (1) {
    if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
    $mul21 = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ($mul21 + (HEAP32[$c >> 2] | 0) << 2) >> 2] = Math_fround(0.0);
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
   }
   HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return;
 } while (0);
 L15 : do switch (HEAP32[$decode >> 2] | 0) {
 case 0:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call30 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index >> 2] = Math_imul($call30, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $div = Math_fround(Math_fround(HEAPU8[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index >> 2] | 0) + (HEAP32[$c >> 2] | 0)) >> 0] | 0) / Math_fround(255.0));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $div;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 1:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index50 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call53 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index52 >> 2] = Math_imul($call53, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $81 = Math_fround(HEAPF32[5328 + ((HEAPU8[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index52 >> 2] | 0) + (HEAP32[$c >> 2] | 0)) >> 0] | 0) << 2) >> 2]);
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index50 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $81;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $div71 = Math_fround(Math_fround(HEAPU8[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index52 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0)) >> 0] | 0) / Math_fround(255.0));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index50 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2] = $div71;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 2:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index83 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call86 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index85 >> 2] = Math_imul($call86, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $div95 = Math_fround(Math_fround(HEAPU16[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index85 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 1) >> 1] | 0) / Math_fround(65535.0));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index83 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $div95;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 3:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index109 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call112 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index111 >> 2] = Math_imul($call112, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $call122 = Math_fround(_stbir__srgb_to_linear(Math_fround(Math_fround(HEAPU16[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index111 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 1) >> 1] | 0) / Math_fround(65535.0))));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index109 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $call122;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $div135 = Math_fround(Math_fround(HEAPU16[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index111 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 1) >> 1] | 0) / Math_fround(65535.0));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index109 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2] = $div135;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 4:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index147 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call150 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index149 >> 2] = Math_imul($call150, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $conv160 = Math_fround(+((HEAP32[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index149 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] | 0) >>> 0) / 4294967295.0);
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index147 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $conv160;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 5:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index174 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call177 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index176 >> 2] = Math_imul($call177, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $call188 = Math_fround(_stbir__srgb_to_linear(Math_fround(+((HEAP32[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index176 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] | 0) >>> 0) / 4294967295.0)));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index174 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $call188;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $conv202 = Math_fround(+((HEAP32[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index176 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2] | 0) >>> 0) / 4294967295.0);
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index174 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2] = $conv202;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 6:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index214 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call217 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index216 >> 2] = Math_imul($call217, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $203 = Math_fround(HEAPF32[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index216 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2]);
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index214 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $203;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 case 7:
  {
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L15;
    HEAP32[$decode_pixel_index238 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    $call241 = _stbir__edge_wrap(HEAP32[$edge_horizontal >> 2] | 0, HEAP32[$x >> 2] | 0, HEAP32[$input_w >> 2] | 0) | 0;
    HEAP32[$input_pixel_index240 >> 2] = Math_imul($call241, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$c >> 2] = 0;
    while (1) {
     if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
     $call249 = Math_fround(_stbir__srgb_to_linear(Math_fround(HEAPF32[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index240 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2])));
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index238 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2] = $call249;
     HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $232 = Math_fround(HEAPF32[(HEAP32[$input_data >> 2] | 0) + ((HEAP32[$input_pixel_index240 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2]);
     HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index238 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2] = $232;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   break;
  }
 default:
  ___assert_fail(13703, 12378, 1368, 13752);
 } while (0);
 L94 : do if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 1)) {
  HEAP32[$x >> 2] = 0 - (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0);
  while (1) {
   if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break L94;
   HEAP32[$decode_pixel_index277 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
   HEAPF32[$alpha >> 2] = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index277 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2]);
   if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 76 >> 2] | 0) != 3) {
    HEAPF32[$alpha >> 2] = Math_fround(Math_fround(HEAPF32[$alpha >> 2]) + Math_fround(8.27180613e-25));
    $252 = Math_fround(HEAPF32[$alpha >> 2]);
    HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index277 >> 2] | 0) + (HEAP32[$alpha_channel >> 2] | 0) << 2) >> 2] = $252;
   }
   HEAP32[$c >> 2] = 0;
   while (1) {
    if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
    if ((HEAP32[$c >> 2] | 0) != (HEAP32[$alpha_channel >> 2] | 0)) {
     $260 = Math_fround(HEAPF32[$alpha >> 2]);
     $arrayidx298 = (HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$decode_pixel_index277 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) | 0;
     HEAPF32[$arrayidx298 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx298 >> 2]) * $260);
    }
    HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
   }
   HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
  }
 } while (0);
 if ((HEAP32[$edge_horizontal >> 2] | 0) != 4) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$x >> 2] = 0 - (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0);
 while (1) {
  if ((HEAP32[$x >> 2] | 0) >= 0) break;
  HEAP32[$c >> 2] = 0;
  while (1) {
   if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
   $mul320 = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
   HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ($mul320 + (HEAP32[$c >> 2] | 0) << 2) >> 2] = Math_fround(0.0);
   HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
  }
  HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
 }
 HEAP32[$x >> 2] = HEAP32[$input_w >> 2];
 while (1) {
  if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) break;
  HEAP32[$c >> 2] = 0;
  while (1) {
   if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
   $mul337 = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
   HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ($mul337 + (HEAP32[$c >> 2] | 0) << 2) >> 2] = Math_fround(0.0);
   HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
  }
  HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _stbi_zlib_compress($data, $data_len, $out_len, $quality) {
 $data = $data | 0;
 $data_len = $data_len | 0;
 $out_len = $out_len | 0;
 $quality = $quality | 0;
 var $102 = 0, $138 = 0, $15 = 0, $17 = 0, $172 = 0, $230 = 0, $260 = 0, $262 = 0, $269 = 0, $271 = 0, $278 = 0, $280 = 0, $287 = 0, $289 = 0, $298 = 0, $7 = 0, $9 = 0, $98 = 0, $add$ptr147 = 0, $add$ptr99 = 0, $add168 = 0, $add180 = 0, $add193 = 0, $arrayidx10 = 0, $arrayidx103 = 0, $arrayidx26 = 0, $arrayidx384 = 0, $arrayidx405 = 0, $arrayidx427 = 0, $arrayidx448 = 0, $best = 0, $bestloc = 0, $bitbuf = 0, $bitcount = 0, $blocklen = 0, $call170 = 0, $call183 = 0, $call196 = 0, $call205 = 0, $call240 = 0, $call267 = 0, $call277 = 0, $call298 = 0, $call308 = 0, $call318 = 0, $cond119 = 0, $cond47 = 0, $conv265 = 0, $conv296 = 0, $conv382 = 0, $conv403 = 0, $conv425 = 0, $conv446 = 0, $d = 0, $d146 = 0, $data$addr = 0, $data_len$addr = 0, $e = 0, $h = 0, $hash_table = 0, $hlist = 0, $i = 0, $j = 0, $n = 0, $out = 0, $out_len$addr = 0, $quality$addr = 0, $retval = 0, $s1 = 0, $s2 = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0, CSE$5 = 0, CSE$6 = 0, CSE$7 = 0, CSE$8 = 0, CSE$9 = 0, CSE$10 = 0, CSE$11 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 $retval = sp + 84 | 0;
 $data$addr = sp + 80 | 0;
 $data_len$addr = sp + 76 | 0;
 $out_len$addr = sp + 72 | 0;
 $quality$addr = sp + 68 | 0;
 $bitbuf = sp + 64 | 0;
 $i = sp + 60 | 0;
 $j = sp + 56 | 0;
 $bitcount = sp + 52 | 0;
 $out = sp + 48 | 0;
 $hash_table = sp + 44 | 0;
 $h = sp + 40 | 0;
 $best = sp + 36 | 0;
 $bestloc = sp + 32 | 0;
 $hlist = sp + 28 | 0;
 $n = sp + 24 | 0;
 $d = sp + 20 | 0;
 $e = sp + 16 | 0;
 $d146 = sp + 12 | 0;
 $s1 = sp + 8 | 0;
 $s2 = sp + 4 | 0;
 $blocklen = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$data_len$addr >> 2] = $data_len;
 HEAP32[$out_len$addr >> 2] = $out_len;
 HEAP32[$quality$addr >> 2] = $quality;
 HEAP32[$bitbuf >> 2] = 0;
 HEAP32[$bitcount >> 2] = 0;
 HEAP32[$out >> 2] = 0;
 HEAP32[$hash_table >> 2] = _malloc(65536) | 0;
 if (!(HEAP32[$hash_table >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $298 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $298 | 0;
 }
 if ((HEAP32[$quality$addr >> 2] | 0) < 5) HEAP32[$quality$addr >> 2] = 5;
 if (!(HEAP32[$out >> 2] | 0)) label = 7; else if (((HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$out >> 2] | 0) + -8 >> 2] | 0)) label = 7;
 if ((label | 0) == 7) _stbiw__sbgrowf($out, 1, 1) | 0;
 CSE$0 = HEAP32[$out >> 2] | 0;
 $7 = CSE$0 | 0;
 $arrayidx10 = CSE$0 + -8 + 4 | 0;
 $9 = HEAP32[$arrayidx10 >> 2] | 0;
 HEAP32[$arrayidx10 >> 2] = $9 + 1;
 HEAP8[$7 + $9 >> 0] = 120;
 if (!(HEAP32[$out >> 2] | 0)) label = 10; else if (((HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$out >> 2] | 0) + -8 >> 2] | 0)) label = 10;
 if ((label | 0) == 10) _stbiw__sbgrowf($out, 1, 1) | 0;
 CSE$1 = HEAP32[$out >> 2] | 0;
 $15 = CSE$1 | 0;
 $arrayidx26 = CSE$1 + -8 + 4 | 0;
 $17 = HEAP32[$arrayidx26 >> 2] | 0;
 HEAP32[$arrayidx26 >> 2] = $17 + 1;
 HEAP8[$15 + $17 >> 0] = 94;
 HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | 1 << HEAP32[$bitcount >> 2];
 HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 1;
 HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
 HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | 1 << HEAP32[$bitcount >> 2];
 HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 2;
 HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 16384) break;
  HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= ((HEAP32[$data_len$addr >> 2] | 0) - 3 | 0)) break;
  HEAP32[$h >> 2] = (_stbiw__zhash((HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0) | 0) & 16383;
  HEAP32[$best >> 2] = 3;
  HEAP32[$bestloc >> 2] = 0;
  HEAP32[$hlist >> 2] = HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2];
  if (HEAP32[$hlist >> 2] | 0) $cond47 = HEAP32[(HEAP32[$hlist >> 2] | 0) + -8 + 4 >> 2] | 0; else $cond47 = 0;
  HEAP32[$n >> 2] = $cond47;
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$n >> 2] | 0)) break;
   if (((HEAP32[(HEAP32[$hlist >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] | 0) - (HEAP32[$data$addr >> 2] | 0) | 0) > ((HEAP32[$i >> 2] | 0) - 32768 | 0)) {
    CSE$8 = HEAP32[$i >> 2] | 0;
    HEAP32[$d >> 2] = _stbiw__zlib_countm(HEAP32[(HEAP32[$hlist >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] | 0, (HEAP32[$data$addr >> 2] | 0) + CSE$8 | 0, (HEAP32[$data_len$addr >> 2] | 0) - CSE$8 | 0) | 0;
    if ((HEAP32[$d >> 2] | 0) >= (HEAP32[$best >> 2] | 0)) {
     HEAP32[$best >> 2] = HEAP32[$d >> 2];
     HEAP32[$bestloc >> 2] = HEAP32[(HEAP32[$hlist >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2];
    }
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  if (HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0) if ((HEAP32[(HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0) + -8 + 4 >> 2] | 0) == (HEAP32[$quality$addr >> 2] << 1 | 0)) {
   CSE$9 = HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0;
   CSE$10 = HEAP32[$quality$addr >> 2] << 2 | 0;
   _memmove(CSE$9 | 0, CSE$9 + CSE$10 | 0, CSE$10 | 0) | 0;
   HEAP32[(HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0) + -8 + 4 >> 2] = HEAP32[$quality$addr >> 2];
  }
  if (!(HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0)) label = 29; else if (((HEAP32[(HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0) + -8 >> 2] | 0)) label = 29;
  if ((label | 0) == 29) {
   label = 0;
   _stbiw__sbgrowf((HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) | 0, 1, 4) | 0;
  }
  $add$ptr99 = (HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0;
  CSE$7 = HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2] | 0;
  $98 = CSE$7 | 0;
  $arrayidx103 = CSE$7 + -8 + 4 | 0;
  $102 = HEAP32[$arrayidx103 >> 2] | 0;
  HEAP32[$arrayidx103 >> 2] = $102 + 1;
  HEAP32[$98 + ($102 << 2) >> 2] = $add$ptr99;
  L45 : do if (HEAP32[$bestloc >> 2] | 0) {
   HEAP32[$h >> 2] = (_stbiw__zhash((HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) + 1 | 0) | 0) & 16383;
   HEAP32[$hlist >> 2] = HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$h >> 2] << 2) >> 2];
   if (HEAP32[$hlist >> 2] | 0) $cond119 = HEAP32[(HEAP32[$hlist >> 2] | 0) + -8 + 4 >> 2] | 0; else $cond119 = 0;
   HEAP32[$n >> 2] = $cond119;
   HEAP32[$j >> 2] = 0;
   while (1) {
    if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$n >> 2] | 0)) break L45;
    if (((HEAP32[(HEAP32[$hlist >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] | 0) - (HEAP32[$data$addr >> 2] | 0) | 0) > ((HEAP32[$i >> 2] | 0) - 32767 | 0)) {
     CSE$11 = HEAP32[$i >> 2] | 0;
     HEAP32[$e >> 2] = _stbiw__zlib_countm(HEAP32[(HEAP32[$hlist >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] | 0, (HEAP32[$data$addr >> 2] | 0) + CSE$11 + 1 | 0, (HEAP32[$data_len$addr >> 2] | 0) - CSE$11 - 1 | 0) | 0;
     if ((HEAP32[$e >> 2] | 0) > (HEAP32[$best >> 2] | 0)) break;
    }
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
   HEAP32[$bestloc >> 2] = 0;
  } while (0);
  $add$ptr147 = (HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0;
  if (HEAP32[$bestloc >> 2] | 0) {
   HEAP32[$d146 >> 2] = $add$ptr147 - (HEAP32[$bestloc >> 2] | 0);
   if (!((HEAP32[$d146 >> 2] | 0) <= 32767 & (HEAP32[$best >> 2] | 0) <= 258)) {
    label = 41;
    break;
   }
   HEAP32[$j >> 2] = 0;
   while (1) {
    $138 = HEAP32[$j >> 2] | 0;
    if ((HEAP32[$best >> 2] | 0) <= ((HEAPU16[3968 + ((HEAP32[$j >> 2] | 0) + 1 << 1) >> 1] | 0) - 1 | 0)) break;
    HEAP32[$j >> 2] = $138 + 1;
   }
   $add168 = (HEAP32[$j >> 2] | 0) + 257 | 0;
   do if (($138 + 257 | 0) <= 143) {
    $call170 = _stbiw__zlib_bitrev(48 + $add168 | 0, 8) | 0;
    HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call170 << HEAP32[$bitcount >> 2];
    HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 8;
    HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
   } else {
    $add180 = (HEAP32[$j >> 2] | 0) + 257 | 0;
    if (($add168 | 0) <= 255) {
     $call183 = _stbiw__zlib_bitrev(400 + $add180 - 144 | 0, 9) | 0;
     HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call183 << HEAP32[$bitcount >> 2];
     HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 9;
     HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
     break;
    }
    $add193 = (HEAP32[$j >> 2] | 0) + 257 | 0;
    if (($add180 | 0) <= 279) {
     $call196 = _stbiw__zlib_bitrev(0 + $add193 - 256 | 0, 7) | 0;
     HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call196 << HEAP32[$bitcount >> 2];
     HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 7;
     HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
     break;
    } else {
     $call205 = _stbiw__zlib_bitrev(192 + $add193 - 280 | 0, 8) | 0;
     HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call205 << HEAP32[$bitcount >> 2];
     HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 8;
     HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
     break;
    }
   } while (0);
   if (HEAP8[4032 + (HEAP32[$j >> 2] | 0) >> 0] | 0) {
    HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | (HEAP32[$best >> 2] | 0) - (HEAPU16[3968 + (HEAP32[$j >> 2] << 1) >> 1] | 0) << HEAP32[$bitcount >> 2];
    HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + (HEAPU8[4032 + (HEAP32[$j >> 2] | 0) >> 0] | 0);
    HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
   }
   HEAP32[$j >> 2] = 0;
   while (1) {
    $172 = HEAP32[$j >> 2] | 0;
    if ((HEAP32[$d146 >> 2] | 0) <= ((HEAPU16[4064 + ((HEAP32[$j >> 2] | 0) + 1 << 1) >> 1] | 0) - 1 | 0)) break;
    HEAP32[$j >> 2] = $172 + 1;
   }
   $call240 = _stbiw__zlib_bitrev($172, 5) | 0;
   HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call240 << HEAP32[$bitcount >> 2];
   HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 5;
   HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
   if (HEAP8[4128 + (HEAP32[$j >> 2] | 0) >> 0] | 0) {
    HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | (HEAP32[$d146 >> 2] | 0) - (HEAPU16[4064 + (HEAP32[$j >> 2] << 1) >> 1] | 0) << HEAP32[$bitcount >> 2];
    HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + (HEAPU8[4128 + (HEAP32[$j >> 2] | 0) >> 0] | 0);
    HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
   }
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + (HEAP32[$best >> 2] | 0);
  } else {
   $conv265 = HEAPU8[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
   if ((HEAPU8[$add$ptr147 >> 0] | 0) <= 143) {
    $call267 = _stbiw__zlib_bitrev(48 + $conv265 | 0, 8) | 0;
    HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call267 << HEAP32[$bitcount >> 2];
    HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 8;
    HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
   } else {
    $call277 = _stbiw__zlib_bitrev(400 + $conv265 - 144 | 0, 9) | 0;
    HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call277 << HEAP32[$bitcount >> 2];
    HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 9;
    HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
   }
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 }
 if ((label | 0) == 41) ___assert_fail(12227, 12174, 922, 12253);
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$data_len$addr >> 2] | 0)) break;
  $conv296 = HEAPU8[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
  if ((HEAPU8[(HEAP32[$data$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) <= 143) {
   $call298 = _stbiw__zlib_bitrev(48 + $conv296 | 0, 8) | 0;
   HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call298 << HEAP32[$bitcount >> 2];
   HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 8;
   HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
  } else {
   $call308 = _stbiw__zlib_bitrev(400 + $conv296 - 144 | 0, 9) | 0;
   HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call308 << HEAP32[$bitcount >> 2];
   HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 9;
   HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $call318 = _stbiw__zlib_bitrev(0, 7) | 0;
 HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | $call318 << HEAP32[$bitcount >> 2];
 HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 7;
 HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
 while (1) {
  if (!(HEAP32[$bitcount >> 2] | 0)) break;
  HEAP32[$bitbuf >> 2] = HEAP32[$bitbuf >> 2] | 0 << HEAP32[$bitcount >> 2];
  HEAP32[$bitcount >> 2] = (HEAP32[$bitcount >> 2] | 0) + 1;
  HEAP32[$out >> 2] = _stbiw__zlib_flushf(HEAP32[$out >> 2] | 0, $bitbuf, $bitcount) | 0;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  $230 = HEAP32[$hash_table >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= 16384) break;
  if (HEAP32[$230 + (HEAP32[$i >> 2] << 2) >> 2] | 0) _free((HEAP32[(HEAP32[$hash_table >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0) + -8 | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _free($230);
 HEAP32[$s1 >> 2] = 1;
 HEAP32[$s2 >> 2] = 0;
 HEAP32[$blocklen >> 2] = (HEAP32[$data_len$addr >> 2] | 0) % 5552 | 0;
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$data_len$addr >> 2] | 0)) break;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$blocklen >> 2] | 0)) break;
   HEAP32[$s1 >> 2] = (HEAP32[$s1 >> 2] | 0) + (HEAPU8[(HEAP32[$data$addr >> 2] | 0) + ((HEAP32[$j >> 2] | 0) + (HEAP32[$i >> 2] | 0)) >> 0] | 0);
   HEAP32[$s2 >> 2] = (HEAP32[$s2 >> 2] | 0) + (HEAP32[$s1 >> 2] | 0);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  HEAP32[$s1 >> 2] = ((HEAP32[$s1 >> 2] | 0) >>> 0) % 65521 | 0;
  HEAP32[$s2 >> 2] = ((HEAP32[$s2 >> 2] | 0) >>> 0) % 65521 | 0;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + (HEAP32[$blocklen >> 2] | 0);
  HEAP32[$blocklen >> 2] = 5552;
 }
 if (!(HEAP32[$out >> 2] | 0)) label = 87; else if (((HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$out >> 2] | 0) + -8 >> 2] | 0)) label = 87;
 if ((label | 0) == 87) _stbiw__sbgrowf($out, 1, 1) | 0;
 $conv382 = (HEAP32[$s2 >> 2] | 0) >>> 8 & 255;
 CSE$2 = HEAP32[$out >> 2] | 0;
 $260 = CSE$2 | 0;
 $arrayidx384 = CSE$2 + -8 + 4 | 0;
 $262 = HEAP32[$arrayidx384 >> 2] | 0;
 HEAP32[$arrayidx384 >> 2] = $262 + 1;
 HEAP8[$260 + $262 >> 0] = $conv382;
 if (!(HEAP32[$out >> 2] | 0)) label = 90; else if (((HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$out >> 2] | 0) + -8 >> 2] | 0)) label = 90;
 if ((label | 0) == 90) _stbiw__sbgrowf($out, 1, 1) | 0;
 $conv403 = HEAP32[$s2 >> 2] & 255;
 CSE$3 = HEAP32[$out >> 2] | 0;
 $269 = CSE$3 | 0;
 $arrayidx405 = CSE$3 + -8 + 4 | 0;
 $271 = HEAP32[$arrayidx405 >> 2] | 0;
 HEAP32[$arrayidx405 >> 2] = $271 + 1;
 HEAP8[$269 + $271 >> 0] = $conv403;
 if (!(HEAP32[$out >> 2] | 0)) label = 93; else if (((HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$out >> 2] | 0) + -8 >> 2] | 0)) label = 93;
 if ((label | 0) == 93) _stbiw__sbgrowf($out, 1, 1) | 0;
 $conv425 = (HEAP32[$s1 >> 2] | 0) >>> 8 & 255;
 CSE$4 = HEAP32[$out >> 2] | 0;
 $278 = CSE$4 | 0;
 $arrayidx427 = CSE$4 + -8 + 4 | 0;
 $280 = HEAP32[$arrayidx427 >> 2] | 0;
 HEAP32[$arrayidx427 >> 2] = $280 + 1;
 HEAP8[$278 + $280 >> 0] = $conv425;
 if (!(HEAP32[$out >> 2] | 0)) label = 96; else if (((HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$out >> 2] | 0) + -8 >> 2] | 0)) label = 96;
 if ((label | 0) == 96) _stbiw__sbgrowf($out, 1, 1) | 0;
 $conv446 = HEAP32[$s1 >> 2] & 255;
 CSE$5 = HEAP32[$out >> 2] | 0;
 $287 = CSE$5 | 0;
 $arrayidx448 = CSE$5 + -8 + 4 | 0;
 $289 = HEAP32[$arrayidx448 >> 2] | 0;
 HEAP32[$arrayidx448 >> 2] = $289 + 1;
 HEAP8[$287 + $289 >> 0] = $conv446;
 HEAP32[HEAP32[$out_len$addr >> 2] >> 2] = HEAP32[(HEAP32[$out >> 2] | 0) + -8 + 4 >> 2];
 CSE$6 = HEAP32[$out >> 2] | 0;
 _memmove(CSE$6 + -8 | 0, CSE$6 | 0, HEAP32[HEAP32[$out_len$addr >> 2] >> 2] | 0) | 0;
 HEAP32[$retval >> 2] = (HEAP32[$out >> 2] | 0) + -8;
 $298 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $298 | 0;
}

function _ImageFormat($image, $newFormat) {
 $image = $image | 0;
 $newFormat = $newFormat | 0;
 var $$byval_copy = 0, $13 = 0, $271 = f0, $277 = f0, $283 = f0, $301 = f0, $307 = f0, $313 = f0, $319 = f0, $a = 0, $a230 = 0, $add = f0, $add349 = f0, $add353 = f0, $add57 = f0, $b = 0, $b171 = 0, $b229 = 0, $call126 = 0, $call167 = 0, $call19 = 0, $call225 = 0, $call285 = 0, $call333 = 0, $call365 = 0, $call40 = 0, $call401 = 0, $call81 = 0, $cmp197 = 0, $conv = 0, $conv141 = 0, $conv147 = 0, $conv154 = 0, $conv300 = 0, $conv306 = 0, $conv313 = 0, $conv320 = 0, $conv63 = 0, $conv68 = 0, $g = 0, $g170 = 0, $g228 = 0, $i = 0, $i128 = 0, $i172 = 0, $i231 = 0, $i287 = 0, $i335 = 0, $i367 = 0, $i403 = 0, $i42 = 0, $i83 = 0, $image$addr = 0, $k = 0, $k129 = 0, $k288 = 0, $k368 = 0, $k404 = 0, $mul25 = f0, $mul345 = f0, $mul53 = f0, $newFormat$addr = 0, $pixels = 0, $r = 0, $r169 = 0, $r227 = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0, CSE$5 = 0, CSE$6 = 0, CSE$7 = 0, CSE$8 = 0, CSE$9 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $$byval_copy = sp + 76 | 0;
 $image$addr = sp + 72 | 0;
 $newFormat$addr = sp + 68 | 0;
 $pixels = sp + 64 | 0;
 $k = sp + 60 | 0;
 $i = sp + 56 | 0;
 $i42 = sp + 52 | 0;
 $r = sp + 106 | 0;
 $g = sp + 105 | 0;
 $b = sp + 104 | 0;
 $i83 = sp + 48 | 0;
 $i128 = sp + 44 | 0;
 $k129 = sp + 40 | 0;
 $r169 = sp + 103 | 0;
 $g170 = sp + 102 | 0;
 $b171 = sp + 101 | 0;
 $a = sp + 100 | 0;
 $i172 = sp + 36 | 0;
 $r227 = sp + 99 | 0;
 $g228 = sp + 98 | 0;
 $b229 = sp + 97 | 0;
 $a230 = sp + 96 | 0;
 $i231 = sp + 32 | 0;
 $i287 = sp + 28 | 0;
 $k288 = sp + 24 | 0;
 $i335 = sp + 20 | 0;
 $i367 = sp + 16 | 0;
 $k368 = sp + 12 | 0;
 $i403 = sp + 8 | 0;
 $k404 = sp + 4 | 0;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$newFormat$addr >> 2] = $newFormat;
 if (!(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[$newFormat$addr >> 2] | 0 ? (HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) != 0 : 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) == (HEAP32[$newFormat$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!((HEAP32[$newFormat$addr >> 2] | 0) < 11 ? (HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) < 11 : 0)) {
  _TraceLog(4, 15321, sp);
  STACKTOP = sp;
  return;
 }
 $13 = HEAP32[$image$addr >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$13 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$13 + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$13 + 8 >> 2];
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$13 + 12 >> 2];
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$13 + 16 >> 2];
 HEAP32[$pixels >> 2] = _GetImageDataNormalized($$byval_copy) | 0;
 _free(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0);
 HEAP32[HEAP32[$image$addr >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] = HEAP32[$newFormat$addr >> 2];
 HEAP32[$k >> 2] = 0;
 L17 : do switch (HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) {
 case 1:
  {
   CSE$0 = HEAP32[$image$addr >> 2] | 0;
   $call19 = _malloc(Math_imul(HEAP32[CSE$0 + 4 >> 2] | 0, HEAP32[CSE$0 + 8 >> 2] | 0) | 0) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call19;
   HEAP32[$i >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    $mul25 = Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2]) * Math_fround(.298999995));
    $add = Math_fround($mul25 + Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2]) * Math_fround(.587000012)));
    $conv = ~~Math_fround(Math_fround($add + Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2]) * Math_fround(.114))) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = $conv;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   break;
  }
 case 2:
  {
   CSE$1 = HEAP32[$image$addr >> 2] | 0;
   $call40 = _malloc((Math_imul(HEAP32[CSE$1 + 4 >> 2] | 0, HEAP32[CSE$1 + 8 >> 2] | 0) | 0) << 1) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call40;
   HEAP32[$i42 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i42 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0) << 1 | 0)) break L17;
    $mul53 = Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k >> 2] << 4) >> 2]) * Math_fround(.298999995));
    $add57 = Math_fround($mul53 + Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k >> 2] << 4) + 4 >> 2]) * Math_fround(.587000012)));
    $conv63 = ~~Math_fround(Math_fround($add57 + Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k >> 2] << 4) + 8 >> 2]) * Math_fround(.114))) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i42 >> 2] | 0) >> 0] = $conv63;
    $conv68 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k >> 2] << 4) + 12 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i42 >> 2] | 0) + 1) >> 0] = $conv68;
    HEAP32[$i42 >> 2] = (HEAP32[$i42 >> 2] | 0) + 2;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   }
   break;
  }
 case 3:
  {
   CSE$2 = HEAP32[$image$addr >> 2] | 0;
   $call81 = _malloc((Math_imul(HEAP32[CSE$2 + 4 >> 2] | 0, HEAP32[CSE$2 + 8 >> 2] | 0) | 0) << 1) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call81;
   HEAP8[$r >> 0] = 0;
   HEAP8[$g >> 0] = 0;
   HEAP8[$b >> 0] = 0;
   HEAP32[$i83 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i83 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    HEAP8[$r >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i83 >> 2] << 4) >> 2]) * Math_fround(31.0))));
    HEAP8[$g >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i83 >> 2] << 4) + 4 >> 2]) * Math_fround(63.0))));
    HEAP8[$b >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i83 >> 2] << 4) + 8 >> 2]) * Math_fround(31.0))));
    HEAP16[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i83 >> 2] << 1) >> 1] = (HEAPU8[$r >> 0] & 65535) << 11 | (HEAPU8[$g >> 0] & 65535) << 5 | HEAPU8[$b >> 0] & 65535;
    HEAP32[$i83 >> 2] = (HEAP32[$i83 >> 2] | 0) + 1;
   }
   break;
  }
 case 4:
  {
   CSE$3 = HEAP32[$image$addr >> 2] | 0;
   $call126 = _malloc((Math_imul(HEAP32[CSE$3 + 4 >> 2] | 0, HEAP32[CSE$3 + 8 >> 2] | 0) | 0) * 3 | 0) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call126;
   HEAP32[$i128 >> 2] = 0;
   HEAP32[$k129 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i128 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0) * 3 | 0)) break L17;
    $conv141 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k129 >> 2] << 4) >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i128 >> 2] | 0) >> 0] = $conv141;
    $conv147 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k129 >> 2] << 4) + 4 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i128 >> 2] | 0) + 1) >> 0] = $conv147;
    $conv154 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k129 >> 2] << 4) + 8 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i128 >> 2] | 0) + 2) >> 0] = $conv154;
    HEAP32[$i128 >> 2] = (HEAP32[$i128 >> 2] | 0) + 3;
    HEAP32[$k129 >> 2] = (HEAP32[$k129 >> 2] | 0) + 1;
   }
   break;
  }
 case 5:
  {
   CSE$4 = HEAP32[$image$addr >> 2] | 0;
   $call167 = _malloc((Math_imul(HEAP32[CSE$4 + 4 >> 2] | 0, HEAP32[CSE$4 + 8 >> 2] | 0) | 0) << 1) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call167;
   HEAP8[$r169 >> 0] = 0;
   HEAP8[$g170 >> 0] = 0;
   HEAP8[$b171 >> 0] = 0;
   HEAP8[$a >> 0] = 0;
   HEAP32[$i172 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i172 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    HEAP8[$r169 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i172 >> 2] << 4) >> 2]) * Math_fround(31.0))));
    HEAP8[$g170 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i172 >> 2] << 4) + 4 >> 2]) * Math_fround(31.0))));
    HEAP8[$b171 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i172 >> 2] << 4) + 8 >> 2]) * Math_fround(31.0))));
    $cmp197 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i172 >> 2] << 4) + 12 >> 2]) > Math_fround(.196078435);
    HEAP8[$a >> 0] = $cmp197 ? 1 : 0;
    HEAP16[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i172 >> 2] << 1) >> 1] = (HEAPU8[$r169 >> 0] & 65535) << 11 | (HEAPU8[$g170 >> 0] & 65535) << 6 | (HEAPU8[$b171 >> 0] & 65535) << 1 | HEAPU8[$a >> 0] & 65535;
    HEAP32[$i172 >> 2] = (HEAP32[$i172 >> 2] | 0) + 1;
   }
   break;
  }
 case 6:
  {
   CSE$5 = HEAP32[$image$addr >> 2] | 0;
   $call225 = _malloc((Math_imul(HEAP32[CSE$5 + 4 >> 2] | 0, HEAP32[CSE$5 + 8 >> 2] | 0) | 0) << 1) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call225;
   HEAP8[$r227 >> 0] = 0;
   HEAP8[$g228 >> 0] = 0;
   HEAP8[$b229 >> 0] = 0;
   HEAP8[$a230 >> 0] = 0;
   HEAP32[$i231 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i231 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    HEAP8[$r227 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i231 >> 2] << 4) >> 2]) * Math_fround(15.0))));
    HEAP8[$g228 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i231 >> 2] << 4) + 4 >> 2]) * Math_fround(15.0))));
    HEAP8[$b229 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i231 >> 2] << 4) + 8 >> 2]) * Math_fround(15.0))));
    HEAP8[$a230 >> 0] = ~~+_llvm_round_f64(+(+Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i231 >> 2] << 4) + 12 >> 2]) * Math_fround(15.0))));
    HEAP16[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i231 >> 2] << 1) >> 1] = (HEAPU8[$r227 >> 0] & 65535) << 12 | (HEAPU8[$g228 >> 0] & 65535) << 8 | (HEAPU8[$b229 >> 0] & 65535) << 4 | HEAPU8[$a230 >> 0] & 65535;
    HEAP32[$i231 >> 2] = (HEAP32[$i231 >> 2] | 0) + 1;
   }
   break;
  }
 case 7:
  {
   CSE$6 = HEAP32[$image$addr >> 2] | 0;
   $call285 = _malloc((Math_imul(HEAP32[CSE$6 + 4 >> 2] | 0, HEAP32[CSE$6 + 8 >> 2] | 0) | 0) << 2) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call285;
   HEAP32[$i287 >> 2] = 0;
   HEAP32[$k288 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i287 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0) << 2 | 0)) break L17;
    $conv300 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k288 >> 2] << 4) >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i287 >> 2] | 0) >> 0] = $conv300;
    $conv306 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k288 >> 2] << 4) + 4 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i287 >> 2] | 0) + 1) >> 0] = $conv306;
    $conv313 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k288 >> 2] << 4) + 8 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i287 >> 2] | 0) + 2) >> 0] = $conv313;
    $conv320 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k288 >> 2] << 4) + 12 >> 2]) * Math_fround(255.0)) & 255;
    HEAP8[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i287 >> 2] | 0) + 3) >> 0] = $conv320;
    HEAP32[$i287 >> 2] = (HEAP32[$i287 >> 2] | 0) + 4;
    HEAP32[$k288 >> 2] = (HEAP32[$k288 >> 2] | 0) + 1;
   }
   break;
  }
 case 8:
  {
   CSE$7 = HEAP32[$image$addr >> 2] | 0;
   $call333 = _malloc((Math_imul(HEAP32[CSE$7 + 4 >> 2] | 0, HEAP32[CSE$7 + 8 >> 2] | 0) | 0) << 2) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call333;
   HEAP32[$i335 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i335 >> 2] | 0) >= (Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0)) break L17;
    $mul345 = Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i335 >> 2] << 4) >> 2]) * Math_fround(.298999995));
    $add349 = Math_fround($mul345 + Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i335 >> 2] << 4) + 4 >> 2]) * Math_fround(.587000012)));
    $add353 = Math_fround($add349 + Math_fround(Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i335 >> 2] << 4) + 8 >> 2]) * Math_fround(.114)));
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i335 >> 2] << 2) >> 2] = $add353;
    HEAP32[$i335 >> 2] = (HEAP32[$i335 >> 2] | 0) + 1;
   }
   break;
  }
 case 9:
  {
   CSE$8 = HEAP32[$image$addr >> 2] | 0;
   $call365 = _malloc((Math_imul(HEAP32[CSE$8 + 4 >> 2] | 0, HEAP32[CSE$8 + 8 >> 2] | 0) | 0) * 3 << 2) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call365;
   HEAP32[$i367 >> 2] = 0;
   HEAP32[$k368 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i367 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0) * 3 | 0)) break L17;
    $271 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k368 >> 2] << 4) >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i367 >> 2] << 2) >> 2] = $271;
    $277 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k368 >> 2] << 4) + 4 >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i367 >> 2] | 0) + 1 << 2) >> 2] = $277;
    $283 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k368 >> 2] << 4) + 8 >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i367 >> 2] | 0) + 2 << 2) >> 2] = $283;
    HEAP32[$i367 >> 2] = (HEAP32[$i367 >> 2] | 0) + 3;
    HEAP32[$k368 >> 2] = (HEAP32[$k368 >> 2] | 0) + 1;
   }
   break;
  }
 case 10:
  {
   CSE$9 = HEAP32[$image$addr >> 2] | 0;
   $call401 = _malloc((Math_imul(HEAP32[CSE$9 + 4 >> 2] | 0, HEAP32[CSE$9 + 8 >> 2] | 0) | 0) << 2 << 2) | 0;
   HEAP32[HEAP32[$image$addr >> 2] >> 2] = $call401;
   HEAP32[$i403 >> 2] = 0;
   HEAP32[$k404 >> 2] = 0;
   while (1) {
    if ((HEAP32[$i403 >> 2] | 0) >= ((Math_imul(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) | 0) << 2 | 0)) break L17;
    $301 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k404 >> 2] << 4) >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + (HEAP32[$i403 >> 2] << 2) >> 2] = $301;
    $307 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k404 >> 2] << 4) + 4 >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i403 >> 2] | 0) + 1 << 2) >> 2] = $307;
    $313 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k404 >> 2] << 4) + 8 >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i403 >> 2] | 0) + 2 << 2) >> 2] = $313;
    $319 = Math_fround(HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$k404 >> 2] << 4) + 12 >> 2]);
    HEAPF32[(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0) + ((HEAP32[$i403 >> 2] | 0) + 3 << 2) >> 2] = $319;
    HEAP32[$i403 >> 2] = (HEAP32[$i403 >> 2] | 0) + 4;
    HEAP32[$k404 >> 2] = (HEAP32[$k404 >> 2] | 0) + 1;
   }
   break;
  }
 default:
  {}
 } while (0);
 _free(HEAP32[$pixels >> 2] | 0);
 HEAP32[$pixels >> 2] = 0;
 if ((HEAP32[(HEAP32[$image$addr >> 2] | 0) + 12 >> 2] | 0) <= 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$image$addr >> 2] | 0) + 12 >> 2] = 1;
 if (!(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 _ImageMipmaps(HEAP32[$image$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbir__resample_horizontal_downsample($stbir_info, $output_buffer) {
 $stbir_info = $stbir_info | 0;
 $output_buffer = $output_buffer | 0;
 var $116 = f0, $123 = f0, $130 = f0, $163 = f0, $170 = f0, $177 = f0, $184 = f0, $222 = f0, $43 = f0, $76 = f0, $83 = f0, $arrayidx113 = 0, $arrayidx119 = 0, $arrayidx125 = 0, $arrayidx167 = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx185 = 0, $arrayidx229 = 0, $arrayidx26 = 0, $arrayidx65 = 0, $arrayidx71 = 0, $c = 0, $channels = 0, $coefficient = 0, $coefficient101 = 0, $coefficient155 = 0, $coefficient214 = 0, $coefficient53 = 0, $coefficient_group = 0, $coefficient_group148 = 0, $coefficient_group207 = 0, $coefficient_group46 = 0, $coefficient_group94 = 0, $coefficient_width = 0, $decode_buffer = 0, $filter_pixel_margin = 0, $horizontal_coefficients = 0, $horizontal_contributors = 0, $in_pixel_index = 0, $in_pixel_index145 = 0, $in_pixel_index204 = 0, $in_pixel_index43 = 0, $in_pixel_index91 = 0, $in_x = 0, $in_x143 = 0, $in_x202 = 0, $in_x41 = 0, $in_x89 = 0, $input_w = 0, $k = 0, $max_n = 0, $max_n147 = 0, $max_n206 = 0, $max_n45 = 0, $max_n93 = 0, $max_x = 0, $mul111 = f0, $mul117 = f0, $mul123 = f0, $mul165 = f0, $mul171 = f0, $mul177 = f0, $mul183 = f0, $mul227 = f0, $mul24 = f0, $mul63 = f0, $mul69 = f0, $n0 = 0, $n0137 = 0, $n0196 = 0, $n035 = 0, $n083 = 0, $n1 = 0, $n1140 = 0, $n1199 = 0, $n138 = 0, $n186 = 0, $out_pixel_index = 0, $out_pixel_index153 = 0, $out_pixel_index212 = 0, $out_pixel_index51 = 0, $out_pixel_index99 = 0, $output_buffer$addr = 0, $stbir_info$addr = 0, $x = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $stbir_info$addr = sp + 208 | 0;
 $output_buffer$addr = sp + 204 | 0;
 $x = sp + 200 | 0;
 $k = sp + 196 | 0;
 $input_w = sp + 192 | 0;
 $channels = sp + 188 | 0;
 $decode_buffer = sp + 184 | 0;
 $horizontal_contributors = sp + 180 | 0;
 $horizontal_coefficients = sp + 176 | 0;
 $coefficient_width = sp + 172 | 0;
 $filter_pixel_margin = sp + 168 | 0;
 $max_x = sp + 164 | 0;
 $n0 = sp + 160 | 0;
 $n1 = sp + 156 | 0;
 $in_x = sp + 152 | 0;
 $in_pixel_index = sp + 148 | 0;
 $max_n = sp + 144 | 0;
 $coefficient_group = sp + 140 | 0;
 $out_pixel_index = sp + 136 | 0;
 $coefficient = sp + 132 | 0;
 $n035 = sp + 128 | 0;
 $n138 = sp + 124 | 0;
 $in_x41 = sp + 120 | 0;
 $in_pixel_index43 = sp + 116 | 0;
 $max_n45 = sp + 112 | 0;
 $coefficient_group46 = sp + 108 | 0;
 $out_pixel_index51 = sp + 104 | 0;
 $coefficient53 = sp + 100 | 0;
 $n083 = sp + 96 | 0;
 $n186 = sp + 92 | 0;
 $in_x89 = sp + 88 | 0;
 $in_pixel_index91 = sp + 84 | 0;
 $max_n93 = sp + 80 | 0;
 $coefficient_group94 = sp + 76 | 0;
 $out_pixel_index99 = sp + 72 | 0;
 $coefficient101 = sp + 68 | 0;
 $n0137 = sp + 64 | 0;
 $n1140 = sp + 60 | 0;
 $in_x143 = sp + 56 | 0;
 $in_pixel_index145 = sp + 52 | 0;
 $max_n147 = sp + 48 | 0;
 $coefficient_group148 = sp + 44 | 0;
 $out_pixel_index153 = sp + 40 | 0;
 $coefficient155 = sp + 36 | 0;
 $n0196 = sp + 32 | 0;
 $n1199 = sp + 28 | 0;
 $in_x202 = sp + 24 | 0;
 $in_pixel_index204 = sp + 20 | 0;
 $max_n206 = sp + 16 | 0;
 $coefficient_group207 = sp + 12 | 0;
 $c = sp + 8 | 0;
 $out_pixel_index212 = sp + 4 | 0;
 $coefficient214 = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$output_buffer$addr >> 2] = $output_buffer;
 HEAP32[$input_w >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 4 >> 2];
 HEAP32[$channels >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 64 >> 2];
 HEAP32[$decode_buffer >> 2] = _stbir__get_decode_buffer(HEAP32[$stbir_info$addr >> 2] | 0) | 0;
 HEAP32[$horizontal_contributors >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 100 >> 2];
 HEAP32[$horizontal_coefficients >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 104 >> 2];
 HEAP32[$coefficient_width >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 128 >> 2];
 HEAP32[$filter_pixel_margin >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2];
 HEAP32[$max_x >> 2] = (HEAP32[$input_w >> 2] | 0) + (HEAP32[$filter_pixel_margin >> 2] << 1);
 if (_stbir__use_width_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0) ___assert_fail(13322, 12378, 1536, 13363);
 switch (HEAP32[$channels >> 2] | 0) {
 case 1:
  {
   HEAP32[$x >> 2] = 0;
   L22 : while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) {
     label = 47;
     break;
    }
    HEAP32[$n0 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) >> 2];
    HEAP32[$n1 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) + 4 >> 2];
    HEAP32[$in_x >> 2] = (HEAP32[$x >> 2] | 0) - (HEAP32[$filter_pixel_margin >> 2] | 0);
    HEAP32[$in_pixel_index >> 2] = HEAP32[$in_x >> 2];
    HEAP32[$max_n >> 2] = HEAP32[$n1 >> 2];
    HEAP32[$coefficient_group >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
    HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$max_n >> 2] | 0)) break;
     HEAP32[$out_pixel_index >> 2] = HEAP32[$k >> 2];
     HEAPF32[$coefficient >> 2] = Math_fround(HEAPF32[(HEAP32[$horizontal_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$k >> 2] | 0) - (HEAP32[$n0 >> 2] | 0) << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient >> 2]) != Math_fround(0.0))) {
      label = 9;
      break L22;
     }
     $43 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index >> 2] | 0) + 0 << 2) >> 2]);
     $mul24 = Math_fround($43 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx26 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx26 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx26 >> 2]) + $mul24);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   if ((label | 0) == 9) ___assert_fail(13401, 12378, 1554, 13363); else if ((label | 0) == 47) {
    STACKTOP = sp;
    return;
   }
   break;
  }
 case 2:
  {
   HEAP32[$x >> 2] = 0;
   L34 : while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) {
     label = 47;
     break;
    }
    HEAP32[$n035 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) >> 2];
    HEAP32[$n138 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) + 4 >> 2];
    HEAP32[$in_x41 >> 2] = (HEAP32[$x >> 2] | 0) - (HEAP32[$filter_pixel_margin >> 2] | 0);
    HEAP32[$in_pixel_index43 >> 2] = HEAP32[$in_x41 >> 2] << 1;
    HEAP32[$max_n45 >> 2] = HEAP32[$n138 >> 2];
    HEAP32[$coefficient_group46 >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
    HEAP32[$k >> 2] = HEAP32[$n035 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$max_n45 >> 2] | 0)) break;
     HEAP32[$out_pixel_index51 >> 2] = HEAP32[$k >> 2] << 1;
     HEAPF32[$coefficient53 >> 2] = Math_fround(HEAPF32[(HEAP32[$horizontal_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group46 >> 2] | 0) + (HEAP32[$k >> 2] | 0) - (HEAP32[$n035 >> 2] | 0) << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient53 >> 2]) != Math_fround(0.0))) {
      label = 17;
      break L34;
     }
     $76 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index43 >> 2] | 0) + 0 << 2) >> 2]);
     $mul63 = Math_fround($76 * Math_fround(HEAPF32[$coefficient53 >> 2]));
     $arrayidx65 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index51 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx65 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx65 >> 2]) + $mul63);
     $83 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index43 >> 2] | 0) + 1 << 2) >> 2]);
     $mul69 = Math_fround($83 * Math_fround(HEAPF32[$coefficient53 >> 2]));
     $arrayidx71 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index51 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx71 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx71 >> 2]) + $mul69);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   if ((label | 0) == 17) ___assert_fail(13401, 12378, 1575, 13363); else if ((label | 0) == 47) {
    STACKTOP = sp;
    return;
   }
   break;
  }
 case 3:
  {
   HEAP32[$x >> 2] = 0;
   L46 : while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) {
     label = 47;
     break;
    }
    HEAP32[$n083 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) >> 2];
    HEAP32[$n186 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) + 4 >> 2];
    HEAP32[$in_x89 >> 2] = (HEAP32[$x >> 2] | 0) - (HEAP32[$filter_pixel_margin >> 2] | 0);
    HEAP32[$in_pixel_index91 >> 2] = (HEAP32[$in_x89 >> 2] | 0) * 3;
    HEAP32[$max_n93 >> 2] = HEAP32[$n186 >> 2];
    HEAP32[$coefficient_group94 >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
    HEAP32[$k >> 2] = HEAP32[$n083 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$max_n93 >> 2] | 0)) break;
     HEAP32[$out_pixel_index99 >> 2] = (HEAP32[$k >> 2] | 0) * 3;
     HEAPF32[$coefficient101 >> 2] = Math_fround(HEAPF32[(HEAP32[$horizontal_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group94 >> 2] | 0) + (HEAP32[$k >> 2] | 0) - (HEAP32[$n083 >> 2] | 0) << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient101 >> 2]) != Math_fround(0.0))) {
      label = 25;
      break L46;
     }
     $116 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index91 >> 2] | 0) + 0 << 2) >> 2]);
     $mul111 = Math_fround($116 * Math_fround(HEAPF32[$coefficient101 >> 2]));
     $arrayidx113 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index99 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx113 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx113 >> 2]) + $mul111);
     $123 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index91 >> 2] | 0) + 1 << 2) >> 2]);
     $mul117 = Math_fround($123 * Math_fround(HEAPF32[$coefficient101 >> 2]));
     $arrayidx119 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index99 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx119 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx119 >> 2]) + $mul117);
     $130 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index91 >> 2] | 0) + 2 << 2) >> 2]);
     $mul123 = Math_fround($130 * Math_fround(HEAPF32[$coefficient101 >> 2]));
     $arrayidx125 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index99 >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx125 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx125 >> 2]) + $mul123);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   if ((label | 0) == 25) ___assert_fail(13401, 12378, 1597, 13363); else if ((label | 0) == 47) {
    STACKTOP = sp;
    return;
   }
   break;
  }
 case 4:
  {
   HEAP32[$x >> 2] = 0;
   L58 : while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) {
     label = 47;
     break;
    }
    HEAP32[$n0137 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) >> 2];
    HEAP32[$n1140 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) + 4 >> 2];
    HEAP32[$in_x143 >> 2] = (HEAP32[$x >> 2] | 0) - (HEAP32[$filter_pixel_margin >> 2] | 0);
    HEAP32[$in_pixel_index145 >> 2] = HEAP32[$in_x143 >> 2] << 2;
    HEAP32[$max_n147 >> 2] = HEAP32[$n1140 >> 2];
    HEAP32[$coefficient_group148 >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
    HEAP32[$k >> 2] = HEAP32[$n0137 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$max_n147 >> 2] | 0)) break;
     HEAP32[$out_pixel_index153 >> 2] = HEAP32[$k >> 2] << 2;
     HEAPF32[$coefficient155 >> 2] = Math_fround(HEAPF32[(HEAP32[$horizontal_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group148 >> 2] | 0) + (HEAP32[$k >> 2] | 0) - (HEAP32[$n0137 >> 2] | 0) << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient155 >> 2]) != Math_fround(0.0))) {
      label = 33;
      break L58;
     }
     $163 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index145 >> 2] | 0) + 0 << 2) >> 2]);
     $mul165 = Math_fround($163 * Math_fround(HEAPF32[$coefficient155 >> 2]));
     $arrayidx167 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index153 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx167 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx167 >> 2]) + $mul165);
     $170 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index145 >> 2] | 0) + 1 << 2) >> 2]);
     $mul171 = Math_fround($170 * Math_fround(HEAPF32[$coefficient155 >> 2]));
     $arrayidx173 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index153 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx173 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx173 >> 2]) + $mul171);
     $177 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index145 >> 2] | 0) + 2 << 2) >> 2]);
     $mul177 = Math_fround($177 * Math_fround(HEAPF32[$coefficient155 >> 2]));
     $arrayidx179 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index153 >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx179 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx179 >> 2]) + $mul177);
     $184 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index145 >> 2] | 0) + 3 << 2) >> 2]);
     $mul183 = Math_fround($184 * Math_fround(HEAPF32[$coefficient155 >> 2]));
     $arrayidx185 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index153 >> 2] | 0) + 3 << 2) | 0;
     HEAPF32[$arrayidx185 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx185 >> 2]) + $mul183);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   if ((label | 0) == 33) ___assert_fail(13401, 12378, 1620, 13363); else if ((label | 0) == 47) {
    STACKTOP = sp;
    return;
   }
   break;
  }
 default:
  {
   HEAP32[$x >> 2] = 0;
   L6 : while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$max_x >> 2] | 0)) {
     label = 47;
     break;
    }
    HEAP32[$n0196 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) >> 2];
    HEAP32[$n1199 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) + 4 >> 2];
    HEAP32[$in_x202 >> 2] = (HEAP32[$x >> 2] | 0) - (HEAP32[$filter_pixel_margin >> 2] | 0);
    HEAP32[$in_pixel_index204 >> 2] = Math_imul(HEAP32[$in_x202 >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
    HEAP32[$max_n206 >> 2] = HEAP32[$n1199 >> 2];
    HEAP32[$coefficient_group207 >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
    HEAP32[$k >> 2] = HEAP32[$n0196 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$max_n206 >> 2] | 0)) break;
     HEAP32[$out_pixel_index212 >> 2] = Math_imul(HEAP32[$k >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
     HEAPF32[$coefficient214 >> 2] = Math_fround(HEAPF32[(HEAP32[$horizontal_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group207 >> 2] | 0) + (HEAP32[$k >> 2] | 0) - (HEAP32[$n0196 >> 2] | 0) << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient214 >> 2]) != Math_fround(0.0))) {
      label = 41;
      break L6;
     }
     HEAP32[$c >> 2] = 0;
     while (1) {
      if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
      $222 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index204 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2]);
      $mul227 = Math_fround($222 * Math_fround(HEAPF32[$coefficient214 >> 2]));
      $arrayidx229 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index212 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) | 0;
      HEAPF32[$arrayidx229 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx229 >> 2]) + $mul227);
      HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
     }
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   if ((label | 0) == 41) ___assert_fail(13401, 12378, 1645, 13363); else if ((label | 0) == 47) {
    STACKTOP = sp;
    return;
   }
  }
 }
}

function _free($mem) {
 $mem = $mem | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0312 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0311 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add559 = 0, $and = 0, $and5 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $arrayidx = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx279 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk343 = 0, $bk82 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $dec = 0, $fd311 = 0, $fd322$pre$phiZ2D = 0, $fd347 = 0, $fd56 = 0, $fd620 = 0, $fd67$pre$phiZ2D = 0, $fd86 = 0, $head209 = 0, $head231 = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl573 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $sp$0$i = 0, $sp$0$in$i = 0;
 if (!$mem) return;
 $add$ptr = $mem + -8 | 0;
 $0 = HEAP32[7600] | 0;
 if ($add$ptr >>> 0 < $0 >>> 0) _abort();
 $1 = HEAP32[$mem + -4 >> 2] | 0;
 $and = $1 & 3;
 if (($and | 0) == 1) _abort();
 $and5 = $1 & -8;
 $add$ptr6 = $add$ptr + $and5 | 0;
 L10 : do if (!($1 & 1)) {
  $2 = HEAP32[$add$ptr >> 2] | 0;
  if (!$and) return;
  $add$ptr16 = $add$ptr + (0 - $2) | 0;
  $add17 = $2 + $and5 | 0;
  if ($add$ptr16 >>> 0 < $0 >>> 0) _abort();
  if ((HEAP32[7601] | 0) == ($add$ptr16 | 0)) {
   $head209 = $add$ptr6 + 4 | 0;
   $27 = HEAP32[$head209 >> 2] | 0;
   if (($27 & 3 | 0) != 3) {
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
   HEAP32[7598] = $add17;
   HEAP32[$head209 >> 2] = $27 & -2;
   HEAP32[$add$ptr16 + 4 >> 2] = $add17 | 1;
   HEAP32[$add$ptr16 + $add17 >> 2] = $add17;
   return;
  }
  $shr = $2 >>> 3;
  if ($2 >>> 0 < 256) {
   $4 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   $5 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
   $arrayidx = 30424 + ($shr << 1 << 2) | 0;
   if (($4 | 0) != ($arrayidx | 0)) {
    if ($0 >>> 0 > $4 >>> 0) _abort();
    if ((HEAP32[$4 + 12 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   }
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[7596] = HEAP32[7596] & ~(1 << $shr);
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
   if (($5 | 0) == ($arrayidx | 0)) $fd67$pre$phiZ2D = $5 + 8 | 0; else {
    if ($0 >>> 0 > $5 >>> 0) _abort();
    $fd56 = $5 + 8 | 0;
    if ((HEAP32[$fd56 >> 2] | 0) == ($add$ptr16 | 0)) $fd67$pre$phiZ2D = $fd56; else _abort();
   }
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$fd67$pre$phiZ2D >> 2] = $4;
   $28 = $add$ptr16;
   $p$1 = $add$ptr16;
   $psize$1 = $add17;
   break;
  }
  $9 = HEAP32[$add$ptr16 + 24 >> 2] | 0;
  $10 = HEAP32[$add$ptr16 + 12 >> 2] | 0;
  do if (($10 | 0) == ($add$ptr16 | 0)) {
   $child = $add$ptr16 + 16 | 0;
   $arrayidx99 = $child + 4 | 0;
   $14 = HEAP32[$arrayidx99 >> 2] | 0;
   if (!$14) {
    $15 = HEAP32[$child >> 2] | 0;
    if (!$15) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $15;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $14;
    $RP$1$ph = $arrayidx99;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx108 = $R$1 + 20 | 0;
    $16 = HEAP32[$arrayidx108 >> 2] | 0;
    if (!$16) {
     $arrayidx113 = $R$1 + 16 | 0;
     $17 = HEAP32[$arrayidx113 >> 2] | 0;
     if (!$17) break; else {
      $R$1$be = $17;
      $RP$1$be = $arrayidx113;
     }
    } else {
     $R$1$be = $16;
     $RP$1$be = $arrayidx108;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($0 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $11 = HEAP32[$add$ptr16 + 8 >> 2] | 0;
   if ($0 >>> 0 > $11 >>> 0) _abort();
   $bk82 = $11 + 12 | 0;
   if ((HEAP32[$bk82 >> 2] | 0) != ($add$ptr16 | 0)) _abort();
   $fd86 = $10 + 8 | 0;
   if ((HEAP32[$fd86 >> 2] | 0) == ($add$ptr16 | 0)) {
    HEAP32[$bk82 >> 2] = $10;
    HEAP32[$fd86 >> 2] = $11;
    $R$3 = $10;
    break;
   } else _abort();
  } while (0);
  if (!$9) {
   $28 = $add$ptr16;
   $p$1 = $add$ptr16;
   $psize$1 = $add17;
  } else {
   $18 = HEAP32[$add$ptr16 + 28 >> 2] | 0;
   $arrayidx130 = 30688 + ($18 << 2) | 0;
   do if ((HEAP32[$arrayidx130 >> 2] | 0) == ($add$ptr16 | 0)) {
    HEAP32[$arrayidx130 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[7597] = HEAP32[7597] & ~(1 << $18);
     $28 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break L10;
    }
   } else if ((HEAP32[7600] | 0) >>> 0 > $9 >>> 0) _abort(); else {
    $arrayidx149 = $9 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx149 >> 2] | 0) == ($add$ptr16 | 0) ? $arrayidx149 : $9 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) {
     $28 = $add$ptr16;
     $p$1 = $add$ptr16;
     $psize$1 = $add17;
     break L10;
    } else break;
   } while (0);
   $23 = HEAP32[7600] | 0;
   if ($23 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $9;
   $child171 = $add$ptr16 + 16 | 0;
   $24 = HEAP32[$child171 >> 2] | 0;
   do if ($24 | 0) if ($23 >>> 0 > $24 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $24;
    HEAP32[$24 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $25 = HEAP32[$child171 + 4 >> 2] | 0;
   if (!$25) {
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
   } else if ((HEAP32[7600] | 0) >>> 0 > $25 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $25;
    HEAP32[$25 + 24 >> 2] = $R$3;
    $28 = $add$ptr16;
    $p$1 = $add$ptr16;
    $psize$1 = $add17;
    break;
   }
  }
 } else {
  $28 = $add$ptr;
  $p$1 = $add$ptr;
  $psize$1 = $and5;
 } while (0);
 if ($28 >>> 0 >= $add$ptr6 >>> 0) _abort();
 $head231 = $add$ptr6 + 4 | 0;
 $29 = HEAP32[$head231 >> 2] | 0;
 if (!($29 & 1)) _abort();
 if (!($29 & 2)) {
  if ((HEAP32[7602] | 0) == ($add$ptr6 | 0)) {
   $add246 = (HEAP32[7599] | 0) + $psize$1 | 0;
   HEAP32[7599] = $add246;
   HEAP32[7602] = $p$1;
   HEAP32[$p$1 + 4 >> 2] = $add246 | 1;
   if (($p$1 | 0) != (HEAP32[7601] | 0)) return;
   HEAP32[7601] = 0;
   HEAP32[7598] = 0;
   return;
  }
  if ((HEAP32[7601] | 0) == ($add$ptr6 | 0)) {
   $add258 = (HEAP32[7598] | 0) + $psize$1 | 0;
   HEAP32[7598] = $add258;
   HEAP32[7601] = $28;
   HEAP32[$p$1 + 4 >> 2] = $add258 | 1;
   HEAP32[$28 + $add258 >> 2] = $add258;
   return;
  }
  $add267 = ($29 & -8) + $psize$1 | 0;
  $shr268 = $29 >>> 3;
  L111 : do if ($29 >>> 0 < 256) {
   $35 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
   $36 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   $arrayidx279 = 30424 + ($shr268 << 1 << 2) | 0;
   if (($35 | 0) != ($arrayidx279 | 0)) {
    if ((HEAP32[7600] | 0) >>> 0 > $35 >>> 0) _abort();
    if ((HEAP32[$35 + 12 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
   }
   if (($36 | 0) == ($35 | 0)) {
    HEAP32[7596] = HEAP32[7596] & ~(1 << $shr268);
    break;
   }
   if (($36 | 0) == ($arrayidx279 | 0)) $fd322$pre$phiZ2D = $36 + 8 | 0; else {
    if ((HEAP32[7600] | 0) >>> 0 > $36 >>> 0) _abort();
    $fd311 = $36 + 8 | 0;
    if ((HEAP32[$fd311 >> 2] | 0) == ($add$ptr6 | 0)) $fd322$pre$phiZ2D = $fd311; else _abort();
   }
   HEAP32[$35 + 12 >> 2] = $36;
   HEAP32[$fd322$pre$phiZ2D >> 2] = $35;
  } else {
   $42 = HEAP32[$add$ptr6 + 24 >> 2] | 0;
   $43 = HEAP32[$add$ptr6 + 12 >> 2] | 0;
   do if (($43 | 0) == ($add$ptr6 | 0)) {
    $child361 = $add$ptr6 + 16 | 0;
    $arrayidx362 = $child361 + 4 | 0;
    $48 = HEAP32[$arrayidx362 >> 2] | 0;
    if (!$48) {
     $49 = HEAP32[$child361 >> 2] | 0;
     if (!$49) {
      $R332$3 = 0;
      break;
     } else {
      $R332$1$ph = $49;
      $RP360$1$ph = $child361;
     }
    } else {
     $R332$1$ph = $48;
     $RP360$1$ph = $arrayidx362;
    }
    $R332$1 = $R332$1$ph;
    $RP360$1 = $RP360$1$ph;
    while (1) {
     $arrayidx374 = $R332$1 + 20 | 0;
     $50 = HEAP32[$arrayidx374 >> 2] | 0;
     if (!$50) {
      $arrayidx379 = $R332$1 + 16 | 0;
      $51 = HEAP32[$arrayidx379 >> 2] | 0;
      if (!$51) break; else {
       $R332$1$be = $51;
       $RP360$1$be = $arrayidx379;
      }
     } else {
      $R332$1$be = $50;
      $RP360$1$be = $arrayidx374;
     }
     $R332$1 = $R332$1$be;
     $RP360$1 = $RP360$1$be;
    }
    if ((HEAP32[7600] | 0) >>> 0 > $RP360$1 >>> 0) _abort(); else {
     HEAP32[$RP360$1 >> 2] = 0;
     $R332$3 = $R332$1;
     break;
    }
   } else {
    $44 = HEAP32[$add$ptr6 + 8 >> 2] | 0;
    if ((HEAP32[7600] | 0) >>> 0 > $44 >>> 0) _abort();
    $bk343 = $44 + 12 | 0;
    if ((HEAP32[$bk343 >> 2] | 0) != ($add$ptr6 | 0)) _abort();
    $fd347 = $43 + 8 | 0;
    if ((HEAP32[$fd347 >> 2] | 0) == ($add$ptr6 | 0)) {
     HEAP32[$bk343 >> 2] = $43;
     HEAP32[$fd347 >> 2] = $44;
     $R332$3 = $43;
     break;
    } else _abort();
   } while (0);
   if ($42 | 0) {
    $53 = HEAP32[$add$ptr6 + 28 >> 2] | 0;
    $arrayidx400 = 30688 + ($53 << 2) | 0;
    do if ((HEAP32[$arrayidx400 >> 2] | 0) == ($add$ptr6 | 0)) {
     HEAP32[$arrayidx400 >> 2] = $R332$3;
     if (!$R332$3) {
      HEAP32[7597] = HEAP32[7597] & ~(1 << $53);
      break L111;
     }
    } else if ((HEAP32[7600] | 0) >>> 0 > $42 >>> 0) _abort(); else {
     $arrayidx419 = $42 + 16 | 0;
     HEAP32[((HEAP32[$arrayidx419 >> 2] | 0) == ($add$ptr6 | 0) ? $arrayidx419 : $42 + 20 | 0) >> 2] = $R332$3;
     if (!$R332$3) break L111; else break;
    } while (0);
    $58 = HEAP32[7600] | 0;
    if ($58 >>> 0 > $R332$3 >>> 0) _abort();
    HEAP32[$R332$3 + 24 >> 2] = $42;
    $child443 = $add$ptr6 + 16 | 0;
    $59 = HEAP32[$child443 >> 2] | 0;
    do if ($59 | 0) if ($58 >>> 0 > $59 >>> 0) _abort(); else {
     HEAP32[$R332$3 + 16 >> 2] = $59;
     HEAP32[$59 + 24 >> 2] = $R332$3;
     break;
    } while (0);
    $60 = HEAP32[$child443 + 4 >> 2] | 0;
    if ($60 | 0) if ((HEAP32[7600] | 0) >>> 0 > $60 >>> 0) _abort(); else {
     HEAP32[$R332$3 + 20 >> 2] = $60;
     HEAP32[$60 + 24 >> 2] = $R332$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$1 + 4 >> 2] = $add267 | 1;
  HEAP32[$28 + $add267 >> 2] = $add267;
  if (($p$1 | 0) == (HEAP32[7601] | 0)) {
   HEAP32[7598] = $add267;
   return;
  } else $psize$2 = $add267;
 } else {
  HEAP32[$head231 >> 2] = $29 & -2;
  HEAP32[$p$1 + 4 >> 2] = $psize$1 | 1;
  HEAP32[$28 + $psize$1 >> 2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 if ($psize$2 >>> 0 < 256) {
  $arrayidx509 = 30424 + ($shr501 << 1 << 2) | 0;
  $63 = HEAP32[7596] | 0;
  $shl511 = 1 << $shr501;
  if (!($63 & $shl511)) {
   HEAP32[7596] = $63 | $shl511;
   $$pre$phiZ2D = $arrayidx509 + 8 | 0;
   $F510$0 = $arrayidx509;
  } else {
   $64 = $arrayidx509 + 8 | 0;
   $65 = HEAP32[$64 >> 2] | 0;
   if ((HEAP32[7600] | 0) >>> 0 > $65 >>> 0) _abort(); else {
    $$pre$phiZ2D = $64;
    $F510$0 = $65;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$1;
  HEAP32[$F510$0 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $F510$0;
  HEAP32[$p$1 + 12 >> 2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 if (!$shr535) $I534$0 = 0; else if ($psize$2 >>> 0 > 16777215) $I534$0 = 31; else {
  $and545 = ($shr535 + 1048320 | 0) >>> 16 & 8;
  $shl546 = $shr535 << $and545;
  $and549 = ($shl546 + 520192 | 0) >>> 16 & 4;
  $shl551 = $shl546 << $and549;
  $and554 = ($shl551 + 245760 | 0) >>> 16 & 2;
  $add559 = 14 - ($and549 | $and545 | $and554) + ($shl551 << $and554 >>> 15) | 0;
  $I534$0 = $psize$2 >>> ($add559 + 7 | 0) & 1 | $add559 << 1;
 }
 $arrayidx567 = 30688 + ($I534$0 << 2) | 0;
 HEAP32[$p$1 + 28 >> 2] = $I534$0;
 HEAP32[$p$1 + 20 >> 2] = 0;
 HEAP32[$p$1 + 16 >> 2] = 0;
 $67 = HEAP32[7597] | 0;
 $shl573 = 1 << $I534$0;
 L197 : do if (!($67 & $shl573)) {
  HEAP32[7597] = $67 | $shl573;
  HEAP32[$arrayidx567 >> 2] = $p$1;
  HEAP32[$p$1 + 24 >> 2] = $arrayidx567;
  HEAP32[$p$1 + 12 >> 2] = $p$1;
  HEAP32[$p$1 + 8 >> 2] = $p$1;
 } else {
  $68 = HEAP32[$arrayidx567 >> 2] | 0;
  L200 : do if ((HEAP32[$68 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) $T$0$lcssa = $68; else {
   $K583$0312 = $psize$2 << (($I534$0 | 0) == 31 ? 0 : 25 - ($I534$0 >>> 1) | 0);
   $T$0311 = $68;
   while (1) {
    $arrayidx599 = $T$0311 + 16 + ($K583$0312 >>> 31 << 2) | 0;
    $70 = HEAP32[$arrayidx599 >> 2] | 0;
    if (!$70) break;
    if ((HEAP32[$70 + 4 >> 2] & -8 | 0) == ($psize$2 | 0)) {
     $T$0$lcssa = $70;
     break L200;
    } else {
     $K583$0312 = $K583$0312 << 1;
     $T$0311 = $70;
    }
   }
   if ((HEAP32[7600] | 0) >>> 0 > $arrayidx599 >>> 0) _abort(); else {
    HEAP32[$arrayidx599 >> 2] = $p$1;
    HEAP32[$p$1 + 24 >> 2] = $T$0311;
    HEAP32[$p$1 + 12 >> 2] = $p$1;
    HEAP32[$p$1 + 8 >> 2] = $p$1;
    break L197;
   }
  } while (0);
  $fd620 = $T$0$lcssa + 8 | 0;
  $73 = HEAP32[$fd620 >> 2] | 0;
  $74 = HEAP32[7600] | 0;
  if ($74 >>> 0 <= $73 >>> 0 & $74 >>> 0 <= $T$0$lcssa >>> 0) {
   HEAP32[$73 + 12 >> 2] = $p$1;
   HEAP32[$fd620 >> 2] = $p$1;
   HEAP32[$p$1 + 8 >> 2] = $73;
   HEAP32[$p$1 + 12 >> 2] = $T$0$lcssa;
   HEAP32[$p$1 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $dec = (HEAP32[7604] | 0) + -1 | 0;
 HEAP32[7604] = $dec;
 if ($dec | 0) return;
 $sp$0$in$i = 30840;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[7604] = -1;
 return;
}

function _stbir__resample_horizontal_upsample($stbir_info, $output_buffer) {
 $stbir_info = $stbir_info | 0;
 $output_buffer = $output_buffer | 0;
 var $101 = f0, $108 = f0, $118 = 0, $119 = 0, $120 = 0, $125 = f0, $132 = f0, $139 = f0, $146 = f0, $157 = 0, $158 = 0, $159 = 0, $167 = f0, $46 = 0, $47 = 0, $48 = 0, $53 = f0, $63 = 0, $64 = 0, $65 = 0, $70 = f0, $77 = f0, $87 = 0, $88 = 0, $89 = 0, $94 = f0, $arrayidx102 = 0, $arrayidx108 = 0, $arrayidx131 = 0, $arrayidx137 = 0, $arrayidx143 = 0, $arrayidx149 = 0, $arrayidx174 = 0, $arrayidx46 = 0, $arrayidx67 = 0, $arrayidx73 = 0, $arrayidx96 = 0, $c = 0, $channels = 0, $coefficient = 0, $coefficient119 = 0, $coefficient159 = 0, $coefficient55 = 0, $coefficient84 = 0, $coefficient_counter = 0, $coefficient_group = 0, $coefficient_width = 0, $decode_buffer = 0, $horizontal_coefficients = 0, $horizontal_contributors = 0, $in_pixel_index = 0, $in_pixel_index117 = 0, $in_pixel_index157 = 0, $in_pixel_index53 = 0, $in_pixel_index82 = 0, $k = 0, $mul100 = f0, $mul106 = f0, $mul129 = f0, $mul135 = f0, $mul141 = f0, $mul147 = f0, $mul172 = f0, $mul44 = f0, $mul65 = f0, $mul71 = f0, $mul94 = f0, $n0 = 0, $n1 = 0, $out_pixel_index = 0, $output_buffer$addr = 0, $output_w = 0, $stbir_info$addr = 0, $x = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $stbir_info$addr = sp + 100 | 0;
 $output_buffer$addr = sp + 96 | 0;
 $x = sp + 92 | 0;
 $k = sp + 88 | 0;
 $output_w = sp + 84 | 0;
 $channels = sp + 80 | 0;
 $decode_buffer = sp + 76 | 0;
 $horizontal_contributors = sp + 72 | 0;
 $horizontal_coefficients = sp + 68 | 0;
 $coefficient_width = sp + 64 | 0;
 $n0 = sp + 60 | 0;
 $n1 = sp + 56 | 0;
 $out_pixel_index = sp + 52 | 0;
 $coefficient_group = sp + 48 | 0;
 $coefficient_counter = sp + 44 | 0;
 $in_pixel_index = sp + 40 | 0;
 $coefficient = sp + 36 | 0;
 $in_pixel_index53 = sp + 32 | 0;
 $coefficient55 = sp + 28 | 0;
 $in_pixel_index82 = sp + 24 | 0;
 $coefficient84 = sp + 20 | 0;
 $in_pixel_index117 = sp + 16 | 0;
 $coefficient119 = sp + 12 | 0;
 $in_pixel_index157 = sp + 8 | 0;
 $coefficient159 = sp + 4 | 0;
 $c = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$output_buffer$addr >> 2] = $output_buffer;
 HEAP32[$output_w >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 20 >> 2];
 HEAP32[$channels >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 64 >> 2];
 HEAP32[$decode_buffer >> 2] = _stbir__get_decode_buffer(HEAP32[$stbir_info$addr >> 2] | 0) | 0;
 HEAP32[$horizontal_contributors >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 100 >> 2];
 HEAP32[$horizontal_coefficients >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 104 >> 2];
 HEAP32[$coefficient_width >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 128 >> 2];
 HEAP32[$x >> 2] = 0;
 L1 : while (1) {
  if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) {
   label = 43;
   break;
  }
  HEAP32[$n0 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) >> 2];
  HEAP32[$n1 >> 2] = HEAP32[(HEAP32[$horizontal_contributors >> 2] | 0) + (HEAP32[$x >> 2] << 3) + 4 >> 2];
  HEAP32[$out_pixel_index >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
  HEAP32[$coefficient_group >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$x >> 2] | 0) | 0;
  HEAP32[$coefficient_counter >> 2] = 0;
  if ((HEAP32[$n1 >> 2] | 0) < (HEAP32[$n0 >> 2] | 0)) {
   label = 4;
   break;
  }
  if ((HEAP32[$n0 >> 2] | 0) < (0 - (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0) | 0)) {
   label = 6;
   break;
  }
  if ((HEAP32[$n1 >> 2] | 0) < (0 - (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0) | 0)) {
   label = 8;
   break;
  }
  if ((HEAP32[$n0 >> 2] | 0) >= ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0) | 0)) {
   label = 10;
   break;
  }
  if ((HEAP32[$n1 >> 2] | 0) >= ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 4 >> 2] | 0) + (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 144 >> 2] | 0) | 0)) {
   label = 12;
   break;
  }
  L9 : do switch (HEAP32[$channels >> 2] | 0) {
  case 1:
   {
    HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break L9;
     HEAP32[$in_pixel_index >> 2] = HEAP32[$k >> 2];
     $46 = HEAP32[$horizontal_coefficients >> 2] | 0;
     $47 = HEAP32[$coefficient_group >> 2] | 0;
     $48 = HEAP32[$coefficient_counter >> 2] | 0;
     HEAP32[$coefficient_counter >> 2] = $48 + 1;
     HEAPF32[$coefficient >> 2] = Math_fround(HEAPF32[$46 + ($47 + $48 << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient >> 2]) != Math_fround(0.0))) {
      label = 17;
      break L1;
     }
     $53 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index >> 2] | 0) + 0 << 2) >> 2]);
     $mul44 = Math_fround($53 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx46 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx46 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx46 >> 2]) + $mul44);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    break;
   }
  case 2:
   {
    HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break L9;
     HEAP32[$in_pixel_index53 >> 2] = HEAP32[$k >> 2] << 1;
     $63 = HEAP32[$horizontal_coefficients >> 2] | 0;
     $64 = HEAP32[$coefficient_group >> 2] | 0;
     $65 = HEAP32[$coefficient_counter >> 2] | 0;
     HEAP32[$coefficient_counter >> 2] = $65 + 1;
     HEAPF32[$coefficient55 >> 2] = Math_fround(HEAPF32[$63 + ($64 + $65 << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient55 >> 2]) != Math_fround(0.0))) {
      label = 22;
      break L1;
     }
     $70 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index53 >> 2] | 0) + 0 << 2) >> 2]);
     $mul65 = Math_fround($70 * Math_fround(HEAPF32[$coefficient55 >> 2]));
     $arrayidx67 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx67 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx67 >> 2]) + $mul65);
     $77 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index53 >> 2] | 0) + 1 << 2) >> 2]);
     $mul71 = Math_fround($77 * Math_fround(HEAPF32[$coefficient55 >> 2]));
     $arrayidx73 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx73 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx73 >> 2]) + $mul71);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    break;
   }
  case 3:
   {
    HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break L9;
     HEAP32[$in_pixel_index82 >> 2] = (HEAP32[$k >> 2] | 0) * 3;
     $87 = HEAP32[$horizontal_coefficients >> 2] | 0;
     $88 = HEAP32[$coefficient_group >> 2] | 0;
     $89 = HEAP32[$coefficient_counter >> 2] | 0;
     HEAP32[$coefficient_counter >> 2] = $89 + 1;
     HEAPF32[$coefficient84 >> 2] = Math_fround(HEAPF32[$87 + ($88 + $89 << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient84 >> 2]) != Math_fround(0.0))) {
      label = 27;
      break L1;
     }
     $94 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index82 >> 2] | 0) + 0 << 2) >> 2]);
     $mul94 = Math_fround($94 * Math_fround(HEAPF32[$coefficient84 >> 2]));
     $arrayidx96 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx96 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx96 >> 2]) + $mul94);
     $101 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index82 >> 2] | 0) + 1 << 2) >> 2]);
     $mul100 = Math_fround($101 * Math_fround(HEAPF32[$coefficient84 >> 2]));
     $arrayidx102 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx102 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx102 >> 2]) + $mul100);
     $108 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index82 >> 2] | 0) + 2 << 2) >> 2]);
     $mul106 = Math_fround($108 * Math_fround(HEAPF32[$coefficient84 >> 2]));
     $arrayidx108 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx108 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx108 >> 2]) + $mul106);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    break;
   }
  case 4:
   {
    HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break L9;
     HEAP32[$in_pixel_index117 >> 2] = HEAP32[$k >> 2] << 2;
     $118 = HEAP32[$horizontal_coefficients >> 2] | 0;
     $119 = HEAP32[$coefficient_group >> 2] | 0;
     $120 = HEAP32[$coefficient_counter >> 2] | 0;
     HEAP32[$coefficient_counter >> 2] = $120 + 1;
     HEAPF32[$coefficient119 >> 2] = Math_fround(HEAPF32[$118 + ($119 + $120 << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient119 >> 2]) != Math_fround(0.0))) {
      label = 32;
      break L1;
     }
     $125 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index117 >> 2] | 0) + 0 << 2) >> 2]);
     $mul129 = Math_fround($125 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx131 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx131 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx131 >> 2]) + $mul129);
     $132 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index117 >> 2] | 0) + 1 << 2) >> 2]);
     $mul135 = Math_fround($132 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx137 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx137 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx137 >> 2]) + $mul135);
     $139 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index117 >> 2] | 0) + 2 << 2) >> 2]);
     $mul141 = Math_fround($139 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx143 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx143 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx143 >> 2]) + $mul141);
     $146 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index117 >> 2] | 0) + 3 << 2) >> 2]);
     $mul147 = Math_fround($146 * Math_fround(HEAPF32[$coefficient119 >> 2]));
     $arrayidx149 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + 3 << 2) | 0;
     HEAPF32[$arrayidx149 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx149 >> 2]) + $mul147);
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
    break;
   }
  default:
   {
    HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
    while (1) {
     if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break L9;
     HEAP32[$in_pixel_index157 >> 2] = Math_imul(HEAP32[$k >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
     $157 = HEAP32[$horizontal_coefficients >> 2] | 0;
     $158 = HEAP32[$coefficient_group >> 2] | 0;
     $159 = HEAP32[$coefficient_counter >> 2] | 0;
     HEAP32[$coefficient_counter >> 2] = $159 + 1;
     HEAPF32[$coefficient159 >> 2] = Math_fround(HEAPF32[$157 + ($158 + $159 << 2) >> 2]);
     if (!(Math_fround(HEAPF32[$coefficient159 >> 2]) != Math_fround(0.0))) {
      label = 37;
      break L1;
     }
     HEAP32[$c >> 2] = 0;
     while (1) {
      if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
      $167 = Math_fround(HEAPF32[(HEAP32[$decode_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index157 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2]);
      $mul172 = Math_fround($167 * Math_fround(HEAPF32[$coefficient159 >> 2]));
      $arrayidx174 = (HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$out_pixel_index >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) | 0;
      HEAPF32[$arrayidx174 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx174 >> 2]) + $mul172);
      HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
     }
     HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
    }
   }
  } while (0);
  HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
 }
 switch (label | 0) {
 case 4:
  {
   ___assert_fail(13418, 12378, 1460, 13427);
   break;
  }
 case 6:
  {
   ___assert_fail(13463, 12378, 1461, 13427);
   break;
  }
 case 8:
  {
   ___assert_fail(13513, 12378, 1462, 13427);
   break;
  }
 case 10:
  {
   ___assert_fail(13563, 12378, 1463, 13427);
   break;
  }
 case 12:
  {
   ___assert_fail(13633, 12378, 1464, 13427);
   break;
  }
 case 17:
  {
   ___assert_fail(13401, 12378, 1472, 13427);
   break;
  }
 case 22:
  {
   ___assert_fail(13401, 12378, 1481, 13427);
   break;
  }
 case 27:
  {
   ___assert_fail(13401, 12378, 1491, 13427);
   break;
  }
 case 32:
  {
   ___assert_fail(13401, 12378, 1502, 13427);
   break;
  }
 case 37:
  {
   ___assert_fail(13401, 12378, 1515, 13427);
   break;
  }
 case 43:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function _stbir__encode_scanline($stbir_info, $num_pixels, $output_buffer, $encode_buffer, $channels, $alpha_channel, $decode) {
 $stbir_info = $stbir_info | 0;
 $num_pixels = $num_pixels | 0;
 $output_buffer = $output_buffer | 0;
 $encode_buffer = $encode_buffer | 0;
 $channels = $channels | 0;
 $alpha_channel = $alpha_channel | 0;
 $decode = $decode | 0;
 var $16 = f0, $163 = f0, $188 = f0, $30 = 0, $alpha = 0, $alpha_channel$addr = 0, $arrayidx8 = 0, $call269 = f0, $call68 = 0, $channels$addr = 0, $cond = f0, $conv = 0, $conv110 = 0, $conv140 = 0, $conv156 = 0, $conv181 = 0, $conv210 = 0, $conv225 = 0, $conv44 = 0, $conv84 = 0, $decode$addr = 0, $encode_buffer$addr = 0, $index = 0, $index102 = 0, $index129 = 0, $index174 = 0, $index200 = 0, $index243 = 0, $index264 = 0, $index63 = 0, $n = 0, $nonalpha = 0, $num_nonalpha = 0, $num_pixels$addr = 0, $output_buffer$addr = 0, $pixel_index = 0, $pixel_index123 = 0, $pixel_index168 = 0, $pixel_index194 = 0, $pixel_index237 = 0, $pixel_index258 = 0, $pixel_index32 = 0, $pixel_index57 = 0, $pixel_index96 = 0, $reciprocal_alpha = 0, $stbir_info$addr = 0, $x = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $stbir_info$addr = sp + 240 | 0;
 $num_pixels$addr = sp + 236 | 0;
 $output_buffer$addr = sp + 232 | 0;
 $encode_buffer$addr = sp + 228 | 0;
 $channels$addr = sp + 224 | 0;
 $alpha_channel$addr = sp + 220 | 0;
 $decode$addr = sp + 216 | 0;
 $x = sp + 212 | 0;
 $n = sp + 208 | 0;
 $num_nonalpha = sp + 204 | 0;
 $nonalpha = sp;
 $pixel_index = sp + 200 | 0;
 $alpha = sp + 196 | 0;
 $reciprocal_alpha = sp + 192 | 0;
 $pixel_index32 = sp + 188 | 0;
 $index = sp + 184 | 0;
 $pixel_index57 = sp + 180 | 0;
 $index63 = sp + 176 | 0;
 $pixel_index96 = sp + 172 | 0;
 $index102 = sp + 168 | 0;
 $pixel_index123 = sp + 164 | 0;
 $index129 = sp + 160 | 0;
 $pixel_index168 = sp + 156 | 0;
 $index174 = sp + 152 | 0;
 $pixel_index194 = sp + 148 | 0;
 $index200 = sp + 144 | 0;
 $pixel_index237 = sp + 140 | 0;
 $index243 = sp + 136 | 0;
 $pixel_index258 = sp + 132 | 0;
 $index264 = sp + 128 | 0;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$num_pixels$addr >> 2] = $num_pixels;
 HEAP32[$output_buffer$addr >> 2] = $output_buffer;
 HEAP32[$encode_buffer$addr >> 2] = $encode_buffer;
 HEAP32[$channels$addr >> 2] = $channels;
 HEAP32[$alpha_channel$addr >> 2] = $alpha_channel;
 HEAP32[$decode$addr >> 2] = $decode;
 L1 : do if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 1)) {
  HEAP32[$x >> 2] = 0;
  while (1) {
   if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break L1;
   HEAP32[$pixel_index >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
   HEAPF32[$alpha >> 2] = Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2]);
   if (Math_fround(HEAPF32[$alpha >> 2]) != Math_fround(0.0)) $cond = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$alpha >> 2])); else $cond = Math_fround(0.0);
   HEAPF32[$reciprocal_alpha >> 2] = $cond;
   HEAP32[$n >> 2] = 0;
   while (1) {
    if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$channels$addr >> 2] | 0)) break;
    if ((HEAP32[$n >> 2] | 0) != (HEAP32[$alpha_channel$addr >> 2] | 0)) {
     $16 = Math_fround(HEAPF32[$reciprocal_alpha >> 2]);
     $arrayidx8 = (HEAP32[$encode_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index >> 2] | 0) + (HEAP32[$n >> 2] | 0) << 2) | 0;
     HEAPF32[$arrayidx8 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx8 >> 2]) * $16);
    }
    HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
   }
   HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[$x >> 2] = 0;
 HEAP32[$num_nonalpha >> 2] = 0;
 while (1) {
  if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$channels$addr >> 2] | 0)) break;
  if ((HEAP32[$x >> 2] | 0) != (HEAP32[$alpha_channel$addr >> 2] | 0)) label = 16; else if (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2 | 0) label = 16;
  if ((label | 0) == 16) {
   label = 0;
   $conv = HEAP32[$x >> 2] & 65535;
   $30 = HEAP32[$num_nonalpha >> 2] | 0;
   HEAP32[$num_nonalpha >> 2] = $30 + 1;
   HEAP16[$nonalpha + ($30 << 1) >> 1] = $conv;
  }
  HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
 }
 switch (HEAP32[$decode$addr >> 2] | 0) {
 case 0:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index32 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$channels$addr >> 2] | 0)) break;
     HEAP32[$index >> 2] = (HEAP32[$pixel_index32 >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     $conv44 = ~~(+Math_fround(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index >> 2] << 2) >> 2]))) * Math_fround(255.0)) + .5) & 255;
     HEAP8[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index >> 2] | 0) >> 0] = $conv44;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 1:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index57 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$num_nonalpha >> 2] | 0)) break;
     HEAP32[$index63 >> 2] = (HEAP32[$pixel_index57 >> 2] | 0) + (HEAPU16[$nonalpha + (HEAP32[$n >> 2] << 1) >> 1] | 0);
     $call68 = _stbir__linear_to_srgb_uchar(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index63 >> 2] << 2) >> 2])) | 0;
     HEAP8[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index63 >> 2] | 0) >> 0] = $call68;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $conv84 = ~~(+Math_fround(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index57 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2]))) * Math_fround(255.0)) + .5) & 255;
     HEAP8[(HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index57 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0)) >> 0] = $conv84;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index96 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$channels$addr >> 2] | 0)) break;
     HEAP32[$index102 >> 2] = (HEAP32[$pixel_index96 >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     $conv110 = ~~(+Math_fround(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index102 >> 2] << 2) >> 2]))) * Math_fround(65535.0)) + .5) & 65535;
     HEAP16[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index102 >> 2] << 1) >> 1] = $conv110;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index123 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$num_nonalpha >> 2] | 0)) break;
     HEAP32[$index129 >> 2] = (HEAP32[$pixel_index123 >> 2] | 0) + (HEAPU16[$nonalpha + (HEAP32[$n >> 2] << 1) >> 1] | 0);
     $conv140 = ~~(+Math_fround(Math_fround(_stbir__linear_to_srgb(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index129 >> 2] << 2) >> 2]))))) * Math_fround(65535.0)) + .5) & 65535;
     HEAP16[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index129 >> 2] << 1) >> 1] = $conv140;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $conv156 = ~~(+Math_fround(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index123 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2]))) * Math_fround(65535.0)) + .5) & 65535;
     HEAP16[(HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index123 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 1) >> 1] = $conv156;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index168 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$channels$addr >> 2] | 0)) break;
     HEAP32[$index174 >> 2] = (HEAP32[$pixel_index168 >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     $conv181 = ~~(+Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index174 >> 2] << 2) >> 2]))) * 4294967295.0 + .5) >>> 0;
     HEAP32[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index174 >> 2] << 2) >> 2] = $conv181;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 5:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index194 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$num_nonalpha >> 2] | 0)) break;
     HEAP32[$index200 >> 2] = (HEAP32[$pixel_index194 >> 2] | 0) + (HEAPU16[$nonalpha + (HEAP32[$n >> 2] << 1) >> 1] | 0);
     $conv210 = ~~(+Math_fround(_stbir__linear_to_srgb(Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index200 >> 2] << 2) >> 2]))))) * 4294967295.0 + .5) >>> 0;
     HEAP32[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index200 >> 2] << 2) >> 2] = $conv210;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $conv225 = ~~(+Math_fround(_stbir__saturate(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index194 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2]))) * 4294967295.0 + .5);
     HEAP32[(HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index194 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2] = $conv225;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 6:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index237 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$channels$addr >> 2] | 0)) break;
     HEAP32[$index243 >> 2] = (HEAP32[$pixel_index237 >> 2] | 0) + (HEAP32[$n >> 2] | 0);
     $163 = Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index243 >> 2] << 2) >> 2]);
     HEAPF32[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index243 >> 2] << 2) >> 2] = $163;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 7:
  {
   HEAP32[$x >> 2] = 0;
   while (1) {
    if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$num_pixels$addr >> 2] | 0)) break;
    HEAP32[$pixel_index258 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels$addr >> 2] | 0) | 0;
    HEAP32[$n >> 2] = 0;
    while (1) {
     if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$num_nonalpha >> 2] | 0)) break;
     HEAP32[$index264 >> 2] = (HEAP32[$pixel_index258 >> 2] | 0) + (HEAPU16[$nonalpha + (HEAP32[$n >> 2] << 1) >> 1] | 0);
     $call269 = Math_fround(_stbir__linear_to_srgb(Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + (HEAP32[$index264 >> 2] << 2) >> 2])));
     HEAPF32[(HEAP32[$output_buffer$addr >> 2] | 0) + (HEAP32[$index264 >> 2] << 2) >> 2] = $call269;
     HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
    }
    if (!(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 72 >> 2] & 2)) {
     $188 = Math_fround(HEAPF32[(HEAP32[$encode_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index258 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2]);
     HEAPF32[(HEAP32[$output_buffer$addr >> 2] | 0) + ((HEAP32[$pixel_index258 >> 2] | 0) + (HEAP32[$alpha_channel$addr >> 2] | 0) << 2) >> 2] = $188;
    }
    HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 default:
  ___assert_fail(13703, 12378, 1861, 13824);
 }
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$013 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R328$1 = 0, $R328$1$be = 0, $R328$1$ph = 0, $R328$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP357$1 = 0, $RP357$1$be = 0, $RP357$1$ph = 0, $T$0$lcssa = 0, $T$012 = 0, $add$ptr = 0, $add$ptr5 = 0, $add230 = 0, $add248 = 0, $add258 = 0, $add570 = 0, $add6 = 0, $and556 = 0, $and560 = 0, $and565 = 0, $arrayidx = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx271 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk340 = 0, $bk70 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $fd307 = 0, $fd318$pre$phiZ2D = 0, $fd344 = 0, $fd43 = 0, $fd53$pre$phiZ2D = 0, $fd635 = 0, $fd74 = 0, $head201 = 0, $head223 = 0, $p$addr$1 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl586 = 0, $shr = 0, $shr259 = 0, $shr507 = 0, $shr546 = 0;
 $add$ptr = $p + $psize | 0;
 $0 = HEAP32[$p + 4 >> 2] | 0;
 L1 : do if (!($0 & 1)) {
  $1 = HEAP32[$p >> 2] | 0;
  if (!($0 & 3)) return;
  $add$ptr5 = $p + (0 - $1) | 0;
  $add6 = $1 + $psize | 0;
  $2 = HEAP32[7600] | 0;
  if ($add$ptr5 >>> 0 < $2 >>> 0) _abort();
  if ((HEAP32[7601] | 0) == ($add$ptr5 | 0)) {
   $head201 = $add$ptr + 4 | 0;
   $27 = HEAP32[$head201 >> 2] | 0;
   if (($27 & 3 | 0) != 3) {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
   HEAP32[7598] = $add6;
   HEAP32[$head201 >> 2] = $27 & -2;
   HEAP32[$add$ptr5 + 4 >> 2] = $add6 | 1;
   HEAP32[$add$ptr >> 2] = $add6;
   return;
  }
  $shr = $1 >>> 3;
  if ($1 >>> 0 < 256) {
   $4 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   $5 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
   $arrayidx = 30424 + ($shr << 1 << 2) | 0;
   if (($4 | 0) != ($arrayidx | 0)) {
    if ($2 >>> 0 > $4 >>> 0) _abort();
    if ((HEAP32[$4 + 12 >> 2] | 0) != ($add$ptr5 | 0)) _abort();
   }
   if (($5 | 0) == ($4 | 0)) {
    HEAP32[7596] = HEAP32[7596] & ~(1 << $shr);
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
   if (($5 | 0) == ($arrayidx | 0)) $fd53$pre$phiZ2D = $5 + 8 | 0; else {
    if ($2 >>> 0 > $5 >>> 0) _abort();
    $fd43 = $5 + 8 | 0;
    if ((HEAP32[$fd43 >> 2] | 0) == ($add$ptr5 | 0)) $fd53$pre$phiZ2D = $fd43; else _abort();
   }
   HEAP32[$4 + 12 >> 2] = $5;
   HEAP32[$fd53$pre$phiZ2D >> 2] = $4;
   $p$addr$1 = $add$ptr5;
   $psize$addr$1 = $add6;
   break;
  }
  $9 = HEAP32[$add$ptr5 + 24 >> 2] | 0;
  $10 = HEAP32[$add$ptr5 + 12 >> 2] | 0;
  do if (($10 | 0) == ($add$ptr5 | 0)) {
   $child = $add$ptr5 + 16 | 0;
   $arrayidx86 = $child + 4 | 0;
   $14 = HEAP32[$arrayidx86 >> 2] | 0;
   if (!$14) {
    $15 = HEAP32[$child >> 2] | 0;
    if (!$15) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $15;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $14;
    $RP$1$ph = $arrayidx86;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx95 = $R$1 + 20 | 0;
    $16 = HEAP32[$arrayidx95 >> 2] | 0;
    if (!$16) {
     $arrayidx100 = $R$1 + 16 | 0;
     $17 = HEAP32[$arrayidx100 >> 2] | 0;
     if (!$17) break; else {
      $R$1$be = $17;
      $RP$1$be = $arrayidx100;
     }
    } else {
     $R$1$be = $16;
     $RP$1$be = $arrayidx95;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($2 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $11 = HEAP32[$add$ptr5 + 8 >> 2] | 0;
   if ($2 >>> 0 > $11 >>> 0) _abort();
   $bk70 = $11 + 12 | 0;
   if ((HEAP32[$bk70 >> 2] | 0) != ($add$ptr5 | 0)) _abort();
   $fd74 = $10 + 8 | 0;
   if ((HEAP32[$fd74 >> 2] | 0) == ($add$ptr5 | 0)) {
    HEAP32[$bk70 >> 2] = $10;
    HEAP32[$fd74 >> 2] = $11;
    $R$3 = $10;
    break;
   } else _abort();
  } while (0);
  if (!$9) {
   $p$addr$1 = $add$ptr5;
   $psize$addr$1 = $add6;
  } else {
   $18 = HEAP32[$add$ptr5 + 28 >> 2] | 0;
   $arrayidx118 = 30688 + ($18 << 2) | 0;
   do if ((HEAP32[$arrayidx118 >> 2] | 0) == ($add$ptr5 | 0)) {
    HEAP32[$arrayidx118 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[7597] = HEAP32[7597] & ~(1 << $18);
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break L1;
    }
   } else if ((HEAP32[7600] | 0) >>> 0 > $9 >>> 0) _abort(); else {
    $arrayidx138 = $9 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx138 >> 2] | 0) == ($add$ptr5 | 0) ? $arrayidx138 : $9 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) {
     $p$addr$1 = $add$ptr5;
     $psize$addr$1 = $add6;
     break L1;
    } else break;
   } while (0);
   $23 = HEAP32[7600] | 0;
   if ($23 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $9;
   $child161 = $add$ptr5 + 16 | 0;
   $24 = HEAP32[$child161 >> 2] | 0;
   do if ($24 | 0) if ($23 >>> 0 > $24 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $24;
    HEAP32[$24 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $25 = HEAP32[$child161 + 4 >> 2] | 0;
   if (!$25) {
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
   } else if ((HEAP32[7600] | 0) >>> 0 > $25 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $25;
    HEAP32[$25 + 24 >> 2] = $R$3;
    $p$addr$1 = $add$ptr5;
    $psize$addr$1 = $add6;
    break;
   }
  }
 } else {
  $p$addr$1 = $p;
  $psize$addr$1 = $psize;
 } while (0);
 $28 = HEAP32[7600] | 0;
 if ($add$ptr >>> 0 < $28 >>> 0) _abort();
 $head223 = $add$ptr + 4 | 0;
 $29 = HEAP32[$head223 >> 2] | 0;
 if (!($29 & 2)) {
  if ((HEAP32[7602] | 0) == ($add$ptr | 0)) {
   $add230 = (HEAP32[7599] | 0) + $psize$addr$1 | 0;
   HEAP32[7599] = $add230;
   HEAP32[7602] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add230 | 1;
   if (($p$addr$1 | 0) != (HEAP32[7601] | 0)) return;
   HEAP32[7601] = 0;
   HEAP32[7598] = 0;
   return;
  }
  if ((HEAP32[7601] | 0) == ($add$ptr | 0)) {
   $add248 = (HEAP32[7598] | 0) + $psize$addr$1 | 0;
   HEAP32[7598] = $add248;
   HEAP32[7601] = $p$addr$1;
   HEAP32[$p$addr$1 + 4 >> 2] = $add248 | 1;
   HEAP32[$p$addr$1 + $add248 >> 2] = $add248;
   return;
  }
  $add258 = ($29 & -8) + $psize$addr$1 | 0;
  $shr259 = $29 >>> 3;
  L99 : do if ($29 >>> 0 < 256) {
   $35 = HEAP32[$add$ptr + 8 >> 2] | 0;
   $36 = HEAP32[$add$ptr + 12 >> 2] | 0;
   $arrayidx271 = 30424 + ($shr259 << 1 << 2) | 0;
   if (($35 | 0) != ($arrayidx271 | 0)) {
    if ($28 >>> 0 > $35 >>> 0) _abort();
    if ((HEAP32[$35 + 12 >> 2] | 0) != ($add$ptr | 0)) _abort();
   }
   if (($36 | 0) == ($35 | 0)) {
    HEAP32[7596] = HEAP32[7596] & ~(1 << $shr259);
    break;
   }
   if (($36 | 0) == ($arrayidx271 | 0)) $fd318$pre$phiZ2D = $36 + 8 | 0; else {
    if ($28 >>> 0 > $36 >>> 0) _abort();
    $fd307 = $36 + 8 | 0;
    if ((HEAP32[$fd307 >> 2] | 0) == ($add$ptr | 0)) $fd318$pre$phiZ2D = $fd307; else _abort();
   }
   HEAP32[$35 + 12 >> 2] = $36;
   HEAP32[$fd318$pre$phiZ2D >> 2] = $35;
  } else {
   $40 = HEAP32[$add$ptr + 24 >> 2] | 0;
   $41 = HEAP32[$add$ptr + 12 >> 2] | 0;
   do if (($41 | 0) == ($add$ptr | 0)) {
    $child358 = $add$ptr + 16 | 0;
    $arrayidx359 = $child358 + 4 | 0;
    $45 = HEAP32[$arrayidx359 >> 2] | 0;
    if (!$45) {
     $46 = HEAP32[$child358 >> 2] | 0;
     if (!$46) {
      $R328$3 = 0;
      break;
     } else {
      $R328$1$ph = $46;
      $RP357$1$ph = $child358;
     }
    } else {
     $R328$1$ph = $45;
     $RP357$1$ph = $arrayidx359;
    }
    $R328$1 = $R328$1$ph;
    $RP357$1 = $RP357$1$ph;
    while (1) {
     $arrayidx371 = $R328$1 + 20 | 0;
     $47 = HEAP32[$arrayidx371 >> 2] | 0;
     if (!$47) {
      $arrayidx376 = $R328$1 + 16 | 0;
      $48 = HEAP32[$arrayidx376 >> 2] | 0;
      if (!$48) break; else {
       $R328$1$be = $48;
       $RP357$1$be = $arrayidx376;
      }
     } else {
      $R328$1$be = $47;
      $RP357$1$be = $arrayidx371;
     }
     $R328$1 = $R328$1$be;
     $RP357$1 = $RP357$1$be;
    }
    if ($28 >>> 0 > $RP357$1 >>> 0) _abort(); else {
     HEAP32[$RP357$1 >> 2] = 0;
     $R328$3 = $R328$1;
     break;
    }
   } else {
    $42 = HEAP32[$add$ptr + 8 >> 2] | 0;
    if ($28 >>> 0 > $42 >>> 0) _abort();
    $bk340 = $42 + 12 | 0;
    if ((HEAP32[$bk340 >> 2] | 0) != ($add$ptr | 0)) _abort();
    $fd344 = $41 + 8 | 0;
    if ((HEAP32[$fd344 >> 2] | 0) == ($add$ptr | 0)) {
     HEAP32[$bk340 >> 2] = $41;
     HEAP32[$fd344 >> 2] = $42;
     $R328$3 = $41;
     break;
    } else _abort();
   } while (0);
   if ($40 | 0) {
    $49 = HEAP32[$add$ptr + 28 >> 2] | 0;
    $arrayidx399 = 30688 + ($49 << 2) | 0;
    do if ((HEAP32[$arrayidx399 >> 2] | 0) == ($add$ptr | 0)) {
     HEAP32[$arrayidx399 >> 2] = $R328$3;
     if (!$R328$3) {
      HEAP32[7597] = HEAP32[7597] & ~(1 << $49);
      break L99;
     }
    } else if ((HEAP32[7600] | 0) >>> 0 > $40 >>> 0) _abort(); else {
     $arrayidx420 = $40 + 16 | 0;
     HEAP32[((HEAP32[$arrayidx420 >> 2] | 0) == ($add$ptr | 0) ? $arrayidx420 : $40 + 20 | 0) >> 2] = $R328$3;
     if (!$R328$3) break L99; else break;
    } while (0);
    $54 = HEAP32[7600] | 0;
    if ($54 >>> 0 > $R328$3 >>> 0) _abort();
    HEAP32[$R328$3 + 24 >> 2] = $40;
    $child445 = $add$ptr + 16 | 0;
    $55 = HEAP32[$child445 >> 2] | 0;
    do if ($55 | 0) if ($54 >>> 0 > $55 >>> 0) _abort(); else {
     HEAP32[$R328$3 + 16 >> 2] = $55;
     HEAP32[$55 + 24 >> 2] = $R328$3;
     break;
    } while (0);
    $56 = HEAP32[$child445 + 4 >> 2] | 0;
    if ($56 | 0) if ((HEAP32[7600] | 0) >>> 0 > $56 >>> 0) _abort(); else {
     HEAP32[$R328$3 + 20 >> 2] = $56;
     HEAP32[$56 + 24 >> 2] = $R328$3;
     break;
    }
   }
  } while (0);
  HEAP32[$p$addr$1 + 4 >> 2] = $add258 | 1;
  HEAP32[$p$addr$1 + $add258 >> 2] = $add258;
  if (($p$addr$1 | 0) == (HEAP32[7601] | 0)) {
   HEAP32[7598] = $add258;
   return;
  } else $psize$addr$2 = $add258;
 } else {
  HEAP32[$head223 >> 2] = $29 & -2;
  HEAP32[$p$addr$1 + 4 >> 2] = $psize$addr$1 | 1;
  HEAP32[$p$addr$1 + $psize$addr$1 >> 2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 if ($psize$addr$2 >>> 0 < 256) {
  $arrayidx516 = 30424 + ($shr507 << 1 << 2) | 0;
  $59 = HEAP32[7596] | 0;
  $shl519 = 1 << $shr507;
  if (!($59 & $shl519)) {
   HEAP32[7596] = $59 | $shl519;
   $$pre$phiZ2D = $arrayidx516 + 8 | 0;
   $F517$0 = $arrayidx516;
  } else {
   $60 = $arrayidx516 + 8 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if ((HEAP32[7600] | 0) >>> 0 > $61 >>> 0) _abort(); else {
    $$pre$phiZ2D = $60;
    $F517$0 = $61;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$addr$1;
  HEAP32[$F517$0 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $F517$0;
  HEAP32[$p$addr$1 + 12 >> 2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 if (!$shr546) $I545$0 = 0; else if ($psize$addr$2 >>> 0 > 16777215) $I545$0 = 31; else {
  $and556 = ($shr546 + 1048320 | 0) >>> 16 & 8;
  $shl557 = $shr546 << $and556;
  $and560 = ($shl557 + 520192 | 0) >>> 16 & 4;
  $shl562 = $shl557 << $and560;
  $and565 = ($shl562 + 245760 | 0) >>> 16 & 2;
  $add570 = 14 - ($and560 | $and556 | $and565) + ($shl562 << $and565 >>> 15) | 0;
  $I545$0 = $psize$addr$2 >>> ($add570 + 7 | 0) & 1 | $add570 << 1;
 }
 $arrayidx579 = 30688 + ($I545$0 << 2) | 0;
 HEAP32[$p$addr$1 + 28 >> 2] = $I545$0;
 HEAP32[$p$addr$1 + 20 >> 2] = 0;
 HEAP32[$p$addr$1 + 16 >> 2] = 0;
 $63 = HEAP32[7597] | 0;
 $shl586 = 1 << $I545$0;
 if (!($63 & $shl586)) {
  HEAP32[7597] = $63 | $shl586;
  HEAP32[$arrayidx579 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $arrayidx579;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 }
 $64 = HEAP32[$arrayidx579 >> 2] | 0;
 L189 : do if ((HEAP32[$64 + 4 >> 2] & -8 | 0) == ($psize$addr$2 | 0)) $T$0$lcssa = $64; else {
  $K597$013 = $psize$addr$2 << (($I545$0 | 0) == 31 ? 0 : 25 - ($I545$0 >>> 1) | 0);
  $T$012 = $64;
  while (1) {
   $arrayidx613 = $T$012 + 16 + ($K597$013 >>> 31 << 2) | 0;
   $66 = HEAP32[$arrayidx613 >> 2] | 0;
   if (!$66) break;
   if ((HEAP32[$66 + 4 >> 2] & -8 | 0) == ($psize$addr$2 | 0)) {
    $T$0$lcssa = $66;
    break L189;
   } else {
    $K597$013 = $K597$013 << 1;
    $T$012 = $66;
   }
  }
  if ((HEAP32[7600] | 0) >>> 0 > $arrayidx613 >>> 0) _abort();
  HEAP32[$arrayidx613 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 24 >> 2] = $T$012;
  HEAP32[$p$addr$1 + 12 >> 2] = $p$addr$1;
  HEAP32[$p$addr$1 + 8 >> 2] = $p$addr$1;
  return;
 } while (0);
 $fd635 = $T$0$lcssa + 8 | 0;
 $69 = HEAP32[$fd635 >> 2] | 0;
 $70 = HEAP32[7600] | 0;
 if (!($70 >>> 0 <= $69 >>> 0 & $70 >>> 0 <= $T$0$lcssa >>> 0)) _abort();
 HEAP32[$69 + 12 >> 2] = $p$addr$1;
 HEAP32[$fd635 >> 2] = $p$addr$1;
 HEAP32[$p$addr$1 + 8 >> 2] = $69;
 HEAP32[$p$addr$1 + 12 >> 2] = $T$0$lcssa;
 HEAP32[$p$addr$1 + 24 >> 2] = 0;
 return;
}

function _GifSplitPalette($image, $numPixels, $firstElt, $lastElt, $splitElt, $splitDist, $treeNode, $buildForDither, $pal) {
 $image = $image | 0;
 $numPixels = $numPixels | 0;
 $firstElt = $firstElt | 0;
 $lastElt = $lastElt | 0;
 $splitElt = $splitElt | 0;
 $splitDist = $splitDist | 0;
 $treeNode = $treeNode | 0;
 $buildForDither = $buildForDither | 0;
 $pal = $pal | 0;
 var $104 = 0, $105 = 0, $106 = 0, $114 = 0, $120 = 0, $121 = 0, $122 = 0, $130 = 0, $136 = 0, $137 = 0, $138 = 0, $146 = 0, $152 = 0, $153 = 0, $154 = 0, $161 = 0, $167 = 0, $168 = 0, $169 = 0, $176 = 0, $182 = 0, $183 = 0, $184 = 0, $188 = 0, $191 = 0, $197 = 0, $198 = 0, $199 = 0, $203 = 0, $206 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $221 = 0, $227 = 0, $228 = 0, $229 = 0, $47 = 0, $80 = 0, $84 = 0, $88 = 0, $9 = 0, $98 = 0, $b = 0, $b122 = 0, $b185 = 0, $b58 = 0, $bRange = 0, $buildForDither$addr = 0, $cond = 0, $cond105 = 0, $cond28 = 0, $cond42 = 0, $cond77 = 0, $cond91 = 0, $div = 0, $div148 = 0, $div151 = 0, $firstElt$addr = 0, $g = 0, $g121 = 0, $g180 = 0, $g57 = 0, $gRange = 0, $ii = 0, $ii123 = 0, $ii170 = 0, $ii59 = 0, $image$addr = 0, $lastElt$addr = 0, $maxB = 0, $maxG = 0, $maxR = 0, $minB = 0, $minG = 0, $minR = 0, $mul231 = 0, $numPixels$addr = 0, $pal$addr = 0, $r = 0, $r120 = 0, $r175 = 0, $r56 = 0, $rRange = 0, $splitCom = 0, $splitDist$addr = 0, $splitElt$addr = 0, $subPixelsA = 0, $subPixelsB = 0, $treeNode$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $image$addr = sp + 152 | 0;
 $numPixels$addr = sp + 148 | 0;
 $firstElt$addr = sp + 144 | 0;
 $lastElt$addr = sp + 140 | 0;
 $splitElt$addr = sp + 136 | 0;
 $splitDist$addr = sp + 132 | 0;
 $treeNode$addr = sp + 128 | 0;
 $buildForDither$addr = sp + 156 | 0;
 $pal$addr = sp + 124 | 0;
 $r = sp + 120 | 0;
 $g = sp + 116 | 0;
 $b = sp + 112 | 0;
 $ii = sp + 108 | 0;
 $r56 = sp + 104 | 0;
 $g57 = sp + 100 | 0;
 $b58 = sp + 96 | 0;
 $ii59 = sp + 92 | 0;
 $r120 = sp + 16 | 0;
 $g121 = sp + 8 | 0;
 $b122 = sp;
 $ii123 = sp + 88 | 0;
 $minR = sp + 84 | 0;
 $maxR = sp + 80 | 0;
 $minG = sp + 76 | 0;
 $maxG = sp + 72 | 0;
 $minB = sp + 68 | 0;
 $maxB = sp + 64 | 0;
 $ii170 = sp + 60 | 0;
 $r175 = sp + 56 | 0;
 $g180 = sp + 52 | 0;
 $b185 = sp + 48 | 0;
 $rRange = sp + 44 | 0;
 $gRange = sp + 40 | 0;
 $bRange = sp + 36 | 0;
 $splitCom = sp + 32 | 0;
 $subPixelsA = sp + 28 | 0;
 $subPixelsB = sp + 24 | 0;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$numPixels$addr >> 2] = $numPixels;
 HEAP32[$firstElt$addr >> 2] = $firstElt;
 HEAP32[$lastElt$addr >> 2] = $lastElt;
 HEAP32[$splitElt$addr >> 2] = $splitElt;
 HEAP32[$splitDist$addr >> 2] = $splitDist;
 HEAP32[$treeNode$addr >> 2] = $treeNode;
 HEAP8[$buildForDither$addr >> 0] = $buildForDither & 1;
 HEAP32[$pal$addr >> 2] = $pal;
 if ((HEAP32[$numPixels$addr >> 2] | 0) == 0 ? 1 : (HEAP32[$lastElt$addr >> 2] | 0) <= (HEAP32[$firstElt$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$lastElt$addr >> 2] | 0) != ((HEAP32[$firstElt$addr >> 2] | 0) + 1 | 0)) {
  HEAP32[$minR >> 2] = 255;
  HEAP32[$maxR >> 2] = 0;
  HEAP32[$minG >> 2] = 255;
  HEAP32[$maxG >> 2] = 0;
  HEAP32[$minB >> 2] = 255;
  HEAP32[$maxB >> 2] = 0;
  HEAP32[$ii170 >> 2] = 0;
  while (1) {
   if ((HEAP32[$ii170 >> 2] | 0) >= (HEAP32[$numPixels$addr >> 2] | 0)) break;
   HEAP32[$r175 >> 2] = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii170 >> 2] << 2) + 0) >> 0];
   HEAP32[$g180 >> 2] = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii170 >> 2] << 2) + 1) >> 0];
   HEAP32[$b185 >> 2] = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii170 >> 2] << 2) + 2) >> 0];
   if ((HEAP32[$r175 >> 2] | 0) > (HEAP32[$maxR >> 2] | 0)) HEAP32[$maxR >> 2] = HEAP32[$r175 >> 2];
   if ((HEAP32[$r175 >> 2] | 0) < (HEAP32[$minR >> 2] | 0)) HEAP32[$minR >> 2] = HEAP32[$r175 >> 2];
   if ((HEAP32[$g180 >> 2] | 0) > (HEAP32[$maxG >> 2] | 0)) HEAP32[$maxG >> 2] = HEAP32[$g180 >> 2];
   if ((HEAP32[$g180 >> 2] | 0) < (HEAP32[$minG >> 2] | 0)) HEAP32[$minG >> 2] = HEAP32[$g180 >> 2];
   if ((HEAP32[$b185 >> 2] | 0) > (HEAP32[$maxB >> 2] | 0)) HEAP32[$maxB >> 2] = HEAP32[$b185 >> 2];
   if ((HEAP32[$b185 >> 2] | 0) < (HEAP32[$minB >> 2] | 0)) HEAP32[$minB >> 2] = HEAP32[$b185 >> 2];
   HEAP32[$ii170 >> 2] = (HEAP32[$ii170 >> 2] | 0) + 1;
  }
  HEAP32[$rRange >> 2] = (HEAP32[$maxR >> 2] | 0) - (HEAP32[$minR >> 2] | 0);
  HEAP32[$gRange >> 2] = (HEAP32[$maxG >> 2] | 0) - (HEAP32[$minG >> 2] | 0);
  HEAP32[$bRange >> 2] = (HEAP32[$maxB >> 2] | 0) - (HEAP32[$minB >> 2] | 0);
  HEAP32[$splitCom >> 2] = 1;
  HEAP32[$splitCom >> 2] = (HEAP32[$bRange >> 2] | 0) > (HEAP32[$gRange >> 2] | 0) ? 2 : 1;
  if ((HEAP32[$rRange >> 2] | 0) > (HEAP32[$bRange >> 2] | 0)) if ((HEAP32[$rRange >> 2] | 0) > (HEAP32[$gRange >> 2] | 0)) HEAP32[$splitCom >> 2] = 0;
  $mul231 = Math_imul(HEAP32[$numPixels$addr >> 2] | 0, (HEAP32[$splitElt$addr >> 2] | 0) - (HEAP32[$firstElt$addr >> 2] | 0) | 0) | 0;
  HEAP32[$subPixelsA >> 2] = ($mul231 | 0) / ((HEAP32[$lastElt$addr >> 2] | 0) - (HEAP32[$firstElt$addr >> 2] | 0) | 0) | 0;
  HEAP32[$subPixelsB >> 2] = (HEAP32[$numPixels$addr >> 2] | 0) - (HEAP32[$subPixelsA >> 2] | 0);
  _GifPartitionByMedian(HEAP32[$image$addr >> 2] | 0, 0, HEAP32[$numPixels$addr >> 2] | 0, HEAP32[$splitCom >> 2] | 0, HEAP32[$subPixelsA >> 2] | 0);
  HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 772 + (HEAP32[$treeNode$addr >> 2] | 0) >> 0] = HEAP32[$splitCom >> 2];
  HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 1027 + (HEAP32[$treeNode$addr >> 2] | 0) >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$subPixelsA >> 2] << 2) + (HEAP32[$splitCom >> 2] | 0)) >> 0] | 0;
  CSE$0 = HEAP32[$splitElt$addr >> 2] | 0;
  CSE$1 = HEAP32[$splitDist$addr >> 2] | 0;
  _GifSplitPalette(HEAP32[$image$addr >> 2] | 0, HEAP32[$subPixelsA >> 2] | 0, HEAP32[$firstElt$addr >> 2] | 0, CSE$0 | 0, CSE$0 - CSE$1 | 0, (CSE$1 | 0) / 2 | 0, HEAP32[$treeNode$addr >> 2] << 1, HEAP8[$buildForDither$addr >> 0] & 1, HEAP32[$pal$addr >> 2] | 0);
  CSE$2 = HEAP32[$splitElt$addr >> 2] | 0;
  CSE$3 = HEAP32[$splitDist$addr >> 2] | 0;
  _GifSplitPalette((HEAP32[$image$addr >> 2] | 0) + (HEAP32[$subPixelsA >> 2] << 2) | 0, HEAP32[$subPixelsB >> 2] | 0, CSE$2 | 0, HEAP32[$lastElt$addr >> 2] | 0, CSE$2 + CSE$3 | 0, (CSE$3 | 0) / 2 | 0, (HEAP32[$treeNode$addr >> 2] << 1) + 1 | 0, HEAP8[$buildForDither$addr >> 0] & 1, HEAP32[$pal$addr >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 if (HEAP8[$buildForDither$addr >> 0] & 1) {
  if ((HEAP32[$firstElt$addr >> 2] | 0) == 1) {
   HEAP32[$r >> 2] = 255;
   HEAP32[$g >> 2] = 255;
   HEAP32[$b >> 2] = 255;
   HEAP32[$ii >> 2] = 0;
   while (1) {
    $9 = HEAP32[$r >> 2] | 0;
    if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$numPixels$addr >> 2] | 0)) break;
    if ($9 >>> 0 < (HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii >> 2] << 2) + 0) >> 0] | 0) >>> 0) $cond = HEAP32[$r >> 2] | 0; else $cond = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii >> 2] << 2) + 0) >> 0] | 0;
    HEAP32[$r >> 2] = $cond;
    if ((HEAP32[$g >> 2] | 0) >>> 0 < (HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii >> 2] << 2) + 1) >> 0] | 0) >>> 0) $cond28 = HEAP32[$g >> 2] | 0; else $cond28 = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii >> 2] << 2) + 1) >> 0] | 0;
    HEAP32[$g >> 2] = $cond28;
    if ((HEAP32[$b >> 2] | 0) >>> 0 < (HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii >> 2] << 2) + 2) >> 0] | 0) >>> 0) $cond42 = HEAP32[$b >> 2] | 0; else $cond42 = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii >> 2] << 2) + 2) >> 0] | 0;
    HEAP32[$b >> 2] = $cond42;
    HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
   }
   HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 4 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = $9;
   HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 260 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$g >> 2];
   HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 516 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$b >> 2];
   STACKTOP = sp;
   return;
  }
  if ((HEAP32[$firstElt$addr >> 2] | 0) == ((1 << HEAP32[HEAP32[$pal$addr >> 2] >> 2]) - 1 | 0)) {
   HEAP32[$r56 >> 2] = 0;
   HEAP32[$g57 >> 2] = 0;
   HEAP32[$b58 >> 2] = 0;
   HEAP32[$ii59 >> 2] = 0;
   while (1) {
    $47 = HEAP32[$r56 >> 2] | 0;
    if ((HEAP32[$ii59 >> 2] | 0) >= (HEAP32[$numPixels$addr >> 2] | 0)) break;
    if ($47 >>> 0 > (HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii59 >> 2] << 2) + 0) >> 0] | 0) >>> 0) $cond77 = HEAP32[$r56 >> 2] | 0; else $cond77 = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii59 >> 2] << 2) + 0) >> 0] | 0;
    HEAP32[$r56 >> 2] = $cond77;
    if ((HEAP32[$g57 >> 2] | 0) >>> 0 > (HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii59 >> 2] << 2) + 1) >> 0] | 0) >>> 0) $cond91 = HEAP32[$g57 >> 2] | 0; else $cond91 = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii59 >> 2] << 2) + 1) >> 0] | 0;
    HEAP32[$g57 >> 2] = $cond91;
    if ((HEAP32[$b58 >> 2] | 0) >>> 0 > (HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii59 >> 2] << 2) + 2) >> 0] | 0) >>> 0) $cond105 = HEAP32[$b58 >> 2] | 0; else $cond105 = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii59 >> 2] << 2) + 2) >> 0] | 0;
    HEAP32[$b58 >> 2] = $cond105;
    HEAP32[$ii59 >> 2] = (HEAP32[$ii59 >> 2] | 0) + 1;
   }
   HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 4 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = $47;
   HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 260 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$g57 >> 2];
   HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 516 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$b58 >> 2];
   STACKTOP = sp;
   return;
  }
 }
 $80 = $r120;
 HEAP32[$80 >> 2] = 0;
 HEAP32[$80 + 4 >> 2] = 0;
 $84 = $g121;
 HEAP32[$84 >> 2] = 0;
 HEAP32[$84 + 4 >> 2] = 0;
 $88 = $b122;
 HEAP32[$88 >> 2] = 0;
 HEAP32[$88 + 4 >> 2] = 0;
 HEAP32[$ii123 >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii123 >> 2] | 0) >= (HEAP32[$numPixels$addr >> 2] | 0)) break;
  $98 = $r120;
  $104 = _i64Add(HEAP32[$98 >> 2] | 0, HEAP32[$98 + 4 >> 2] | 0, HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii123 >> 2] << 2) + 0) >> 0] | 0, 0) | 0;
  $105 = getTempRet0() | 0;
  $106 = $r120;
  HEAP32[$106 >> 2] = $104;
  HEAP32[$106 + 4 >> 2] = $105;
  $114 = $g121;
  $120 = _i64Add(HEAP32[$114 >> 2] | 0, HEAP32[$114 + 4 >> 2] | 0, HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii123 >> 2] << 2) + 1) >> 0] | 0, 0) | 0;
  $121 = getTempRet0() | 0;
  $122 = $g121;
  HEAP32[$122 >> 2] = $120;
  HEAP32[$122 + 4 >> 2] = $121;
  $130 = $b122;
  $136 = _i64Add(HEAP32[$130 >> 2] | 0, HEAP32[$130 + 4 >> 2] | 0, HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$ii123 >> 2] << 2) + 2) >> 0] | 0, 0) | 0;
  $137 = getTempRet0() | 0;
  $138 = $b122;
  HEAP32[$138 >> 2] = $136;
  HEAP32[$138 + 4 >> 2] = $137;
  HEAP32[$ii123 >> 2] = (HEAP32[$ii123 >> 2] | 0) + 1;
 }
 $div = (HEAP32[$numPixels$addr >> 2] | 0) / 2 | 0;
 $146 = $r120;
 $152 = _i64Add(HEAP32[$146 >> 2] | 0, HEAP32[$146 + 4 >> 2] | 0, $div | 0, (($div | 0) < 0) << 31 >> 31 | 0) | 0;
 $153 = getTempRet0() | 0;
 $154 = $r120;
 HEAP32[$154 >> 2] = $152;
 HEAP32[$154 + 4 >> 2] = $153;
 $div148 = (HEAP32[$numPixels$addr >> 2] | 0) / 2 | 0;
 $161 = $g121;
 $167 = _i64Add(HEAP32[$161 >> 2] | 0, HEAP32[$161 + 4 >> 2] | 0, $div148 | 0, (($div148 | 0) < 0) << 31 >> 31 | 0) | 0;
 $168 = getTempRet0() | 0;
 $169 = $g121;
 HEAP32[$169 >> 2] = $167;
 HEAP32[$169 + 4 >> 2] = $168;
 $div151 = (HEAP32[$numPixels$addr >> 2] | 0) / 2 | 0;
 $176 = $b122;
 $182 = _i64Add(HEAP32[$176 >> 2] | 0, HEAP32[$176 + 4 >> 2] | 0, $div151 | 0, (($div151 | 0) < 0) << 31 >> 31 | 0) | 0;
 $183 = getTempRet0() | 0;
 $184 = $b122;
 HEAP32[$184 >> 2] = $182;
 HEAP32[$184 + 4 >> 2] = $183;
 $188 = HEAP32[$numPixels$addr >> 2] | 0;
 $191 = $r120;
 $197 = ___udivdi3(HEAP32[$191 >> 2] | 0, HEAP32[$191 + 4 >> 2] | 0, $188 | 0, (($188 | 0) < 0) << 31 >> 31 | 0) | 0;
 $198 = getTempRet0() | 0;
 $199 = $r120;
 HEAP32[$199 >> 2] = $197;
 HEAP32[$199 + 4 >> 2] = $198;
 $203 = HEAP32[$numPixels$addr >> 2] | 0;
 $206 = $g121;
 $212 = ___udivdi3(HEAP32[$206 >> 2] | 0, HEAP32[$206 + 4 >> 2] | 0, $203 | 0, (($203 | 0) < 0) << 31 >> 31 | 0) | 0;
 $213 = getTempRet0() | 0;
 $214 = $g121;
 HEAP32[$214 >> 2] = $212;
 HEAP32[$214 + 4 >> 2] = $213;
 $218 = HEAP32[$numPixels$addr >> 2] | 0;
 $221 = $b122;
 $227 = ___udivdi3(HEAP32[$221 >> 2] | 0, HEAP32[$221 + 4 >> 2] | 0, $218 | 0, (($218 | 0) < 0) << 31 >> 31 | 0) | 0;
 $228 = getTempRet0() | 0;
 $229 = $b122;
 HEAP32[$229 >> 2] = $227;
 HEAP32[$229 + 4 >> 2] = $228;
 HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 4 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$r120 >> 2];
 HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 260 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$g121 >> 2];
 HEAP8[(HEAP32[$pal$addr >> 2] | 0) + 516 + (HEAP32[$firstElt$addr >> 2] | 0) >> 0] = HEAP32[$b122 >> 2];
 STACKTOP = sp;
 return;
}

function _GifDitherImage($lastFrame, $nextFrame, $outFrame, $width, $height, $pPal) {
 $lastFrame = $lastFrame | 0;
 $nextFrame = $nextFrame | 0;
 $outFrame = $outFrame | 0;
 $width = $width | 0;
 $height = $height | 0;
 $pPal = $pPal | 0;
 var $107 = 0, $135 = 0, $163 = 0, $191 = 0, $213 = 0, $arrayidx123 = 0, $arrayidx139 = 0, $arrayidx177 = 0, $arrayidx193 = 0, $arrayidx231 = 0, $arrayidx247 = 0, $arrayidx281 = 0, $arrayidx295 = 0, $b_err = 0, $bb = 0, $bestDiff = 0, $bestInd = 0, $cond = 0, $cond106 = 0, $cond122 = 0, $cond138 = 0, $cond160 = 0, $cond176 = 0, $cond192 = 0, $cond214 = 0, $cond230 = 0, $cond246 = 0, $cond266 = 0, $cond280 = 0, $cond294 = 0, $g_err = 0, $gg = 0, $height$addr = 0, $ii = 0, $ii304 = 0, $lastFrame$addr = 0, $lastPix = 0, $mul14 = 0, $mul16 = 0, $mul74 = 0, $mul77 = 0, $mul81 = 0, $mul84 = 0, $nextFrame$addr = 0, $nextPix = 0, $numPixels = 0, $outFrame$addr = 0, $pPal$addr = 0, $pix = 0, $pix1 = 0, $pix16 = 0, $pix3 = 0, $pix5 = 0, $pix7 = 0, $quantPixels = 0, $quantloc_1 = 0, $quantloc_3 = 0, $quantloc_5 = 0, $quantloc_7 = 0, $r_err = 0, $rr = 0, $width$addr = 0, $xx = 0, $yy = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $lastFrame$addr = sp + 120 | 0;
 $nextFrame$addr = sp + 116 | 0;
 $outFrame$addr = sp + 112 | 0;
 $width$addr = sp + 108 | 0;
 $height$addr = sp + 104 | 0;
 $pPal$addr = sp + 100 | 0;
 $numPixels = sp + 96 | 0;
 $quantPixels = sp + 92 | 0;
 $ii = sp + 88 | 0;
 $pix = sp + 124 | 0;
 $pix16 = sp + 84 | 0;
 $yy = sp + 80 | 0;
 $xx = sp + 76 | 0;
 $nextPix = sp + 72 | 0;
 $lastPix = sp + 68 | 0;
 $rr = sp + 64 | 0;
 $gg = sp + 60 | 0;
 $bb = sp + 56 | 0;
 $bestDiff = sp + 52 | 0;
 $bestInd = sp + 48 | 0;
 $r_err = sp + 44 | 0;
 $g_err = sp + 40 | 0;
 $b_err = sp + 36 | 0;
 $quantloc_7 = sp + 32 | 0;
 $quantloc_3 = sp + 28 | 0;
 $quantloc_5 = sp + 24 | 0;
 $quantloc_1 = sp + 20 | 0;
 $pix7 = sp + 16 | 0;
 $pix3 = sp + 12 | 0;
 $pix5 = sp + 8 | 0;
 $pix1 = sp + 4 | 0;
 $ii304 = sp;
 HEAP32[$lastFrame$addr >> 2] = $lastFrame;
 HEAP32[$nextFrame$addr >> 2] = $nextFrame;
 HEAP32[$outFrame$addr >> 2] = $outFrame;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$pPal$addr >> 2] = $pPal;
 HEAP32[$numPixels >> 2] = Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0;
 HEAP32[$quantPixels >> 2] = _malloc(HEAP32[$numPixels >> 2] << 2 << 2) | 0;
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$numPixels >> 2] << 2 | 0)) break;
  HEAP8[$pix >> 0] = HEAP8[(HEAP32[$nextFrame$addr >> 2] | 0) + (HEAP32[$ii >> 2] | 0) >> 0] | 0;
  HEAP32[$pix16 >> 2] = (HEAPU8[$pix >> 0] | 0) << 8;
  HEAP32[(HEAP32[$quantPixels >> 2] | 0) + (HEAP32[$ii >> 2] << 2) >> 2] = HEAP32[$pix16 >> 2];
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 HEAP32[$yy >> 2] = 0;
 while (1) {
  if ((HEAP32[$yy >> 2] | 0) >>> 0 >= (HEAP32[$height$addr >> 2] | 0) >>> 0) break;
  HEAP32[$xx >> 2] = 0;
  while (1) {
   if ((HEAP32[$xx >> 2] | 0) >>> 0 >= (HEAP32[$width$addr >> 2] | 0) >>> 0) break;
   $mul14 = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
   HEAP32[$nextPix >> 2] = (HEAP32[$quantPixels >> 2] | 0) + ($mul14 + (HEAP32[$xx >> 2] | 0) << 2 << 2);
   if (HEAP32[$lastFrame$addr >> 2] | 0) {
    $mul16 = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
    $cond = (HEAP32[$lastFrame$addr >> 2] | 0) + ($mul16 + (HEAP32[$xx >> 2] | 0) << 2) | 0;
   } else $cond = 0;
   HEAP32[$lastPix >> 2] = $cond;
   HEAP32[$rr >> 2] = ((HEAP32[HEAP32[$nextPix >> 2] >> 2] | 0) + 127 | 0) / 256 | 0;
   HEAP32[$gg >> 2] = ((HEAP32[(HEAP32[$nextPix >> 2] | 0) + 4 >> 2] | 0) + 127 | 0) / 256 | 0;
   HEAP32[$bb >> 2] = ((HEAP32[(HEAP32[$nextPix >> 2] | 0) + 8 >> 2] | 0) + 127 | 0) / 256 | 0;
   if (HEAP32[$lastFrame$addr >> 2] | 0) if ((HEAPU8[HEAP32[$lastPix >> 2] >> 0] | 0 | 0) == (HEAP32[$rr >> 2] | 0)) if ((HEAPU8[(HEAP32[$lastPix >> 2] | 0) + 1 >> 0] | 0 | 0) == (HEAP32[$gg >> 2] | 0)) if ((HEAPU8[(HEAP32[$lastPix >> 2] | 0) + 2 >> 0] | 0 | 0) == (HEAP32[$bb >> 2] | 0)) {
    HEAP32[HEAP32[$nextPix >> 2] >> 2] = HEAP32[$rr >> 2];
    HEAP32[(HEAP32[$nextPix >> 2] | 0) + 4 >> 2] = HEAP32[$gg >> 2];
    HEAP32[(HEAP32[$nextPix >> 2] | 0) + 8 >> 2] = HEAP32[$bb >> 2];
    HEAP32[(HEAP32[$nextPix >> 2] | 0) + 12 >> 2] = 0;
   } else label = 15; else label = 15; else label = 15; else label = 15;
   if ((label | 0) == 15) {
    label = 0;
    HEAP32[$bestDiff >> 2] = 1e6;
    HEAP32[$bestInd >> 2] = 0;
    _GifGetClosestPaletteColor(HEAP32[$pPal$addr >> 2] | 0, HEAP32[$rr >> 2] | 0, HEAP32[$gg >> 2] | 0, HEAP32[$bb >> 2] | 0, $bestInd, $bestDiff, 1);
    HEAP32[$r_err >> 2] = (HEAP32[HEAP32[$nextPix >> 2] >> 2] | 0) - ((HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 4 + (HEAP32[$bestInd >> 2] | 0) >> 0] | 0) << 8);
    HEAP32[$g_err >> 2] = (HEAP32[(HEAP32[$nextPix >> 2] | 0) + 4 >> 2] | 0) - ((HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 260 + (HEAP32[$bestInd >> 2] | 0) >> 0] | 0) << 8);
    HEAP32[$b_err >> 2] = (HEAP32[(HEAP32[$nextPix >> 2] | 0) + 8 >> 2] | 0) - ((HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 516 + (HEAP32[$bestInd >> 2] | 0) >> 0] | 0) << 8);
    HEAP32[HEAP32[$nextPix >> 2] >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 4 + (HEAP32[$bestInd >> 2] | 0) >> 0];
    HEAP32[(HEAP32[$nextPix >> 2] | 0) + 4 >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 260 + (HEAP32[$bestInd >> 2] | 0) >> 0];
    HEAP32[(HEAP32[$nextPix >> 2] | 0) + 8 >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 516 + (HEAP32[$bestInd >> 2] | 0) >> 0];
    HEAP32[(HEAP32[$nextPix >> 2] | 0) + 12 >> 2] = HEAP32[$bestInd >> 2];
    $mul74 = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
    HEAP32[$quantloc_7 >> 2] = $mul74 + (HEAP32[$xx >> 2] | 0) + 1;
    $mul77 = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
    HEAP32[$quantloc_3 >> 2] = $mul77 + (HEAP32[$width$addr >> 2] | 0) + (HEAP32[$xx >> 2] | 0) - 1;
    $mul81 = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
    HEAP32[$quantloc_5 >> 2] = $mul81 + (HEAP32[$width$addr >> 2] | 0) + (HEAP32[$xx >> 2] | 0);
    $mul84 = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
    HEAP32[$quantloc_1 >> 2] = $mul84 + (HEAP32[$width$addr >> 2] | 0) + (HEAP32[$xx >> 2] | 0) + 1;
    if ((HEAP32[$quantloc_7 >> 2] | 0) < (HEAP32[$numPixels >> 2] | 0)) {
     HEAP32[$pix7 >> 2] = (HEAP32[$quantPixels >> 2] | 0) + (HEAP32[$quantloc_7 >> 2] << 2 << 2);
     if ((0 - (HEAP32[HEAP32[$pix7 >> 2] >> 2] | 0) | 0) > (((HEAP32[$r_err >> 2] | 0) * 7 | 0) / 16 | 0 | 0)) $cond106 = 0 - (HEAP32[HEAP32[$pix7 >> 2] >> 2] | 0) | 0; else $cond106 = ((HEAP32[$r_err >> 2] | 0) * 7 | 0) / 16 | 0;
     $107 = HEAP32[$pix7 >> 2] | 0;
     HEAP32[$107 >> 2] = (HEAP32[$107 >> 2] | 0) + $cond106;
     if ((0 - (HEAP32[(HEAP32[$pix7 >> 2] | 0) + 4 >> 2] | 0) | 0) > (((HEAP32[$g_err >> 2] | 0) * 7 | 0) / 16 | 0 | 0)) $cond122 = 0 - (HEAP32[(HEAP32[$pix7 >> 2] | 0) + 4 >> 2] | 0) | 0; else $cond122 = ((HEAP32[$g_err >> 2] | 0) * 7 | 0) / 16 | 0;
     $arrayidx123 = (HEAP32[$pix7 >> 2] | 0) + 4 | 0;
     HEAP32[$arrayidx123 >> 2] = (HEAP32[$arrayidx123 >> 2] | 0) + $cond122;
     if ((0 - (HEAP32[(HEAP32[$pix7 >> 2] | 0) + 8 >> 2] | 0) | 0) > (((HEAP32[$b_err >> 2] | 0) * 7 | 0) / 16 | 0 | 0)) $cond138 = 0 - (HEAP32[(HEAP32[$pix7 >> 2] | 0) + 8 >> 2] | 0) | 0; else $cond138 = ((HEAP32[$b_err >> 2] | 0) * 7 | 0) / 16 | 0;
     $arrayidx139 = (HEAP32[$pix7 >> 2] | 0) + 8 | 0;
     HEAP32[$arrayidx139 >> 2] = (HEAP32[$arrayidx139 >> 2] | 0) + $cond138;
    }
    if ((HEAP32[$quantloc_3 >> 2] | 0) < (HEAP32[$numPixels >> 2] | 0)) {
     HEAP32[$pix3 >> 2] = (HEAP32[$quantPixels >> 2] | 0) + (HEAP32[$quantloc_3 >> 2] << 2 << 2);
     if ((0 - (HEAP32[HEAP32[$pix3 >> 2] >> 2] | 0) | 0) > (((HEAP32[$r_err >> 2] | 0) * 3 | 0) / 16 | 0 | 0)) $cond160 = 0 - (HEAP32[HEAP32[$pix3 >> 2] >> 2] | 0) | 0; else $cond160 = ((HEAP32[$r_err >> 2] | 0) * 3 | 0) / 16 | 0;
     $135 = HEAP32[$pix3 >> 2] | 0;
     HEAP32[$135 >> 2] = (HEAP32[$135 >> 2] | 0) + $cond160;
     if ((0 - (HEAP32[(HEAP32[$pix3 >> 2] | 0) + 4 >> 2] | 0) | 0) > (((HEAP32[$g_err >> 2] | 0) * 3 | 0) / 16 | 0 | 0)) $cond176 = 0 - (HEAP32[(HEAP32[$pix3 >> 2] | 0) + 4 >> 2] | 0) | 0; else $cond176 = ((HEAP32[$g_err >> 2] | 0) * 3 | 0) / 16 | 0;
     $arrayidx177 = (HEAP32[$pix3 >> 2] | 0) + 4 | 0;
     HEAP32[$arrayidx177 >> 2] = (HEAP32[$arrayidx177 >> 2] | 0) + $cond176;
     if ((0 - (HEAP32[(HEAP32[$pix3 >> 2] | 0) + 8 >> 2] | 0) | 0) > (((HEAP32[$b_err >> 2] | 0) * 3 | 0) / 16 | 0 | 0)) $cond192 = 0 - (HEAP32[(HEAP32[$pix3 >> 2] | 0) + 8 >> 2] | 0) | 0; else $cond192 = ((HEAP32[$b_err >> 2] | 0) * 3 | 0) / 16 | 0;
     $arrayidx193 = (HEAP32[$pix3 >> 2] | 0) + 8 | 0;
     HEAP32[$arrayidx193 >> 2] = (HEAP32[$arrayidx193 >> 2] | 0) + $cond192;
    }
    if ((HEAP32[$quantloc_5 >> 2] | 0) < (HEAP32[$numPixels >> 2] | 0)) {
     HEAP32[$pix5 >> 2] = (HEAP32[$quantPixels >> 2] | 0) + (HEAP32[$quantloc_5 >> 2] << 2 << 2);
     if ((0 - (HEAP32[HEAP32[$pix5 >> 2] >> 2] | 0) | 0) > (((HEAP32[$r_err >> 2] | 0) * 5 | 0) / 16 | 0 | 0)) $cond214 = 0 - (HEAP32[HEAP32[$pix5 >> 2] >> 2] | 0) | 0; else $cond214 = ((HEAP32[$r_err >> 2] | 0) * 5 | 0) / 16 | 0;
     $163 = HEAP32[$pix5 >> 2] | 0;
     HEAP32[$163 >> 2] = (HEAP32[$163 >> 2] | 0) + $cond214;
     if ((0 - (HEAP32[(HEAP32[$pix5 >> 2] | 0) + 4 >> 2] | 0) | 0) > (((HEAP32[$g_err >> 2] | 0) * 5 | 0) / 16 | 0 | 0)) $cond230 = 0 - (HEAP32[(HEAP32[$pix5 >> 2] | 0) + 4 >> 2] | 0) | 0; else $cond230 = ((HEAP32[$g_err >> 2] | 0) * 5 | 0) / 16 | 0;
     $arrayidx231 = (HEAP32[$pix5 >> 2] | 0) + 4 | 0;
     HEAP32[$arrayidx231 >> 2] = (HEAP32[$arrayidx231 >> 2] | 0) + $cond230;
     if ((0 - (HEAP32[(HEAP32[$pix5 >> 2] | 0) + 8 >> 2] | 0) | 0) > (((HEAP32[$b_err >> 2] | 0) * 5 | 0) / 16 | 0 | 0)) $cond246 = 0 - (HEAP32[(HEAP32[$pix5 >> 2] | 0) + 8 >> 2] | 0) | 0; else $cond246 = ((HEAP32[$b_err >> 2] | 0) * 5 | 0) / 16 | 0;
     $arrayidx247 = (HEAP32[$pix5 >> 2] | 0) + 8 | 0;
     HEAP32[$arrayidx247 >> 2] = (HEAP32[$arrayidx247 >> 2] | 0) + $cond246;
    }
    if ((HEAP32[$quantloc_1 >> 2] | 0) < (HEAP32[$numPixels >> 2] | 0)) {
     HEAP32[$pix1 >> 2] = (HEAP32[$quantPixels >> 2] | 0) + (HEAP32[$quantloc_1 >> 2] << 2 << 2);
     if ((0 - (HEAP32[HEAP32[$pix1 >> 2] >> 2] | 0) | 0) > ((HEAP32[$r_err >> 2] | 0) / 16 | 0 | 0)) $cond266 = 0 - (HEAP32[HEAP32[$pix1 >> 2] >> 2] | 0) | 0; else $cond266 = (HEAP32[$r_err >> 2] | 0) / 16 | 0;
     $191 = HEAP32[$pix1 >> 2] | 0;
     HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + $cond266;
     if ((0 - (HEAP32[(HEAP32[$pix1 >> 2] | 0) + 4 >> 2] | 0) | 0) > ((HEAP32[$g_err >> 2] | 0) / 16 | 0 | 0)) $cond280 = 0 - (HEAP32[(HEAP32[$pix1 >> 2] | 0) + 4 >> 2] | 0) | 0; else $cond280 = (HEAP32[$g_err >> 2] | 0) / 16 | 0;
     $arrayidx281 = (HEAP32[$pix1 >> 2] | 0) + 4 | 0;
     HEAP32[$arrayidx281 >> 2] = (HEAP32[$arrayidx281 >> 2] | 0) + $cond280;
     if ((0 - (HEAP32[(HEAP32[$pix1 >> 2] | 0) + 8 >> 2] | 0) | 0) > ((HEAP32[$b_err >> 2] | 0) / 16 | 0 | 0)) $cond294 = 0 - (HEAP32[(HEAP32[$pix1 >> 2] | 0) + 8 >> 2] | 0) | 0; else $cond294 = (HEAP32[$b_err >> 2] | 0) / 16 | 0;
     $arrayidx295 = (HEAP32[$pix1 >> 2] | 0) + 8 | 0;
     HEAP32[$arrayidx295 >> 2] = (HEAP32[$arrayidx295 >> 2] | 0) + $cond294;
    }
   }
   HEAP32[$xx >> 2] = (HEAP32[$xx >> 2] | 0) + 1;
  }
  HEAP32[$yy >> 2] = (HEAP32[$yy >> 2] | 0) + 1;
 }
 HEAP32[$ii304 >> 2] = 0;
 while (1) {
  $213 = HEAP32[$quantPixels >> 2] | 0;
  if ((HEAP32[$ii304 >> 2] | 0) >= (HEAP32[$numPixels >> 2] << 2 | 0)) break;
  HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + (HEAP32[$ii304 >> 2] | 0) >> 0] = HEAP32[$213 + (HEAP32[$ii304 >> 2] << 2) >> 2];
  HEAP32[$ii304 >> 2] = (HEAP32[$ii304 >> 2] | 0) + 1;
 }
 _free($213);
 STACKTOP = sp;
 return;
}

function _stbir__resize_allocated($info, $input_data, $input_stride_in_bytes, $output_data, $output_stride_in_bytes, $alpha_channel, $flags, $type, $edge_horizontal, $edge_vertical, $colorspace, $tempmem, $tempmem_size_in_bytes) {
 $info = $info | 0;
 $input_data = $input_data | 0;
 $input_stride_in_bytes = $input_stride_in_bytes | 0;
 $output_data = $output_data | 0;
 $output_stride_in_bytes = $output_stride_in_bytes | 0;
 $alpha_channel = $alpha_channel | 0;
 $flags = $flags | 0;
 $type = $type | 0;
 $edge_horizontal = $edge_horizontal | 0;
 $edge_vertical = $edge_vertical | 0;
 $colorspace = $colorspace | 0;
 $tempmem = $tempmem | 0;
 $tempmem_size_in_bytes = $tempmem_size_in_bytes | 0;
 var $135 = 0, $180 = f0, $182 = f0, $194 = f0, $196 = f0, $202 = 0, $203 = 0, $alpha_channel$addr = 0, $call102 = 0, $call105 = 0, $call108 = 0, $call94 = 0, $call96 = 0, $call99 = 0, $colorspace$addr = 0, $cond = 0, $cond11 = 0, $edge_horizontal$addr = 0, $edge_vertical$addr = 0, $flags$addr = 0, $info$addr = 0, $input_data$addr = 0, $input_stride_in_bytes$addr = 0, $memory_required = 0, $mul = 0, $mul112 = 0, $mul6 = 0, $output_data$addr = 0, $output_stride_in_bytes$addr = 0, $retval = 0, $tempmem$addr = 0, $tempmem_size_in_bytes$addr = 0, $tobool124 = 0, $tobool167 = 0, $type$addr = 0, $width_stride_input = 0, $width_stride_output = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0, CSE$5 = 0, CSE$6 = 0, CSE$7 = 0, CSE$8 = 0, CSE$9 = 0, CSE$10 = 0, CSE$11 = 0, CSE$12 = 0, CSE$13 = 0, CSE$14 = 0, CSE$15 = 0, CSE$16 = 0, CSE$17 = 0, CSE$18 = 0, CSE$19 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $retval = sp + 64 | 0;
 $info$addr = sp + 60 | 0;
 $input_data$addr = sp + 56 | 0;
 $input_stride_in_bytes$addr = sp + 52 | 0;
 $output_data$addr = sp + 48 | 0;
 $output_stride_in_bytes$addr = sp + 44 | 0;
 $alpha_channel$addr = sp + 40 | 0;
 $flags$addr = sp + 36 | 0;
 $type$addr = sp + 32 | 0;
 $edge_horizontal$addr = sp + 28 | 0;
 $edge_vertical$addr = sp + 24 | 0;
 $colorspace$addr = sp + 20 | 0;
 $tempmem$addr = sp + 16 | 0;
 $tempmem_size_in_bytes$addr = sp + 12 | 0;
 $memory_required = sp + 8 | 0;
 $width_stride_input = sp + 4 | 0;
 $width_stride_output = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$input_data$addr >> 2] = $input_data;
 HEAP32[$input_stride_in_bytes$addr >> 2] = $input_stride_in_bytes;
 HEAP32[$output_data$addr >> 2] = $output_data;
 HEAP32[$output_stride_in_bytes$addr >> 2] = $output_stride_in_bytes;
 HEAP32[$alpha_channel$addr >> 2] = $alpha_channel;
 HEAP32[$flags$addr >> 2] = $flags;
 HEAP32[$type$addr >> 2] = $type;
 HEAP32[$edge_horizontal$addr >> 2] = $edge_horizontal;
 HEAP32[$edge_vertical$addr >> 2] = $edge_vertical;
 HEAP32[$colorspace$addr >> 2] = $colorspace;
 HEAP32[$tempmem$addr >> 2] = $tempmem;
 HEAP32[$tempmem_size_in_bytes$addr >> 2] = $tempmem_size_in_bytes;
 HEAP32[$memory_required >> 2] = _stbir__calculate_memory(HEAP32[$info$addr >> 2] | 0) | 0;
 if (HEAP32[$input_stride_in_bytes$addr >> 2] | 0) $cond = HEAP32[$input_stride_in_bytes$addr >> 2] | 0; else {
  CSE$0 = HEAP32[$info$addr >> 2] | 0;
  $mul = Math_imul(HEAP32[CSE$0 + 64 >> 2] | 0, HEAP32[CSE$0 + 4 >> 2] | 0) | 0;
  $cond = Math_imul($mul, HEAPU8[12354 + (HEAP32[$type$addr >> 2] | 0) >> 0] | 0) | 0;
 }
 HEAP32[$width_stride_input >> 2] = $cond;
 if (HEAP32[$output_stride_in_bytes$addr >> 2] | 0) $cond11 = HEAP32[$output_stride_in_bytes$addr >> 2] | 0; else {
  CSE$1 = HEAP32[$info$addr >> 2] | 0;
  $mul6 = Math_imul(HEAP32[CSE$1 + 64 >> 2] | 0, HEAP32[CSE$1 + 20 >> 2] | 0) | 0;
  $cond11 = Math_imul($mul6, HEAPU8[12354 + (HEAP32[$type$addr >> 2] | 0) >> 0] | 0) | 0;
 }
 HEAP32[$width_stride_output >> 2] = $cond11;
 if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] | 0) < 0) ___assert_fail(12358, 12378, 2312, 12429);
 if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] | 0) > 64) ___assert_fail(12453, 12378, 2313, 12429);
 if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] | 0) >= 0) if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] | 0) <= 64) {
  if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 80 >> 2] | 0) >>> 0 >= 6) ___assert_fail(12474, 12378, 2318, 12429);
  if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 84 >> 2] | 0) >>> 0 >= 6) ___assert_fail(12575, 12378, 2319, 12429);
  if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 80 >> 2] | 0) >>> 0 >= 6) {
   HEAP32[$retval >> 2] = 0;
   $203 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $203 | 0;
  }
  if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 84 >> 2] | 0) >>> 0 >= 6) {
   HEAP32[$retval >> 2] = 0;
   $203 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $203 | 0;
  }
  if ((HEAP32[$alpha_channel$addr >> 2] | 0) < 0) HEAP32[$flags$addr >> 2] = HEAP32[$flags$addr >> 2] | 3;
  if (HEAP32[$flags$addr >> 2] & 2 | 0) {
   if (!(HEAP32[$flags$addr >> 2] & 1)) label = 26;
  } else label = 26;
  do if ((label | 0) == 26) {
   if ((HEAP32[$alpha_channel$addr >> 2] | 0) < 0) ___assert_fail(12674, 12378, 2330, 12429);
   if ((HEAP32[$alpha_channel$addr >> 2] | 0) < (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] | 0)) break; else ___assert_fail(12674, 12378, 2330, 12429);
  } while (0);
  if ((HEAP32[$alpha_channel$addr >> 2] | 0) >= (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] | 0)) {
   HEAP32[$retval >> 2] = 0;
   $203 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $203 | 0;
  }
  if (!(HEAP32[$tempmem$addr >> 2] | 0)) ___assert_fail(12727, 12378, 2336, 12429);
  if (!(HEAP32[$tempmem$addr >> 2] | 0)) {
   HEAP32[$retval >> 2] = 0;
   $203 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $203 | 0;
  }
  if ((HEAP32[$tempmem_size_in_bytes$addr >> 2] | 0) >>> 0 < (HEAP32[$memory_required >> 2] | 0) >>> 0) ___assert_fail(12735, 12378, 2341, 12429);
  if ((HEAP32[$tempmem_size_in_bytes$addr >> 2] | 0) >>> 0 < (HEAP32[$memory_required >> 2] | 0) >>> 0) {
   HEAP32[$retval >> 2] = 0;
   $203 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $203 | 0;
  }
  _memset(HEAP32[$tempmem$addr >> 2] | 0, 0, HEAP32[$tempmem_size_in_bytes$addr >> 2] | 0) | 0;
  HEAP32[HEAP32[$info$addr >> 2] >> 2] = HEAP32[$input_data$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 12 >> 2] = HEAP32[$width_stride_input >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 16 >> 2] = HEAP32[$output_data$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 28 >> 2] = HEAP32[$width_stride_output >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 68 >> 2] = HEAP32[$alpha_channel$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 72 >> 2] = HEAP32[$flags$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 76 >> 2] = HEAP32[$type$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 88 >> 2] = HEAP32[$edge_horizontal$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 92 >> 2] = HEAP32[$edge_vertical$addr >> 2];
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 96 >> 2] = HEAP32[$colorspace$addr >> 2];
  CSE$2 = HEAP32[$info$addr >> 2] | 0;
  $call94 = _stbir__get_coefficient_width(HEAP32[CSE$2 + 80 >> 2] | 0, Math_fround(HEAPF32[CSE$2 + 56 >> 2])) | 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 128 >> 2] = $call94;
  CSE$3 = HEAP32[$info$addr >> 2] | 0;
  $call96 = _stbir__get_coefficient_width(HEAP32[CSE$3 + 84 >> 2] | 0, Math_fround(HEAPF32[CSE$3 + 60 >> 2])) | 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 132 >> 2] = $call96;
  CSE$4 = HEAP32[$info$addr >> 2] | 0;
  $call99 = _stbir__get_filter_pixel_width(HEAP32[CSE$4 + 80 >> 2] | 0, Math_fround(HEAPF32[CSE$4 + 56 >> 2])) | 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 136 >> 2] = $call99;
  CSE$5 = HEAP32[$info$addr >> 2] | 0;
  $call102 = _stbir__get_filter_pixel_width(HEAP32[CSE$5 + 84 >> 2] | 0, Math_fround(HEAPF32[CSE$5 + 60 >> 2])) | 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 140 >> 2] = $call102;
  CSE$6 = HEAP32[$info$addr >> 2] | 0;
  $call105 = _stbir__get_filter_pixel_margin(HEAP32[CSE$6 + 80 >> 2] | 0, Math_fround(HEAPF32[CSE$6 + 56 >> 2])) | 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 144 >> 2] = $call105;
  CSE$7 = HEAP32[$info$addr >> 2] | 0;
  $call108 = _stbir__get_filter_pixel_margin(HEAP32[CSE$7 + 84 >> 2] | 0, Math_fround(HEAPF32[CSE$7 + 60 >> 2])) | 0;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 148 >> 2] = $call108;
  CSE$8 = HEAP32[$info$addr >> 2] | 0;
  $mul112 = (Math_imul(HEAP32[CSE$8 + 20 >> 2] | 0, HEAP32[CSE$8 + 64 >> 2] | 0) | 0) << 2;
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 160 >> 2] = $mul112;
  CSE$9 = HEAP32[$info$addr >> 2] | 0;
  HEAP32[CSE$9 + 116 >> 2] = (HEAP32[CSE$9 + 4 >> 2] | 0) + (HEAP32[CSE$9 + 144 >> 2] << 1);
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 100 >> 2] = HEAP32[$tempmem$addr >> 2];
  CSE$10 = HEAP32[$info$addr >> 2] | 0;
  HEAP32[CSE$10 + 104 >> 2] = (HEAP32[CSE$10 + 100 >> 2] | 0) + (HEAP32[CSE$10 + 188 >> 2] | 0);
  CSE$11 = HEAP32[$info$addr >> 2] | 0;
  HEAP32[CSE$11 + 108 >> 2] = (HEAP32[CSE$11 + 104 >> 2] | 0) + (HEAP32[CSE$11 + 192 >> 2] | 0);
  CSE$12 = HEAP32[$info$addr >> 2] | 0;
  HEAP32[CSE$12 + 112 >> 2] = (HEAP32[CSE$12 + 108 >> 2] | 0) + (HEAP32[CSE$12 + 196 >> 2] | 0);
  CSE$13 = HEAP32[$info$addr >> 2] | 0;
  HEAP32[CSE$13 + 120 >> 2] = (HEAP32[CSE$13 + 112 >> 2] | 0) + (HEAP32[CSE$13 + 200 >> 2] | 0);
  $tobool124 = (_stbir__use_height_upsampling(HEAP32[$info$addr >> 2] | 0) | 0) != 0;
  $135 = HEAP32[$info$addr >> 2] | 0;
  do if ($tobool124) {
   HEAP32[$135 + 124 >> 2] = 0;
   CSE$16 = HEAP32[$info$addr >> 2] | 0;
   HEAP32[CSE$16 + 180 >> 2] = (HEAP32[CSE$16 + 120 >> 2] | 0) + (HEAP32[CSE$16 + 204 >> 2] | 0);
   CSE$17 = HEAP32[$info$addr >> 2] | 0;
   HEAP32[CSE$17 + 184 >> 2] = (HEAP32[CSE$17 + 180 >> 2] | 0) + (HEAP32[CSE$17 + 212 >> 2] | 0);
   if (((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 184 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 216 >> 2] | 0) | 0) == ((HEAP32[$tempmem$addr >> 2] | 0) + (HEAP32[$tempmem_size_in_bytes$addr >> 2] | 0) | 0)) break; else ___assert_fail(12776, 12378, 2385, 12429);
  } else {
   CSE$18 = HEAP32[$info$addr >> 2] | 0;
   HEAP32[CSE$18 + 124 >> 2] = (HEAP32[$135 + 120 >> 2] | 0) + (HEAP32[CSE$18 + 204 >> 2] | 0);
   CSE$19 = HEAP32[$info$addr >> 2] | 0;
   HEAP32[CSE$19 + 180 >> 2] = (HEAP32[CSE$19 + 124 >> 2] | 0) + (HEAP32[CSE$19 + 208 >> 2] | 0);
   HEAP32[(HEAP32[$info$addr >> 2] | 0) + 184 >> 2] = 0;
   if (((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 180 >> 2] | 0) + (HEAP32[(HEAP32[$info$addr >> 2] | 0) + 212 >> 2] | 0) | 0) == ((HEAP32[$tempmem$addr >> 2] | 0) + (HEAP32[$tempmem_size_in_bytes$addr >> 2] | 0) | 0)) break; else ___assert_fail(12910, 12378, 2393, 12429);
  } while (0);
  HEAP32[(HEAP32[$info$addr >> 2] | 0) + 176 >> 2] = -1;
  $180 = Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 56 >> 2]);
  $182 = Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 48 >> 2]);
  CSE$14 = HEAP32[$info$addr >> 2] | 0;
  _stbir__calculate_filters(HEAP32[CSE$14 + 100 >> 2] | 0, HEAP32[CSE$14 + 104 >> 2] | 0, HEAP32[CSE$14 + 80 >> 2] | 0, $180, $182, HEAP32[CSE$14 + 4 >> 2] | 0, HEAP32[CSE$14 + 20 >> 2] | 0);
  $194 = Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 60 >> 2]);
  $196 = Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 52 >> 2]);
  CSE$15 = HEAP32[$info$addr >> 2] | 0;
  _stbir__calculate_filters(HEAP32[CSE$15 + 108 >> 2] | 0, HEAP32[CSE$15 + 112 >> 2] | 0, HEAP32[CSE$15 + 84 >> 2] | 0, $194, $196, HEAP32[CSE$15 + 8 >> 2] | 0, HEAP32[CSE$15 + 24 >> 2] | 0);
  $tobool167 = (_stbir__use_height_upsampling(HEAP32[$info$addr >> 2] | 0) | 0) != 0;
  $202 = HEAP32[$info$addr >> 2] | 0;
  if ($tobool167) _stbir__buffer_loop_upsample($202); else _stbir__buffer_loop_downsample($202);
  HEAP32[$retval >> 2] = 1;
  $203 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $203 | 0;
 }
 HEAP32[$retval >> 2] = 0;
 $203 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $203 | 0;
}

function _emscripten_webgl1_get_proc_address($name) {
 $name = $name | 0;
 var $retval$0 = 0, $tobool638 = 0;
 do if (!(_strcmp($name, 16150) | 0)) $retval$0 = 3; else if (!(_strcmp($name, 16166) | 0)) $retval$0 = 14; else if (!(_strcmp($name, 16181) | 0)) $retval$0 = 8; else if (!(_strcmp($name, 16202) | 0)) $retval$0 = 15; else if (!(_strcmp($name, 16215) | 0)) $retval$0 = 16; else if (!(_strcmp($name, 16233) | 0)) $retval$0 = 17; else if (!(_strcmp($name, 16252) | 0)) $retval$0 = 18; else if (!(_strcmp($name, 16266) | 0)) $retval$0 = 1; else if (!(_strcmp($name, 16279) | 0)) $retval$0 = 4; else if (!(_strcmp($name, 16295) | 0)) $retval$0 = 19; else if (!(_strcmp($name, 16319) | 0)) $retval$0 = 20; else if (!(_strcmp($name, 16331) | 0)) $retval$0 = 3; else if (!(_strcmp($name, 16351) | 0)) $retval$0 = 4; else if (!(_strcmp($name, 16364) | 0)) $retval$0 = 5; else if (!(_strcmp($name, 16380) | 0)) $retval$0 = 5; else if (!(_strcmp($name, 16405) | 0)) $retval$0 = 5; else if (!(_strcmp($name, 16413) | 0)) $retval$0 = 2; else if (!(_strcmp($name, 16426) | 0)) $retval$0 = 1; else if (!(_strcmp($name, 16440) | 0)) $retval$0 = 6; else {
  if (!(_strcmp($name, 16455) | 0)) {
   $retval$0 = 6;
   break;
  }
  if (!(_strcmp($name, 16467) | 0)) {
   $retval$0 = 7;
   break;
  }
  if (!(_strcmp($name, 16483) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 16506) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 16532) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 16549) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 16569) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 16585) | 0)) {
   $retval$0 = 6;
   break;
  }
  if (!(_strcmp($name, 16600) | 0)) {
   $retval$0 = 8;
   break;
  }
  if (!(_strcmp($name, 16611) | 0)) {
   $retval$0 = 21;
   break;
  }
  if (!(_strcmp($name, 16627) | 0)) {
   $retval$0 = 22;
   break;
  }
  if (!(_strcmp($name, 16648) | 0)) {
   $retval$0 = 9;
   break;
  }
  if (!(_strcmp($name, 16664) | 0)) {
   $retval$0 = 23;
   break;
  }
  if (!(_strcmp($name, 16686) | 0)) {
   $retval$0 = 10;
   break;
  }
  if (!(_strcmp($name, 16701) | 0)) {
   $retval$0 = 24;
   break;
  }
  if (!(_strcmp($name, 16718) | 0)) {
   $retval$0 = 11;
   break;
  }
  if (!(_strcmp($name, 16730) | 0)) {
   $retval$0 = 12;
   break;
  }
  if (!(_strcmp($name, 16742) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 16756) | 0)) {
   $retval$0 = 25;
   break;
  }
  if (!(_strcmp($name, 16771) | 0)) {
   $retval$0 = 13;
   break;
  }
  if (!(_strcmp($name, 16781) | 0)) {
   $retval$0 = 14;
   break;
  }
  if (!(_strcmp($name, 16808) | 0)) {
   $retval$0 = 9;
   break;
  }
  if (!(_strcmp($name, 16821) | 0)) {
   $retval$0 = 7;
   break;
  }
  if (!(_strcmp($name, 16836) | 0)) {
   $retval$0 = 15;
   break;
  }
  if (!(_strcmp($name, 16845) | 0)) {
   $retval$0 = 16;
   break;
  }
  if (!(_strcmp($name, 16871) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 16880) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 16888) | 0)) {
   $retval$0 = 8;
   break;
  }
  if (!(_strcmp($name, 16914) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 16937) | 0)) {
   $retval$0 = 17;
   break;
  }
  if (!(_strcmp($name, 16949) | 0)) {
   $retval$0 = 26;
   break;
  }
  if (!(_strcmp($name, 16962) | 0)) {
   $retval$0 = 18;
   break;
  }
  if (!(_strcmp($name, 16979) | 0)) {
   $retval$0 = 27;
   break;
  }
  if (!(_strcmp($name, 16997) | 0)) {
   $retval$0 = 28;
   break;
  }
  if (!(_strcmp($name, 17016) | 0)) {
   $retval$0 = 29;
   break;
  }
  if (!(_strcmp($name, 17030) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 17048) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 17067) | 0)) {
   $retval$0 = 9;
   break;
  }
  if (!(_strcmp($name, 17088) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 17108) | 0)) {
   $retval$0 = 30;
   break;
  }
  if (!(_strcmp($name, 17122) | 0)) {
   $retval$0 = 10;
   break;
  }
  if (!(_strcmp($name, 17145) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 17156) | 0)) {
   $retval$0 = 31;
   break;
  }
  if (!(_strcmp($name, 17168) | 0)) {
   $retval$0 = 10;
   break;
  }
  if (!(_strcmp($name, 17206) | 0)) {
   $retval$0 = 32;
   break;
  }
  if (!(_strcmp($name, 17220) | 0)) {
   $retval$0 = 11;
   break;
  }
  if (!(_strcmp($name, 17235) | 0)) {
   $retval$0 = 11;
   break;
  }
  if (!(_strcmp($name, 17255) | 0)) {
   $retval$0 = 12;
   break;
  }
  if (!(_strcmp($name, 17284) | 0)) {
   $retval$0 = 13;
   break;
  }
  if (!(_strcmp($name, 17298) | 0)) {
   $retval$0 = 12;
   break;
  }
  if (!(_strcmp($name, 17317) | 0)) {
   $retval$0 = 13;
   break;
  }
  if (!(_strcmp($name, 17344) | 0)) {
   $retval$0 = 14;
   break;
  }
  if (!(_strcmp($name, 17362) | 0)) {
   $retval$0 = 7;
   break;
  }
  if (!(_strcmp($name, 17374) | 0)) {
   $retval$0 = 14;
   break;
  }
  if (!(_strcmp($name, 17394) | 0)) {
   $retval$0 = 15;
   break;
  }
  if (!(_strcmp($name, 17414) | 0)) {
   $retval$0 = 16;
   break;
  }
  if (!(_strcmp($name, 17429) | 0)) {
   $retval$0 = 17;
   break;
  }
  if (!(_strcmp($name, 17444) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 17465) | 0)) {
   $retval$0 = 18;
   break;
  }
  if (!(_strcmp($name, 17485) | 0)) {
   $retval$0 = 19;
   break;
  }
  if (!(_strcmp($name, 17505) | 0)) {
   $retval$0 = 20;
   break;
  }
  if (!(_strcmp($name, 17531) | 0)) {
   $retval$0 = 33;
   break;
  }
  if (!(_strcmp($name, 17538) | 0)) {
   $retval$0 = 8;
   break;
  }
  if (!(_strcmp($name, 17549) | 0)) {
   $retval$0 = 9;
   break;
  }
  if (!(_strcmp($name, 17561) | 0)) {
   $retval$0 = 10;
   break;
  }
  if (!(_strcmp($name, 17577) | 0)) {
   $retval$0 = 11;
   break;
  }
  if (!(_strcmp($name, 17589) | 0)) {
   $retval$0 = 12;
   break;
  }
  if (!(_strcmp($name, 17606) | 0)) {
   $retval$0 = 13;
   break;
  }
  if (!(_strcmp($name, 17617) | 0)) {
   $retval$0 = 14;
   break;
  }
  if (!(_strcmp($name, 17629) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 17641) | 0)) {
   $retval$0 = 19;
   break;
  }
  if (!(_strcmp($name, 17655) | 0)) {
   $retval$0 = 34;
   break;
  }
  if (!(_strcmp($name, 17669) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 17685) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 17698) | 0)) {
   $retval$0 = 4;
   break;
  }
  if (!(_strcmp($name, 17722) | 0)) {
   $retval$0 = 15;
   break;
  }
  if (!(_strcmp($name, 17744) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 17761) | 0)) {
   $retval$0 = 16;
   break;
  }
  if (!(_strcmp($name, 17771) | 0)) {
   $retval$0 = 4;
   break;
  }
  if (!(_strcmp($name, 17786) | 0)) {
   $retval$0 = 17;
   break;
  }
  if (!(_strcmp($name, 17801) | 0)) {
   $retval$0 = 21;
   break;
  }
  if (!(_strcmp($name, 17815) | 0)) {
   $retval$0 = 18;
   break;
  }
  if (!(_strcmp($name, 17837) | 0)) {
   $retval$0 = 20;
   break;
  }
  if (!(_strcmp($name, 17851) | 0)) {
   $retval$0 = 35;
   break;
  }
  if (!(_strcmp($name, 17873) | 0)) {
   $retval$0 = 22;
   break;
  }
  if (!(_strcmp($name, 17885) | 0)) {
   $retval$0 = 19;
   break;
  }
  if (!(_strcmp($name, 17905) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 17918) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 17934) | 0)) {
   $retval$0 = 23;
   break;
  }
  if (!(_strcmp($name, 17951) | 0)) {
   $retval$0 = 24;
   break;
  }
  if (!(_strcmp($name, 17967) | 0)) {
   $retval$0 = 25;
   break;
  }
  if (!(_strcmp($name, 17984) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 18e3) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 18012) | 0)) {
   $retval$0 = 26;
   break;
  }
  if (!(_strcmp($name, 18025) | 0)) {
   $retval$0 = 36;
   break;
  }
  if (!(_strcmp($name, 18037) | 0)) {
   $retval$0 = 27;
   break;
  }
  if (!(_strcmp($name, 18050) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 18062) | 0)) {
   $retval$0 = 28;
   break;
  }
  if (!(_strcmp($name, 18075) | 0)) {
   $retval$0 = 29;
   break;
  }
  if (!(_strcmp($name, 18087) | 0)) {
   $retval$0 = 30;
   break;
  }
  if (!(_strcmp($name, 18100) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 18112) | 0)) {
   $retval$0 = 31;
   break;
  }
  if (!(_strcmp($name, 18125) | 0)) {
   $retval$0 = 20;
   break;
  }
  if (!(_strcmp($name, 18137) | 0)) {
   $retval$0 = 32;
   break;
  }
  if (!(_strcmp($name, 18150) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 18162) | 0)) {
   $retval$0 = 33;
   break;
  }
  if (!(_strcmp($name, 18175) | 0)) {
   $retval$0 = 5;
   break;
  }
  if (!(_strcmp($name, 18187) | 0)) {
   $retval$0 = 34;
   break;
  }
  if (!(_strcmp($name, 18200) | 0)) {
   $retval$0 = 21;
   break;
  }
  if (!(_strcmp($name, 18219) | 0)) {
   $retval$0 = 22;
   break;
  }
  if (!(_strcmp($name, 18238) | 0)) {
   $retval$0 = 23;
   break;
  }
  if (!(_strcmp($name, 18257) | 0)) {
   $retval$0 = 21;
   break;
  }
  if (!(_strcmp($name, 18270) | 0)) {
   $retval$0 = 22;
   break;
  }
  if (!(_strcmp($name, 18288) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 18305) | 0)) {
   $retval$0 = 37;
   break;
  }
  if (!(_strcmp($name, 18323) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 18340) | 0)) {
   $retval$0 = 38;
   break;
  }
  if (!(_strcmp($name, 18358) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 18375) | 0)) {
   $retval$0 = 39;
   break;
  }
  if (!(_strcmp($name, 18393) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 18410) | 0)) {
   $retval$0 = 40;
   break;
  }
  if (!(_strcmp($name, 18428) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 18450) | 0)) {
   $retval$0 = 24;
   break;
  }
  if (!(_strcmp($name, 18461) | 0)) {
   $retval$0 = 7;
   break;
  }
  if (!(_strcmp($name, 18477) | 0)) {
   $retval$0 = 8;
   break;
  }
  if (!(_strcmp($name, 18496) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 18509) | 0)) {
   $retval$0 = 9;
   break;
  }
  if (!(_strcmp($name, 18525) | 0)) {
   $retval$0 = 1;
   break;
  }
  if (!(_strcmp($name, 18539) | 0)) {
   $retval$0 = 10;
   break;
  }
  if (!(_strcmp($name, 18557) | 0)) {
   $retval$0 = 3;
   break;
  }
  if (!(_strcmp($name, 18573) | 0)) {
   $retval$0 = 4;
   break;
  }
  if (!(_strcmp($name, 18595) | 0)) {
   $retval$0 = 5;
   break;
  }
  if (!(_strcmp($name, 18618) | 0)) {
   $retval$0 = 6;
   break;
  }
  if (!(_strcmp($name, 18642) | 0)) {
   $retval$0 = 7;
   break;
  }
  if (!(_strcmp($name, 18667) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 18688) | 0)) {
   $retval$0 = 11;
   break;
  }
  if (!(_strcmp($name, 18712) | 0)) {
   $retval$0 = 12;
   break;
  }
  if (!(_strcmp($name, 18733) | 0)) {
   $retval$0 = 4;
   break;
  }
  if (!(_strcmp($name, 18752) | 0)) {
   $retval$0 = 13;
   break;
  }
  if (!(_strcmp($name, 18771) | 0)) {
   $retval$0 = 2;
   break;
  }
  if (!(_strcmp($name, 18798) | 0)) {
   $retval$0 = 2;
   break;
  }
  $tobool638 = (_strcmp($name, 18827) | 0) == 0;
  return ($tobool638 ? 6 : 0) | 0;
 } while (0);
 return $retval$0 | 0;
}

function _MatrixMultiply($agg$result, $left, $right) {
 $agg$result = $agg$result | 0;
 $left = $left | 0;
 $right = $right | 0;
 var $0 = f0, $10 = f0, $100 = f0, $102 = f0, $104 = f0, $106 = f0, $108 = f0, $110 = f0, $112 = f0, $114 = f0, $116 = f0, $118 = f0, $12 = f0, $120 = f0, $122 = f0, $124 = f0, $126 = f0, $14 = f0, $16 = f0, $18 = f0, $2 = f0, $20 = f0, $22 = f0, $24 = f0, $26 = f0, $28 = f0, $30 = f0, $32 = f0, $34 = f0, $36 = f0, $38 = f0, $4 = f0, $40 = f0, $42 = f0, $44 = f0, $46 = f0, $48 = f0, $50 = f0, $52 = f0, $54 = f0, $56 = f0, $58 = f0, $6 = f0, $60 = f0, $62 = f0, $64 = f0, $66 = f0, $68 = f0, $70 = f0, $72 = f0, $74 = f0, $76 = f0, $78 = f0, $8 = f0, $80 = f0, $82 = f0, $84 = f0, $86 = f0, $88 = f0, $90 = f0, $92 = f0, $94 = f0, $96 = f0, $98 = f0, $add = f0, $add101 = f0, $add105 = f0, $add117 = f0, $add121 = f0, $add13 = f0, $add133 = f0, $add137 = f0, $add149 = f0, $add153 = f0, $add16 = f0, $add165 = f0, $add169 = f0, $add181 = f0, $add185 = f0, $add197 = f0, $add201 = f0, $add213 = f0, $add217 = f0, $add229 = f0, $add233 = f0, $add26 = f0, $add29 = f0, $add39 = f0, $add4 = f0, $add42 = f0, $add53 = f0, $add57 = f0, $add69 = f0, $add73 = f0, $add85 = f0, $add89 = f0, $mul = f0, $mul10 = f0, $mul113 = f0, $mul129 = f0, $mul145 = f0, $mul161 = f0, $mul177 = f0, $mul193 = f0, $mul209 = f0, $mul225 = f0, $mul23 = f0, $mul36 = f0, $mul49 = f0, $mul65 = f0, $mul81 = f0, $mul97 = f0, $result = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $result = sp;
 dest = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = Math_fround(HEAPF32[$left >> 2]);
 $mul = Math_fround($0 * Math_fround(HEAPF32[$right >> 2]));
 $2 = Math_fround(HEAPF32[$left + 16 >> 2]);
 $add = Math_fround($mul + Math_fround($2 * Math_fround(HEAPF32[$right + 4 >> 2])));
 $4 = Math_fround(HEAPF32[$left + 32 >> 2]);
 $add4 = Math_fround($add + Math_fround($4 * Math_fround(HEAPF32[$right + 8 >> 2])));
 $6 = Math_fround(HEAPF32[$left + 48 >> 2]);
 HEAPF32[$result >> 2] = Math_fround($add4 + Math_fround($6 * Math_fround(HEAPF32[$right + 12 >> 2])));
 $8 = Math_fround(HEAPF32[$left >> 2]);
 $mul10 = Math_fround($8 * Math_fround(HEAPF32[$right + 16 >> 2]));
 $10 = Math_fround(HEAPF32[$left + 16 >> 2]);
 $add13 = Math_fround($mul10 + Math_fround($10 * Math_fround(HEAPF32[$right + 20 >> 2])));
 $12 = Math_fround(HEAPF32[$left + 32 >> 2]);
 $add16 = Math_fround($add13 + Math_fround($12 * Math_fround(HEAPF32[$right + 24 >> 2])));
 $14 = Math_fround(HEAPF32[$left + 48 >> 2]);
 HEAPF32[$result + 16 >> 2] = Math_fround($add16 + Math_fround($14 * Math_fround(HEAPF32[$right + 28 >> 2])));
 $16 = Math_fround(HEAPF32[$left >> 2]);
 $mul23 = Math_fround($16 * Math_fround(HEAPF32[$right + 32 >> 2]));
 $18 = Math_fround(HEAPF32[$left + 16 >> 2]);
 $add26 = Math_fround($mul23 + Math_fround($18 * Math_fround(HEAPF32[$right + 36 >> 2])));
 $20 = Math_fround(HEAPF32[$left + 32 >> 2]);
 $add29 = Math_fround($add26 + Math_fround($20 * Math_fround(HEAPF32[$right + 40 >> 2])));
 $22 = Math_fround(HEAPF32[$left + 48 >> 2]);
 HEAPF32[$result + 32 >> 2] = Math_fround($add29 + Math_fround($22 * Math_fround(HEAPF32[$right + 44 >> 2])));
 $24 = Math_fround(HEAPF32[$left >> 2]);
 $mul36 = Math_fround($24 * Math_fround(HEAPF32[$right + 48 >> 2]));
 $26 = Math_fround(HEAPF32[$left + 16 >> 2]);
 $add39 = Math_fround($mul36 + Math_fround($26 * Math_fround(HEAPF32[$right + 52 >> 2])));
 $28 = Math_fround(HEAPF32[$left + 32 >> 2]);
 $add42 = Math_fround($add39 + Math_fround($28 * Math_fround(HEAPF32[$right + 56 >> 2])));
 $30 = Math_fround(HEAPF32[$left + 48 >> 2]);
 HEAPF32[$result + 48 >> 2] = Math_fround($add42 + Math_fround($30 * Math_fround(HEAPF32[$right + 60 >> 2])));
 $32 = Math_fround(HEAPF32[$left + 4 >> 2]);
 $mul49 = Math_fround($32 * Math_fround(HEAPF32[$right >> 2]));
 $34 = Math_fround(HEAPF32[$left + 20 >> 2]);
 $add53 = Math_fround($mul49 + Math_fround($34 * Math_fround(HEAPF32[$right + 4 >> 2])));
 $36 = Math_fround(HEAPF32[$left + 36 >> 2]);
 $add57 = Math_fround($add53 + Math_fround($36 * Math_fround(HEAPF32[$right + 8 >> 2])));
 $38 = Math_fround(HEAPF32[$left + 52 >> 2]);
 HEAPF32[$result + 4 >> 2] = Math_fround($add57 + Math_fround($38 * Math_fround(HEAPF32[$right + 12 >> 2])));
 $40 = Math_fround(HEAPF32[$left + 4 >> 2]);
 $mul65 = Math_fround($40 * Math_fround(HEAPF32[$right + 16 >> 2]));
 $42 = Math_fround(HEAPF32[$left + 20 >> 2]);
 $add69 = Math_fround($mul65 + Math_fround($42 * Math_fround(HEAPF32[$right + 20 >> 2])));
 $44 = Math_fround(HEAPF32[$left + 36 >> 2]);
 $add73 = Math_fround($add69 + Math_fround($44 * Math_fround(HEAPF32[$right + 24 >> 2])));
 $46 = Math_fround(HEAPF32[$left + 52 >> 2]);
 HEAPF32[$result + 20 >> 2] = Math_fround($add73 + Math_fround($46 * Math_fround(HEAPF32[$right + 28 >> 2])));
 $48 = Math_fround(HEAPF32[$left + 4 >> 2]);
 $mul81 = Math_fround($48 * Math_fround(HEAPF32[$right + 32 >> 2]));
 $50 = Math_fround(HEAPF32[$left + 20 >> 2]);
 $add85 = Math_fround($mul81 + Math_fround($50 * Math_fround(HEAPF32[$right + 36 >> 2])));
 $52 = Math_fround(HEAPF32[$left + 36 >> 2]);
 $add89 = Math_fround($add85 + Math_fround($52 * Math_fround(HEAPF32[$right + 40 >> 2])));
 $54 = Math_fround(HEAPF32[$left + 52 >> 2]);
 HEAPF32[$result + 36 >> 2] = Math_fround($add89 + Math_fround($54 * Math_fround(HEAPF32[$right + 44 >> 2])));
 $56 = Math_fround(HEAPF32[$left + 4 >> 2]);
 $mul97 = Math_fround($56 * Math_fround(HEAPF32[$right + 48 >> 2]));
 $58 = Math_fround(HEAPF32[$left + 20 >> 2]);
 $add101 = Math_fround($mul97 + Math_fround($58 * Math_fround(HEAPF32[$right + 52 >> 2])));
 $60 = Math_fround(HEAPF32[$left + 36 >> 2]);
 $add105 = Math_fround($add101 + Math_fround($60 * Math_fround(HEAPF32[$right + 56 >> 2])));
 $62 = Math_fround(HEAPF32[$left + 52 >> 2]);
 HEAPF32[$result + 52 >> 2] = Math_fround($add105 + Math_fround($62 * Math_fround(HEAPF32[$right + 60 >> 2])));
 $64 = Math_fround(HEAPF32[$left + 8 >> 2]);
 $mul113 = Math_fround($64 * Math_fround(HEAPF32[$right >> 2]));
 $66 = Math_fround(HEAPF32[$left + 24 >> 2]);
 $add117 = Math_fround($mul113 + Math_fround($66 * Math_fround(HEAPF32[$right + 4 >> 2])));
 $68 = Math_fround(HEAPF32[$left + 40 >> 2]);
 $add121 = Math_fround($add117 + Math_fround($68 * Math_fround(HEAPF32[$right + 8 >> 2])));
 $70 = Math_fround(HEAPF32[$left + 56 >> 2]);
 HEAPF32[$result + 8 >> 2] = Math_fround($add121 + Math_fround($70 * Math_fround(HEAPF32[$right + 12 >> 2])));
 $72 = Math_fround(HEAPF32[$left + 8 >> 2]);
 $mul129 = Math_fround($72 * Math_fround(HEAPF32[$right + 16 >> 2]));
 $74 = Math_fround(HEAPF32[$left + 24 >> 2]);
 $add133 = Math_fround($mul129 + Math_fround($74 * Math_fround(HEAPF32[$right + 20 >> 2])));
 $76 = Math_fround(HEAPF32[$left + 40 >> 2]);
 $add137 = Math_fround($add133 + Math_fround($76 * Math_fround(HEAPF32[$right + 24 >> 2])));
 $78 = Math_fround(HEAPF32[$left + 56 >> 2]);
 HEAPF32[$result + 24 >> 2] = Math_fround($add137 + Math_fround($78 * Math_fround(HEAPF32[$right + 28 >> 2])));
 $80 = Math_fround(HEAPF32[$left + 8 >> 2]);
 $mul145 = Math_fround($80 * Math_fround(HEAPF32[$right + 32 >> 2]));
 $82 = Math_fround(HEAPF32[$left + 24 >> 2]);
 $add149 = Math_fround($mul145 + Math_fround($82 * Math_fround(HEAPF32[$right + 36 >> 2])));
 $84 = Math_fround(HEAPF32[$left + 40 >> 2]);
 $add153 = Math_fround($add149 + Math_fround($84 * Math_fround(HEAPF32[$right + 40 >> 2])));
 $86 = Math_fround(HEAPF32[$left + 56 >> 2]);
 HEAPF32[$result + 40 >> 2] = Math_fround($add153 + Math_fround($86 * Math_fround(HEAPF32[$right + 44 >> 2])));
 $88 = Math_fround(HEAPF32[$left + 8 >> 2]);
 $mul161 = Math_fround($88 * Math_fround(HEAPF32[$right + 48 >> 2]));
 $90 = Math_fround(HEAPF32[$left + 24 >> 2]);
 $add165 = Math_fround($mul161 + Math_fround($90 * Math_fround(HEAPF32[$right + 52 >> 2])));
 $92 = Math_fround(HEAPF32[$left + 40 >> 2]);
 $add169 = Math_fround($add165 + Math_fround($92 * Math_fround(HEAPF32[$right + 56 >> 2])));
 $94 = Math_fround(HEAPF32[$left + 56 >> 2]);
 HEAPF32[$result + 56 >> 2] = Math_fround($add169 + Math_fround($94 * Math_fround(HEAPF32[$right + 60 >> 2])));
 $96 = Math_fround(HEAPF32[$left + 12 >> 2]);
 $mul177 = Math_fround($96 * Math_fround(HEAPF32[$right >> 2]));
 $98 = Math_fround(HEAPF32[$left + 28 >> 2]);
 $add181 = Math_fround($mul177 + Math_fround($98 * Math_fround(HEAPF32[$right + 4 >> 2])));
 $100 = Math_fround(HEAPF32[$left + 44 >> 2]);
 $add185 = Math_fround($add181 + Math_fround($100 * Math_fround(HEAPF32[$right + 8 >> 2])));
 $102 = Math_fround(HEAPF32[$left + 60 >> 2]);
 HEAPF32[$result + 12 >> 2] = Math_fround($add185 + Math_fround($102 * Math_fround(HEAPF32[$right + 12 >> 2])));
 $104 = Math_fround(HEAPF32[$left + 12 >> 2]);
 $mul193 = Math_fround($104 * Math_fround(HEAPF32[$right + 16 >> 2]));
 $106 = Math_fround(HEAPF32[$left + 28 >> 2]);
 $add197 = Math_fround($mul193 + Math_fround($106 * Math_fround(HEAPF32[$right + 20 >> 2])));
 $108 = Math_fround(HEAPF32[$left + 44 >> 2]);
 $add201 = Math_fround($add197 + Math_fround($108 * Math_fround(HEAPF32[$right + 24 >> 2])));
 $110 = Math_fround(HEAPF32[$left + 60 >> 2]);
 HEAPF32[$result + 28 >> 2] = Math_fround($add201 + Math_fround($110 * Math_fround(HEAPF32[$right + 28 >> 2])));
 $112 = Math_fround(HEAPF32[$left + 12 >> 2]);
 $mul209 = Math_fround($112 * Math_fround(HEAPF32[$right + 32 >> 2]));
 $114 = Math_fround(HEAPF32[$left + 28 >> 2]);
 $add213 = Math_fround($mul209 + Math_fround($114 * Math_fround(HEAPF32[$right + 36 >> 2])));
 $116 = Math_fround(HEAPF32[$left + 44 >> 2]);
 $add217 = Math_fround($add213 + Math_fround($116 * Math_fround(HEAPF32[$right + 40 >> 2])));
 $118 = Math_fround(HEAPF32[$left + 60 >> 2]);
 HEAPF32[$result + 44 >> 2] = Math_fround($add217 + Math_fround($118 * Math_fround(HEAPF32[$right + 44 >> 2])));
 $120 = Math_fround(HEAPF32[$left + 12 >> 2]);
 $mul225 = Math_fround($120 * Math_fround(HEAPF32[$right + 48 >> 2]));
 $122 = Math_fround(HEAPF32[$left + 28 >> 2]);
 $add229 = Math_fround($mul225 + Math_fround($122 * Math_fround(HEAPF32[$right + 52 >> 2])));
 $124 = Math_fround(HEAPF32[$left + 44 >> 2]);
 $add233 = Math_fround($add229 + Math_fround($124 * Math_fround(HEAPF32[$right + 56 >> 2])));
 $126 = Math_fround(HEAPF32[$left + 60 >> 2]);
 HEAPF32[$result + 60 >> 2] = Math_fround($add233 + Math_fround($126 * Math_fround(HEAPF32[$right + 60 >> 2])));
 dest = $agg$result;
 src = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _stbir__resample_vertical_downsample($stbir_info, $n) {
 $stbir_info = $stbir_info | 0;
 $n = $n | 0;
 var $109 = f0, $116 = f0, $123 = f0, $130 = f0, $145 = f0, $55 = f0, $66 = f0, $73 = f0, $84 = f0, $91 = f0, $98 = f0, $arrayidx101 = 0, $arrayidx118 = 0, $arrayidx23 = 0, $arrayidx35 = 0, $arrayidx41 = 0, $arrayidx56 = 0, $arrayidx62 = 0, $arrayidx68 = 0, $arrayidx83 = 0, $arrayidx89 = 0, $arrayidx95 = 0, $c = 0, $channels = 0, $coefficient = 0, $coefficient_group = 0, $coefficient_index = 0, $coefficient_width = 0, $contributor = 0, $horizontal_buffer = 0, $in_pixel_index = 0, $in_pixel_index109 = 0, $in_pixel_index29 = 0, $in_pixel_index50 = 0, $in_pixel_index77 = 0, $k = 0, $mul116 = f0, $mul21 = f0, $mul33 = f0, $mul39 = f0, $mul54 = f0, $mul60 = f0, $mul66 = f0, $mul81 = f0, $mul87 = f0, $mul93 = f0, $mul99 = f0, $n$addr = 0, $n0 = 0, $n1 = 0, $output_w = 0, $ring_buffer = 0, $ring_buffer_begin_index = 0, $ring_buffer_entries = 0, $ring_buffer_entry = 0, $ring_buffer_first_scanline = 0, $ring_buffer_length = 0, $stbir_info$addr = 0, $vertical_coefficients = 0, $vertical_contributors = 0, $x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $stbir_info$addr = sp + 108 | 0;
 $n$addr = sp + 104 | 0;
 $x = sp + 100 | 0;
 $k = sp + 96 | 0;
 $output_w = sp + 92 | 0;
 $vertical_contributors = sp + 88 | 0;
 $vertical_coefficients = sp + 84 | 0;
 $channels = sp + 80 | 0;
 $ring_buffer_entries = sp + 76 | 0;
 $horizontal_buffer = sp + 72 | 0;
 $coefficient_width = sp + 68 | 0;
 $contributor = sp + 64 | 0;
 $ring_buffer = sp + 60 | 0;
 $ring_buffer_begin_index = sp + 56 | 0;
 $ring_buffer_first_scanline = sp + 52 | 0;
 $ring_buffer_length = sp + 48 | 0;
 $n0 = sp + 44 | 0;
 $n1 = sp + 40 | 0;
 $coefficient_index = sp + 36 | 0;
 $coefficient_group = sp + 32 | 0;
 $coefficient = sp + 28 | 0;
 $ring_buffer_entry = sp + 24 | 0;
 $in_pixel_index = sp + 20 | 0;
 $in_pixel_index29 = sp + 16 | 0;
 $in_pixel_index50 = sp + 12 | 0;
 $in_pixel_index77 = sp + 8 | 0;
 $in_pixel_index109 = sp + 4 | 0;
 $c = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$output_w >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 20 >> 2];
 HEAP32[$vertical_contributors >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 108 >> 2];
 HEAP32[$vertical_coefficients >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 112 >> 2];
 HEAP32[$channels >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 64 >> 2];
 HEAP32[$ring_buffer_entries >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 164 >> 2];
 HEAP32[$horizontal_buffer >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 124 >> 2];
 HEAP32[$coefficient_width >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 132 >> 2];
 HEAP32[$contributor >> 2] = (HEAP32[$n$addr >> 2] | 0) + (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 148 >> 2] | 0);
 HEAP32[$ring_buffer >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 180 >> 2];
 HEAP32[$ring_buffer_begin_index >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2];
 HEAP32[$ring_buffer_first_scanline >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2];
 HEAP32[$ring_buffer_length >> 2] = ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 160 >> 2] | 0) >>> 0) / 4 | 0;
 HEAP32[$n0 >> 2] = HEAP32[(HEAP32[$vertical_contributors >> 2] | 0) + (HEAP32[$contributor >> 2] << 3) >> 2];
 HEAP32[$n1 >> 2] = HEAP32[(HEAP32[$vertical_contributors >> 2] | 0) + (HEAP32[$contributor >> 2] << 3) + 4 >> 2];
 if (_stbir__use_height_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0) ___assert_fail(13040, 12378, 2004, 13194);
 HEAP32[$k >> 2] = HEAP32[$n0 >> 2];
 while (1) {
  if ((HEAP32[$k >> 2] | 0) > (HEAP32[$n1 >> 2] | 0)) break;
  HEAP32[$coefficient_index >> 2] = (HEAP32[$k >> 2] | 0) - (HEAP32[$n0 >> 2] | 0);
  HEAP32[$coefficient_group >> 2] = Math_imul(HEAP32[$coefficient_width >> 2] | 0, HEAP32[$contributor >> 2] | 0) | 0;
  HEAPF32[$coefficient >> 2] = Math_fround(HEAPF32[(HEAP32[$vertical_coefficients >> 2] | 0) + ((HEAP32[$coefficient_group >> 2] | 0) + (HEAP32[$coefficient_index >> 2] | 0) << 2) >> 2]);
  HEAP32[$ring_buffer_entry >> 2] = _stbir__get_ring_buffer_scanline(HEAP32[$k >> 2] | 0, HEAP32[$ring_buffer >> 2] | 0, HEAP32[$ring_buffer_begin_index >> 2] | 0, HEAP32[$ring_buffer_first_scanline >> 2] | 0, HEAP32[$ring_buffer_entries >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
  L7 : do switch (HEAP32[$channels >> 2] | 0) {
  case 1:
   {
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break L7;
     HEAP32[$in_pixel_index >> 2] = HEAP32[$x >> 2];
     $55 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index >> 2] | 0) + 0 << 2) >> 2]);
     $mul21 = Math_fround($55 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx23 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx23 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx23 >> 2]) + $mul21);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    break;
   }
  case 2:
   {
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break L7;
     HEAP32[$in_pixel_index29 >> 2] = HEAP32[$x >> 2] << 1;
     $66 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index29 >> 2] | 0) + 0 << 2) >> 2]);
     $mul33 = Math_fround($66 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx35 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index29 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx35 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx35 >> 2]) + $mul33);
     $73 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index29 >> 2] | 0) + 1 << 2) >> 2]);
     $mul39 = Math_fround($73 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx41 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index29 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx41 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx41 >> 2]) + $mul39);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    break;
   }
  case 3:
   {
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break L7;
     HEAP32[$in_pixel_index50 >> 2] = (HEAP32[$x >> 2] | 0) * 3;
     $84 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index50 >> 2] | 0) + 0 << 2) >> 2]);
     $mul54 = Math_fround($84 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx56 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index50 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx56 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx56 >> 2]) + $mul54);
     $91 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index50 >> 2] | 0) + 1 << 2) >> 2]);
     $mul60 = Math_fround($91 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx62 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index50 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx62 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx62 >> 2]) + $mul60);
     $98 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index50 >> 2] | 0) + 2 << 2) >> 2]);
     $mul66 = Math_fround($98 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx68 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index50 >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx68 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx68 >> 2]) + $mul66);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    break;
   }
  case 4:
   {
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break L7;
     HEAP32[$in_pixel_index77 >> 2] = HEAP32[$x >> 2] << 2;
     $109 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 0 << 2) >> 2]);
     $mul81 = Math_fround($109 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx83 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 0 << 2) | 0;
     HEAPF32[$arrayidx83 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx83 >> 2]) + $mul81);
     $116 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 1 << 2) >> 2]);
     $mul87 = Math_fround($116 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx89 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 1 << 2) | 0;
     HEAPF32[$arrayidx89 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx89 >> 2]) + $mul87);
     $123 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 2 << 2) >> 2]);
     $mul93 = Math_fround($123 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx95 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 2 << 2) | 0;
     HEAPF32[$arrayidx95 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx95 >> 2]) + $mul93);
     $130 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 3 << 2) >> 2]);
     $mul99 = Math_fround($130 * Math_fround(HEAPF32[$coefficient >> 2]));
     $arrayidx101 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index77 >> 2] | 0) + 3 << 2) | 0;
     HEAPF32[$arrayidx101 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx101 >> 2]) + $mul99);
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
    break;
   }
  default:
   {
    HEAP32[$x >> 2] = 0;
    while (1) {
     if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$output_w >> 2] | 0)) break L7;
     HEAP32[$in_pixel_index109 >> 2] = Math_imul(HEAP32[$x >> 2] | 0, HEAP32[$channels >> 2] | 0) | 0;
     HEAP32[$c >> 2] = 0;
     while (1) {
      if ((HEAP32[$c >> 2] | 0) >= (HEAP32[$channels >> 2] | 0)) break;
      $145 = Math_fround(HEAPF32[(HEAP32[$horizontal_buffer >> 2] | 0) + ((HEAP32[$in_pixel_index109 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) >> 2]);
      $mul116 = Math_fround($145 * Math_fround(HEAPF32[$coefficient >> 2]));
      $arrayidx118 = (HEAP32[$ring_buffer_entry >> 2] | 0) + ((HEAP32[$in_pixel_index109 >> 2] | 0) + (HEAP32[$c >> 2] | 0) << 2) | 0;
      HEAPF32[$arrayidx118 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx118 >> 2]) + $mul116);
      HEAP32[$c >> 2] = (HEAP32[$c >> 2] | 0) + 1;
     }
     HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
    }
   }
  } while (0);
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _GetImageDataNormalized($image) {
 $image = $image | 0;
 var $130 = f0, $141 = f0, $146 = f0, $151 = f0, $159 = f0, $164 = f0, $169 = f0, $174 = f0, $179 = 0, $cond = f0, $div = f0, $div11 = f0, $div134 = f0, $div141 = f0, $div148 = f0, $div155 = f0, $div16 = f0, $div163 = f0, $div170 = f0, $div177 = f0, $div23 = f0, $div29 = f0, $div35 = f0, $div41 = f0, $i = 0, $k = 0, $mul107 = f0, $mul114 = f0, $mul121 = f0, $mul127 = f0, $mul50 = f0, $mul57 = f0, $mul64 = f0, $mul81 = f0, $mul88 = f0, $mul94 = f0, $pixel = 0, $pixel100 = 0, $pixel74 = 0, $pixels = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $pixels = sp + 12 | 0;
 $i = sp + 8 | 0;
 $k = sp + 4 | 0;
 $pixel = sp + 20 | 0;
 $pixel74 = sp + 18 | 0;
 $pixel100 = sp + 16 | 0;
 HEAP32[$pixels >> 2] = _malloc((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 4) | 0;
 if ((HEAP32[$image + 16 >> 2] | 0) >= 11) {
  _TraceLog(4, 14991, sp);
  $179 = HEAP32[$pixels >> 2] | 0;
  STACKTOP = sp;
  return $179 | 0;
 }
 HEAP32[$i >> 2] = 0;
 HEAP32[$k >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0)) break;
  do switch (HEAP32[$image + 16 >> 2] | 0) {
  case 1:
   {
    $div = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $div;
    $div11 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $div11;
    $div16 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $div16;
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    break;
   }
  case 2:
   {
    $div23 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $div23;
    $div29 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $div29;
    $div35 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $div35;
    $div41 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = $div41;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 2;
    break;
   }
  case 5:
   {
    HEAP16[$pixel >> 1] = HEAP16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] | 0;
    $mul50 = Math_fround(Math_fround(((HEAPU16[$pixel >> 1] | 0) & 63488) >> 11 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $mul50;
    $mul57 = Math_fround(Math_fround(((HEAPU16[$pixel >> 1] | 0) & 1984) >> 6 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $mul57;
    $mul64 = Math_fround(Math_fround(((HEAPU16[$pixel >> 1] | 0) & 62) >> 1 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $mul64;
    $cond = ((HEAPU16[$pixel >> 1] | 0) & 1 | 0) == 0 ? Math_fround(0.0) : Math_fround(1.0);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = $cond;
    break;
   }
  case 3:
   {
    HEAP16[$pixel74 >> 1] = HEAP16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] | 0;
    $mul81 = Math_fround(Math_fround(((HEAPU16[$pixel74 >> 1] | 0) & 63488) >> 11 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $mul81;
    $mul88 = Math_fround(Math_fround(((HEAPU16[$pixel74 >> 1] | 0) & 2016) >> 5 | 0) * Math_fround(.0158730168));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $mul88;
    $mul94 = Math_fround(Math_fround((HEAPU16[$pixel74 >> 1] | 0) & 31 | 0) * Math_fround(.0322580636));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $mul94;
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    break;
   }
  case 6:
   {
    HEAP16[$pixel100 >> 1] = HEAP16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] | 0;
    $mul107 = Math_fround(Math_fround(((HEAPU16[$pixel100 >> 1] | 0) & 61440) >> 12 | 0) * Math_fround(.0666666701));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $mul107;
    $mul114 = Math_fround(Math_fround(((HEAPU16[$pixel100 >> 1] | 0) & 3840) >> 8 | 0) * Math_fround(.0666666701));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $mul114;
    $mul121 = Math_fround(Math_fround(((HEAPU16[$pixel100 >> 1] | 0) & 240) >> 4 | 0) * Math_fround(.0666666701));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $mul121;
    $mul127 = Math_fround(Math_fround((HEAPU16[$pixel100 >> 1] | 0) & 15 | 0) * Math_fround(.0666666701));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = $mul127;
    break;
   }
  case 7:
   {
    $div134 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $div134;
    $div141 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $div141;
    $div148 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $div148;
    $div155 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 3) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = $div155;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 4;
    break;
   }
  case 4:
   {
    $div163 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $div163;
    $div170 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $div170;
    $div177 = Math_fround(Math_fround(HEAPU8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2) >> 0] | 0) / Math_fround(255.0));
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $div177;
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 3;
    break;
   }
  case 8:
   {
    $130 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $130;
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = Math_fround(0.0);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = Math_fround(0.0);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    break;
   }
  case 9:
   {
    $141 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $141;
    $146 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1 << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $146;
    $151 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2 << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $151;
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = Math_fround(1.0);
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 3;
    break;
   }
  case 10:
   {
    $159 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) >> 2] = $159;
    $164 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1 << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] = $164;
    $169 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2 << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 8 >> 2] = $169;
    $174 = Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 3 << 2) >> 2]);
    HEAPF32[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] = $174;
    HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 4;
    break;
   }
  default:
   {}
  } while (0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $179 = HEAP32[$pixels >> 2] | 0;
 STACKTOP = sp;
 return $179 | 0;
}

function _DrawCircleSector($center, $radius, $startAngle, $endAngle, $segments, $color) {
 $center = $center | 0;
 $radius = Math_fround($radius);
 $startAngle = $startAngle | 0;
 $endAngle = $endAngle | 0;
 $segments = $segments | 0;
 $color = $color | 0;
 var $101 = f0, $103 = f0, $106 = f0, $109 = f0, $110 = f0, $112 = f0, $114 = f0, $115 = f0, $117 = f0, $119 = f0, $122 = f0, $124 = f0, $26 = f0, $28 = f0, $30 = f0, $32 = f0, $34 = f0, $37 = f0, $39 = f0, $41 = f0, $43 = f0, $45 = f0, $48 = f0, $51 = f0, $52 = f0, $54 = f0, $56 = f0, $57 = f0, $59 = f0, $61 = f0, $64 = f0, $66 = f0, $67 = f0, $69 = f0, $71 = f0, $72 = f0, $74 = f0, $84 = f0, $86 = f0, $88 = f0, $90 = f0, $92 = f0, $95 = f0, $97 = f0, $99 = f0, $add = f0, $add101 = f0, $add106 = f0, $add109 = f0, $add116 = f0, $add122 = f0, $add42 = f0, $add47 = f0, $add50 = f0, $add57 = f0, $add63 = f0, $add73 = f0, $add95 = f0, $angle = 0, $conv = f0, $conv11 = 0, $conv18 = f0, $div108 = f0, $div124 = f0, $div32 = f0, $div36 = f0, $div49 = f0, $div65 = f0, $div88 = f0, $div94 = f0, $endAngle$addr = 0, $i = 0, $mul80 = f0, $radius$addr = 0, $segments$addr = 0, $startAngle$addr = 0, $stepLength = 0, $th = 0, $tmp = 0, $tmp27 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $radius$addr = sp + 52 | 0;
 $startAngle$addr = sp + 48 | 0;
 $endAngle$addr = sp + 44 | 0;
 $segments$addr = sp + 40 | 0;
 $tmp = sp + 36 | 0;
 $th = sp + 32 | 0;
 $stepLength = sp + 28 | 0;
 $angle = sp + 24 | 0;
 $tmp27 = sp + 4 | 0;
 $i = sp;
 HEAPF32[$radius$addr >> 2] = $radius;
 HEAP32[$startAngle$addr >> 2] = $startAngle;
 HEAP32[$endAngle$addr >> 2] = $endAngle;
 HEAP32[$segments$addr >> 2] = $segments;
 if (Math_fround(HEAPF32[$radius$addr >> 2]) <= Math_fround(0.0)) HEAPF32[$radius$addr >> 2] = Math_fround(.100000001);
 if ((HEAP32[$endAngle$addr >> 2] | 0) < (HEAP32[$startAngle$addr >> 2] | 0)) {
  HEAP32[$tmp >> 2] = HEAP32[$startAngle$addr >> 2];
  HEAP32[$startAngle$addr >> 2] = HEAP32[$endAngle$addr >> 2];
  HEAP32[$endAngle$addr >> 2] = HEAP32[$tmp >> 2];
 }
 if ((HEAP32[$segments$addr >> 2] | 0) < 4) {
  HEAPF32[$th >> 2] = Math_fround(_acosf(Math_fround(Math_fround(Math_fround(+Math_pow(+Math_fround(Math_fround(1.0) - Math_fround(Math_fround(.5) / Math_fround(HEAPF32[$radius$addr >> 2]))), 2.0)) * Math_fround(2.0)) - Math_fround(1.0))));
  $conv = Math_fround((HEAP32[$endAngle$addr >> 2] | 0) - (HEAP32[$startAngle$addr >> 2] | 0) | 0);
  $conv11 = ~~Math_fround(Math_fround($conv * Math_fround(Math_ceil(Math_fround(Math_fround(6.28318548) / Math_fround(HEAPF32[$th >> 2]))))) / Math_fround(360.0));
  HEAP32[$segments$addr >> 2] = $conv11;
  HEAP32[$segments$addr >> 2] = (HEAP32[$segments$addr >> 2] | 0) <= 0 ? 4 : $conv11;
 }
 $conv18 = Math_fround((HEAP32[$endAngle$addr >> 2] | 0) - (HEAP32[$startAngle$addr >> 2] | 0) | 0);
 HEAPF32[$stepLength >> 2] = Math_fround($conv18 / Math_fround(HEAP32[$segments$addr >> 2] | 0));
 HEAPF32[$angle >> 2] = Math_fround(HEAP32[$startAngle$addr >> 2] | 0);
 if (_rlCheckBufferLimit((HEAP32[$segments$addr >> 2] << 2 | 0) / 2 | 0) | 0) _rlglDraw();
 _GetShapesTexture($tmp27);
 _rlEnableTexture(HEAP32[$tmp27 >> 2] | 0);
 _rlBegin(7);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= ((HEAP32[$segments$addr >> 2] | 0) / 2 | 0 | 0)) break;
  _rlColor4ub(HEAP8[$color >> 0] | 0, HEAP8[$color + 1 >> 0] | 0, HEAP8[$color + 2 >> 0] | 0, HEAP8[$color + 3 >> 0] | 0);
  $26 = Math_fround(HEAPF32[7557]);
  $div32 = Math_fround($26 / Math_fround(HEAP32[7562] | 0));
  $28 = Math_fround(HEAPF32[7558]);
  _rlTexCoord2f($div32, Math_fround($28 / Math_fround(HEAP32[7563] | 0)));
  $30 = Math_fround(HEAPF32[$center >> 2]);
  _rlVertex2f($30, Math_fround(HEAPF32[$center + 4 >> 2]));
  $32 = Math_fround(HEAPF32[7557]);
  $div36 = Math_fround($32 / Math_fround(HEAP32[7562] | 0));
  $34 = Math_fround(HEAPF32[7558]);
  $add = Math_fround($34 + Math_fround(HEAPF32[7560]));
  _rlTexCoord2f($div36, Math_fround($add / Math_fround(HEAP32[7563] | 0)));
  $37 = Math_fround(HEAPF32[$center >> 2]);
  $39 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround(HEAPF32[$angle >> 2]) * Math_fround(.0174532924))));
  $add42 = Math_fround($37 + Math_fround($39 * Math_fround(HEAPF32[$radius$addr >> 2])));
  $41 = Math_fround(HEAPF32[$center + 4 >> 2]);
  $43 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround(HEAPF32[$angle >> 2]) * Math_fround(.0174532924))));
  _rlVertex2f($add42, Math_fround($41 + Math_fround($43 * Math_fround(HEAPF32[$radius$addr >> 2]))));
  $45 = Math_fround(HEAPF32[7557]);
  $add47 = Math_fround($45 + Math_fround(HEAPF32[7559]));
  $div49 = Math_fround($add47 / Math_fround(HEAP32[7562] | 0));
  $48 = Math_fround(HEAPF32[7558]);
  $add50 = Math_fround($48 + Math_fround(HEAPF32[7560]));
  _rlTexCoord2f($div49, Math_fround($add50 / Math_fround(HEAP32[7563] | 0)));
  $51 = Math_fround(HEAPF32[$center >> 2]);
  $52 = Math_fround(HEAPF32[$angle >> 2]);
  $54 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround($52 + Math_fround(HEAPF32[$stepLength >> 2])) * Math_fround(.0174532924))));
  $add57 = Math_fround($51 + Math_fround($54 * Math_fround(HEAPF32[$radius$addr >> 2])));
  $56 = Math_fround(HEAPF32[$center + 4 >> 2]);
  $57 = Math_fround(HEAPF32[$angle >> 2]);
  $59 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround($57 + Math_fround(HEAPF32[$stepLength >> 2])) * Math_fround(.0174532924))));
  _rlVertex2f($add57, Math_fround($56 + Math_fround($59 * Math_fround(HEAPF32[$radius$addr >> 2]))));
  $61 = Math_fround(HEAPF32[7557]);
  $add63 = Math_fround($61 + Math_fround(HEAPF32[7559]));
  $div65 = Math_fround($add63 / Math_fround(HEAP32[7562] | 0));
  $64 = Math_fround(HEAPF32[7558]);
  _rlTexCoord2f($div65, Math_fround($64 / Math_fround(HEAP32[7563] | 0)));
  $66 = Math_fround(HEAPF32[$center >> 2]);
  $67 = Math_fround(HEAPF32[$angle >> 2]);
  $69 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround($67 + Math_fround(Math_fround(HEAPF32[$stepLength >> 2]) * Math_fround(2.0))) * Math_fround(.0174532924))));
  $add73 = Math_fround($66 + Math_fround($69 * Math_fround(HEAPF32[$radius$addr >> 2])));
  $71 = Math_fround(HEAPF32[$center + 4 >> 2]);
  $72 = Math_fround(HEAPF32[$angle >> 2]);
  $74 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround($72 + Math_fround(Math_fround(HEAPF32[$stepLength >> 2]) * Math_fround(2.0))) * Math_fround(.0174532924))));
  _rlVertex2f($add73, Math_fround($71 + Math_fround($74 * Math_fround(HEAPF32[$radius$addr >> 2]))));
  $mul80 = Math_fround(Math_fround(HEAPF32[$stepLength >> 2]) * Math_fround(2.0));
  HEAPF32[$angle >> 2] = Math_fround(Math_fround(HEAPF32[$angle >> 2]) + $mul80);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if (!((HEAP32[$segments$addr >> 2] | 0) % 2 | 0)) {
  _rlEnd();
  _rlDisableTexture();
  STACKTOP = sp;
  return;
 }
 _rlColor4ub(HEAP8[$color >> 0] | 0, HEAP8[$color + 1 >> 0] | 0, HEAP8[$color + 2 >> 0] | 0, HEAP8[$color + 3 >> 0] | 0);
 $84 = Math_fround(HEAPF32[7557]);
 $div88 = Math_fround($84 / Math_fround(HEAP32[7562] | 0));
 $86 = Math_fround(HEAPF32[7558]);
 _rlTexCoord2f($div88, Math_fround($86 / Math_fround(HEAP32[7563] | 0)));
 $88 = Math_fround(HEAPF32[$center >> 2]);
 _rlVertex2f($88, Math_fround(HEAPF32[$center + 4 >> 2]));
 $90 = Math_fround(HEAPF32[7557]);
 $div94 = Math_fround($90 / Math_fround(HEAP32[7562] | 0));
 $92 = Math_fround(HEAPF32[7558]);
 $add95 = Math_fround($92 + Math_fround(HEAPF32[7560]));
 _rlTexCoord2f($div94, Math_fround($add95 / Math_fround(HEAP32[7563] | 0)));
 $95 = Math_fround(HEAPF32[$center >> 2]);
 $97 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround(HEAPF32[$angle >> 2]) * Math_fround(.0174532924))));
 $add101 = Math_fround($95 + Math_fround($97 * Math_fround(HEAPF32[$radius$addr >> 2])));
 $99 = Math_fround(HEAPF32[$center + 4 >> 2]);
 $101 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround(HEAPF32[$angle >> 2]) * Math_fround(.0174532924))));
 _rlVertex2f($add101, Math_fround($99 + Math_fround($101 * Math_fround(HEAPF32[$radius$addr >> 2]))));
 $103 = Math_fround(HEAPF32[7557]);
 $add106 = Math_fround($103 + Math_fround(HEAPF32[7559]));
 $div108 = Math_fround($add106 / Math_fround(HEAP32[7562] | 0));
 $106 = Math_fround(HEAPF32[7558]);
 $add109 = Math_fround($106 + Math_fround(HEAPF32[7560]));
 _rlTexCoord2f($div108, Math_fround($add109 / Math_fround(HEAP32[7563] | 0)));
 $109 = Math_fround(HEAPF32[$center >> 2]);
 $110 = Math_fround(HEAPF32[$angle >> 2]);
 $112 = Math_fround(+_llvm_sin_f32(+Math_fround(Math_fround($110 + Math_fround(HEAPF32[$stepLength >> 2])) * Math_fround(.0174532924))));
 $add116 = Math_fround($109 + Math_fround($112 * Math_fround(HEAPF32[$radius$addr >> 2])));
 $114 = Math_fround(HEAPF32[$center + 4 >> 2]);
 $115 = Math_fround(HEAPF32[$angle >> 2]);
 $117 = Math_fround(+_llvm_cos_f32(+Math_fround(Math_fround($115 + Math_fround(HEAPF32[$stepLength >> 2])) * Math_fround(.0174532924))));
 _rlVertex2f($add116, Math_fround($114 + Math_fround($117 * Math_fround(HEAPF32[$radius$addr >> 2]))));
 $119 = Math_fround(HEAPF32[7557]);
 $add122 = Math_fround($119 + Math_fround(HEAPF32[7559]));
 $div124 = Math_fround($add122 / Math_fround(HEAP32[7562] | 0));
 $122 = Math_fround(HEAPF32[7558]);
 _rlTexCoord2f($div124, Math_fround($122 / Math_fround(HEAP32[7563] | 0)));
 $124 = Math_fround(HEAPF32[$center >> 2]);
 _rlVertex2f($124, Math_fround(HEAPF32[$center + 4 >> 2]));
 _rlEnd();
 _rlDisableTexture();
 STACKTOP = sp;
 return;
}

function _stbi_write_png_to_mem($pixels, $stride_bytes, $x, $y, $n, $out_len) {
 $pixels = $pixels | 0;
 $stride_bytes = $stride_bytes | 0;
 $x = $x | 0;
 $y = $y | 0;
 $n = $n | 0;
 $out_len = $out_len | 0;
 var $116 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $167 = 0, $add = 0, $add$ptr45 = 0, $best_filter = 0, $best_filter_val = 0, $call23 = 0, $conv120 = 0, $ctype = 0, $est = 0, $filt = 0, $filter_type = 0, $force_filter = 0, $i = 0, $j = 0, $line_buffer = 0, $n$addr = 0, $o = 0, $out = 0, $out_len$addr = 0, $pixels$addr = 0, $retval = 0, $sig = 0, $stride_bytes$addr = 0, $x$addr = 0, $y$addr = 0, $zlen = 0, $zlib = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $retval = sp + 96 | 0;
 $pixels$addr = sp + 92 | 0;
 $stride_bytes$addr = sp + 88 | 0;
 $x$addr = sp + 84 | 0;
 $y$addr = sp + 80 | 0;
 $n$addr = sp + 76 | 0;
 $out_len$addr = sp + 72 | 0;
 $force_filter = sp + 68 | 0;
 $ctype = sp;
 $sig = sp + 104 | 0;
 $out = sp + 64 | 0;
 $o = sp + 60 | 0;
 $filt = sp + 56 | 0;
 $zlib = sp + 52 | 0;
 $line_buffer = sp + 48 | 0;
 $j = sp + 44 | 0;
 $zlen = sp + 40 | 0;
 $filter_type = sp + 36 | 0;
 $best_filter = sp + 32 | 0;
 $best_filter_val = sp + 28 | 0;
 $est = sp + 24 | 0;
 $i = sp + 20 | 0;
 HEAP32[$pixels$addr >> 2] = $pixels;
 HEAP32[$stride_bytes$addr >> 2] = $stride_bytes;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$out_len$addr >> 2] = $out_len;
 HEAP32[$force_filter >> 2] = -1;
 HEAP32[$ctype >> 2] = HEAP32[1040];
 HEAP32[$ctype + 4 >> 2] = HEAP32[1041];
 HEAP32[$ctype + 8 >> 2] = HEAP32[1042];
 HEAP32[$ctype + 12 >> 2] = HEAP32[1043];
 HEAP32[$ctype + 16 >> 2] = HEAP32[1044];
 HEAP8[$sig >> 0] = HEAP8[12289] | 0;
 HEAP8[$sig + 1 >> 0] = HEAP8[12290] | 0;
 HEAP8[$sig + 2 >> 0] = HEAP8[12291] | 0;
 HEAP8[$sig + 3 >> 0] = HEAP8[12292] | 0;
 HEAP8[$sig + 4 >> 0] = HEAP8[12293] | 0;
 HEAP8[$sig + 5 >> 0] = HEAP8[12294] | 0;
 HEAP8[$sig + 6 >> 0] = HEAP8[12295] | 0;
 HEAP8[$sig + 7 >> 0] = HEAP8[12296] | 0;
 if (!(HEAP32[$stride_bytes$addr >> 2] | 0)) HEAP32[$stride_bytes$addr >> 2] = Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0;
 if ((HEAP32[$force_filter >> 2] | 0) >= 5) HEAP32[$force_filter >> 2] = -1;
 $add = (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) + 1 | 0;
 HEAP32[$filt >> 2] = _malloc(Math_imul($add, HEAP32[$y$addr >> 2] | 0) | 0) | 0;
 if (!(HEAP32[$filt >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $167 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $167 | 0;
 }
 HEAP32[$line_buffer >> 2] = _malloc(Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) | 0;
 if (!(HEAP32[$line_buffer >> 2] | 0)) {
  _free(HEAP32[$filt >> 2] | 0);
  HEAP32[$retval >> 2] = 0;
  $167 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $167 | 0;
 }
 HEAP32[$j >> 2] = 0;
 while (1) {
  if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$y$addr >> 2] | 0)) break;
  if ((HEAP32[$force_filter >> 2] | 0) > -1) {
   HEAP32[$filter_type >> 2] = HEAP32[$force_filter >> 2];
   _stbiw__encode_png_line(HEAP32[$pixels$addr >> 2] | 0, HEAP32[$stride_bytes$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$j >> 2] | 0, HEAP32[$n$addr >> 2] | 0, HEAP32[$force_filter >> 2] | 0, HEAP32[$line_buffer >> 2] | 0);
  } else {
   HEAP32[$best_filter >> 2] = 0;
   HEAP32[$best_filter_val >> 2] = 2147483647;
   HEAP32[$filter_type >> 2] = 0;
   while (1) {
    if ((HEAP32[$filter_type >> 2] | 0) >= 5) break;
    _stbiw__encode_png_line(HEAP32[$pixels$addr >> 2] | 0, HEAP32[$stride_bytes$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$j >> 2] | 0, HEAP32[$n$addr >> 2] | 0, HEAP32[$filter_type >> 2] | 0, HEAP32[$line_buffer >> 2] | 0);
    HEAP32[$est >> 2] = 0;
    HEAP32[$i >> 2] = 0;
    while (1) {
     if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
     $call23 = Math_abs(HEAP8[(HEAP32[$line_buffer >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) | 0;
     HEAP32[$est >> 2] = (HEAP32[$est >> 2] | 0) + $call23;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
    if ((HEAP32[$est >> 2] | 0) < (HEAP32[$best_filter_val >> 2] | 0)) {
     HEAP32[$best_filter_val >> 2] = HEAP32[$est >> 2];
     HEAP32[$best_filter >> 2] = HEAP32[$filter_type >> 2];
    }
    HEAP32[$filter_type >> 2] = (HEAP32[$filter_type >> 2] | 0) + 1;
   }
   if ((HEAP32[$filter_type >> 2] | 0) != (HEAP32[$best_filter >> 2] | 0)) {
    _stbiw__encode_png_line(HEAP32[$pixels$addr >> 2] | 0, HEAP32[$stride_bytes$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$j >> 2] | 0, HEAP32[$n$addr >> 2] | 0, HEAP32[$best_filter >> 2] | 0, HEAP32[$line_buffer >> 2] | 0);
    HEAP32[$filter_type >> 2] = HEAP32[$best_filter >> 2];
   }
  }
  HEAP8[(HEAP32[$filt >> 2] | 0) + (Math_imul(HEAP32[$j >> 2] | 0, (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) + 1 | 0) | 0) >> 0] = HEAP32[$filter_type >> 2];
  $add$ptr45 = (HEAP32[$filt >> 2] | 0) + (Math_imul(HEAP32[$j >> 2] | 0, (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) + 1 | 0) | 0) + 1 | 0;
  _memmove($add$ptr45 | 0, HEAP32[$line_buffer >> 2] | 0, Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) | 0;
  HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
 }
 _free(HEAP32[$line_buffer >> 2] | 0);
 HEAP32[$zlib >> 2] = _stbi_zlib_compress(HEAP32[$filt >> 2] | 0, Math_imul(HEAP32[$y$addr >> 2] | 0, (Math_imul(HEAP32[$x$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) + 1 | 0) | 0, $zlen, 8) | 0;
 _free(HEAP32[$filt >> 2] | 0);
 if (!(HEAP32[$zlib >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $167 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $167 | 0;
 }
 HEAP32[$out >> 2] = _malloc(45 + (HEAP32[$zlen >> 2] | 0) + 12 | 0) | 0;
 if (!(HEAP32[$out >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $167 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $167 | 0;
 }
 HEAP32[HEAP32[$out_len$addr >> 2] >> 2] = 45 + (HEAP32[$zlen >> 2] | 0) + 12;
 HEAP32[$o >> 2] = HEAP32[$out >> 2];
 _memmove(HEAP32[$o >> 2] | 0, $sig | 0, 8) | 0;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 8;
 HEAP8[HEAP32[$o >> 2] >> 0] = 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = 13;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 HEAP8[HEAP32[$o >> 2] >> 0] = HEAP8[12297] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = HEAP8[12298] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = HEAP8[12299] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = HEAP8[12300] | 0;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 HEAP8[HEAP32[$o >> 2] >> 0] = HEAP32[$x$addr >> 2] >> 24;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = HEAP32[$x$addr >> 2] >> 16;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = HEAP32[$x$addr >> 2] >> 8;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = HEAP32[$x$addr >> 2];
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 HEAP8[HEAP32[$o >> 2] >> 0] = HEAP32[$y$addr >> 2] >> 24;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = HEAP32[$y$addr >> 2] >> 16;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = HEAP32[$y$addr >> 2] >> 8;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = HEAP32[$y$addr >> 2];
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 $116 = HEAP32[$o >> 2] | 0;
 HEAP32[$o >> 2] = $116 + 1;
 HEAP8[$116 >> 0] = 8;
 $conv120 = HEAP32[$ctype + (HEAP32[$n$addr >> 2] << 2) >> 2] & 255;
 $119 = HEAP32[$o >> 2] | 0;
 HEAP32[$o >> 2] = $119 + 1;
 HEAP8[$119 >> 0] = $conv120;
 $120 = HEAP32[$o >> 2] | 0;
 HEAP32[$o >> 2] = $120 + 1;
 HEAP8[$120 >> 0] = 0;
 $121 = HEAP32[$o >> 2] | 0;
 HEAP32[$o >> 2] = $121 + 1;
 HEAP8[$121 >> 0] = 0;
 $122 = HEAP32[$o >> 2] | 0;
 HEAP32[$o >> 2] = $122 + 1;
 HEAP8[$122 >> 0] = 0;
 _stbiw__wpcrc($o, 13);
 HEAP8[HEAP32[$o >> 2] >> 0] = HEAP32[$zlen >> 2] >> 24;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = HEAP32[$zlen >> 2] >> 16;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = HEAP32[$zlen >> 2] >> 8;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = HEAP32[$zlen >> 2];
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 HEAP8[HEAP32[$o >> 2] >> 0] = HEAP8[12302] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = HEAP8[12303] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = HEAP8[12304] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = HEAP8[12305] | 0;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 _memmove(HEAP32[$o >> 2] | 0, HEAP32[$zlib >> 2] | 0, HEAP32[$zlen >> 2] | 0) | 0;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + (HEAP32[$zlen >> 2] | 0);
 _free(HEAP32[$zlib >> 2] | 0);
 _stbiw__wpcrc($o, HEAP32[$zlen >> 2] | 0);
 HEAP8[HEAP32[$o >> 2] >> 0] = 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = 0;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 HEAP8[HEAP32[$o >> 2] >> 0] = HEAP8[12307] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 1 >> 0] = HEAP8[12308] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 2 >> 0] = HEAP8[12309] | 0;
 HEAP8[(HEAP32[$o >> 2] | 0) + 3 >> 0] = HEAP8[12310] | 0;
 HEAP32[$o >> 2] = (HEAP32[$o >> 2] | 0) + 4;
 _stbiw__wpcrc($o, 0);
 if ((HEAP32[$o >> 2] | 0) != ((HEAP32[$out >> 2] | 0) + (HEAP32[HEAP32[$out_len$addr >> 2] >> 2] | 0) | 0)) ___assert_fail(12312, 12174, 1155, 12332);
 HEAP32[$retval >> 2] = HEAP32[$out >> 2];
 $167 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $167 | 0;
}

function _GetImageData($image) {
 $image = $image | 0;
 var $185 = 0, $conv102 = 0, $conv116 = 0, $conv124 = 0, $conv132 = 0, $conv139 = 0, $conv185 = 0, $conv198 = 0, $conv205 = 0, $conv212 = 0, $conv222 = 0, $conv228 = 0, $conv234 = 0, $conv240 = 0, $conv53 = 0, $conv61 = 0, $conv69 = 0, $conv87 = 0, $conv95 = 0, $i = 0, $k = 0, $pixel = 0, $pixel108 = 0, $pixel79 = 0, $pixels = 0, $retval = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $retval = sp + 24 | 0;
 $pixels = sp + 20 | 0;
 $i = sp + 16 | 0;
 $k = sp + 12 | 0;
 $pixel = sp + 32 | 0;
 $pixel79 = sp + 30 | 0;
 $pixel108 = sp + 28 | 0;
 if (HEAP32[$image + 4 >> 2] | 0) if (HEAP32[$image + 8 >> 2] | 0) {
  HEAP32[$pixels >> 2] = _malloc((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 2) | 0;
  L4 : do if ((HEAP32[$image + 16 >> 2] | 0) >= 11) _TraceLog(4, 14991, $vararg_buffer); else {
   if ((HEAP32[$image + 16 >> 2] | 0) == 8) label = 9; else if ((HEAP32[$image + 16 >> 2] | 0) == 9) label = 9; else if ((HEAP32[$image + 16 >> 2] | 0) == 10) label = 9;
   if ((label | 0) == 9) _TraceLog(4, 15055, $vararg_buffer1);
   HEAP32[$i >> 2] = 0;
   HEAP32[$k >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0)) break L4;
    do switch (HEAP32[$image + 16 >> 2] | 0) {
    case 1:
     {
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = -1;
      break;
     }
    case 2:
     {
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1) >> 0] | 0;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 2;
      break;
     }
    case 5:
     {
      HEAP16[$pixel >> 1] = HEAP16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] | 0;
      $conv53 = ~~Math_fround(Math_fround(((HEAPU16[$pixel >> 1] | 0) & 63488) >> 11 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = $conv53;
      $conv61 = ~~Math_fround(Math_fround(((HEAPU16[$pixel >> 1] | 0) & 1984) >> 6 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = $conv61;
      $conv69 = ~~Math_fround(Math_fround(((HEAPU16[$pixel >> 1] | 0) & 62) >> 1 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = $conv69;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = ((HEAPU16[$pixel >> 1] | 0) & 1) * 255;
      break;
     }
    case 3:
     {
      HEAP16[$pixel79 >> 1] = HEAP16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] | 0;
      $conv87 = ~~Math_fround(Math_fround(((HEAPU16[$pixel79 >> 1] | 0) & 63488) >> 11 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = $conv87;
      $conv95 = ~~Math_fround(Math_fround(((HEAPU16[$pixel79 >> 1] | 0) & 2016) >> 5 | 0) * Math_fround(4.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = $conv95;
      $conv102 = ~~Math_fround(Math_fround((HEAPU16[$pixel79 >> 1] | 0) & 31 | 0) * Math_fround(8.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = $conv102;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = -1;
      break;
     }
    case 6:
     {
      HEAP16[$pixel108 >> 1] = HEAP16[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] << 1) >> 1] | 0;
      $conv116 = ~~Math_fround(Math_fround(((HEAPU16[$pixel108 >> 1] | 0) & 61440) >> 12 | 0) * Math_fround(17.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = $conv116;
      $conv124 = ~~Math_fround(Math_fround(((HEAPU16[$pixel108 >> 1] | 0) & 3840) >> 8 | 0) * Math_fround(17.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = $conv124;
      $conv132 = ~~Math_fround(Math_fround(((HEAPU16[$pixel108 >> 1] | 0) & 240) >> 4 | 0) * Math_fround(17.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = $conv132;
      $conv139 = ~~Math_fround(Math_fround((HEAPU16[$pixel108 >> 1] | 0) & 15 | 0) * Math_fround(17.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = $conv139;
      break;
     }
    case 7:
     {
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 3) >> 0] | 0;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 4;
      break;
     }
    case 4:
     {
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] | 0) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2) >> 0] | 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = -1;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 3;
      break;
     }
    case 8:
     {
      $conv185 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = $conv185;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = 0;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = -1;
      break;
     }
    case 9:
     {
      $conv198 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = $conv198;
      $conv205 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 1 << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = $conv205;
      $conv212 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + ((HEAP32[$k >> 2] | 0) + 2 << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = $conv212;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = -1;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 3;
      break;
     }
    case 10:
     {
      $conv222 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 0] = $conv222;
      $conv228 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 1 >> 0] = $conv228;
      $conv234 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 2 >> 0] = $conv234;
      $conv240 = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[$image >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 2]) * Math_fround(255.0)) & 255;
      HEAP8[(HEAP32[$pixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) + 3 >> 0] = $conv240;
      HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 4;
      break;
     }
    default:
     {}
    } while (0);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
  } while (0);
  HEAP32[$retval >> 2] = HEAP32[$pixels >> 2];
  $185 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $185 | 0;
 }
 HEAP32[$retval >> 2] = 0;
 $185 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $185 | 0;
}

function _rlglInit($width, $height) {
 $width = $width | 0;
 $height = $height | 0;
 var $23 = 0, $arrayidx196 = 0, $extList = 0, $extensions = 0, $extensionsDup = 0, $height$addr = 0, $i = 0, $i17 = 0, $i179 = 0, $i191 = 0, $len = 0, $numExt = 0, $pixels = 0, $tmp = 0, $tmp177 = 0, $tmp197 = 0, $tmp201 = 0, $tmp202 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $width$addr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480);
 $vararg_buffer44 = sp + 152 | 0;
 $vararg_buffer42 = sp + 144 | 0;
 $vararg_buffer39 = sp + 136 | 0;
 $vararg_buffer37 = sp + 128 | 0;
 $vararg_buffer35 = sp + 120 | 0;
 $vararg_buffer32 = sp + 112 | 0;
 $vararg_buffer30 = sp + 104 | 0;
 $vararg_buffer28 = sp + 96 | 0;
 $vararg_buffer26 = sp + 88 | 0;
 $vararg_buffer24 = sp + 80 | 0;
 $vararg_buffer22 = sp + 72 | 0;
 $vararg_buffer20 = sp + 64 | 0;
 $vararg_buffer18 = sp + 56 | 0;
 $vararg_buffer16 = sp + 48 | 0;
 $vararg_buffer14 = sp + 40 | 0;
 $vararg_buffer11 = sp + 32 | 0;
 $vararg_buffer8 = sp + 24 | 0;
 $vararg_buffer5 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $width$addr = sp + 464 | 0;
 $height$addr = sp + 460 | 0;
 $numExt = sp + 456 | 0;
 $extList = sp + 452 | 0;
 $extensions = sp + 448 | 0;
 $len = sp + 444 | 0;
 $extensionsDup = sp + 440 | 0;
 $i = sp + 436 | 0;
 $i17 = sp + 432 | 0;
 $pixels = sp + 468 | 0;
 $tmp = sp + 424 | 0;
 $tmp177 = sp + 360 | 0;
 $i179 = sp + 356 | 0;
 $i191 = sp + 352 | 0;
 $tmp197 = sp + 288 | 0;
 $tmp201 = sp + 224 | 0;
 $tmp202 = sp + 160 | 0;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$vararg_buffer >> 2] = _glGetString(7936) | 0;
 _TraceLog(3, 7941, $vararg_buffer);
 HEAP32[$vararg_buffer2 >> 2] = _glGetString(7937) | 0;
 _TraceLog(3, 7959, $vararg_buffer2);
 HEAP32[$vararg_buffer5 >> 2] = _glGetString(7938) | 0;
 _TraceLog(3, 7977, $vararg_buffer5);
 HEAP32[$vararg_buffer8 >> 2] = _glGetString(35724) | 0;
 _TraceLog(3, 7995, $vararg_buffer8);
 HEAP32[$numExt >> 2] = 0;
 HEAP32[$extList >> 2] = _malloc(2048) | 0;
 HEAP32[$extensions >> 2] = _glGetString(7939) | 0;
 HEAP32[$len >> 2] = (_strlen(HEAP32[$extensions >> 2] | 0) | 0) + 1;
 HEAP32[$extensionsDup >> 2] = _calloc(HEAP32[$len >> 2] | 0, 1) | 0;
 _strcpy(HEAP32[$extensionsDup >> 2] | 0, HEAP32[$extensions >> 2] | 0) | 0;
 HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$numExt >> 2] << 2) >> 2] = HEAP32[$extensionsDup >> 2];
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$len >> 2] | 0)) break;
  if ((HEAP8[(HEAP32[$extensionsDup >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) == 32) {
   HEAP8[(HEAP32[$extensionsDup >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = 0;
   HEAP32[$numExt >> 2] = (HEAP32[$numExt >> 2] | 0) + 1;
   HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$numExt >> 2] << 2) >> 2] = (HEAP32[$extensionsDup >> 2] | 0) + ((HEAP32[$i >> 2] | 0) + 1);
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$vararg_buffer11 >> 2] = HEAP32[$numExt >> 2];
 _TraceLog(3, 8013, $vararg_buffer11);
 HEAP32[$i17 >> 2] = 0;
 while (1) {
  $23 = HEAP32[$extList >> 2] | 0;
  if ((HEAP32[$i17 >> 2] | 0) >= (HEAP32[$numExt >> 2] | 0)) break;
  if (!(_strcmp(HEAP32[$23 + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8048) | 0)) {
   HEAP32[7498] = _eglGetProcAddress(18712) | 0;
   HEAP32[7419] = _eglGetProcAddress(18667) | 0;
   HEAP32[7497] = _eglGetProcAddress(18688) | 0;
   if ((HEAP32[7498] | 0) != 0 & (HEAP32[7419] | 0) != 0 & (HEAP32[7497] | 0) != 0) HEAP8[30881] = 1;
  }
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8075) | 0)) HEAP8[30883] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8095) | 0)) HEAP8[30884] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8167) | 0)) label = 18; else if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8199) | 0)) label = 18; else if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8232) | 0)) label = 18;
  if ((label | 0) == 18) {
   label = 0;
   HEAP8[30885] = 1;
  }
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8272) | 0)) label = 21; else if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8308) | 0)) label = 21;
  if ((label | 0) == 21) {
   label = 0;
   HEAP8[30886] = 1;
  }
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8341) | 0)) HEAP8[30887] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8366) | 0)) HEAP8[30888] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8399) | 0)) HEAP8[30889] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8435) | 0)) {
   HEAP8[30890] = 1;
   _glGetFloatv(34047, 29984);
  }
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8469) | 0)) HEAP8[30882] = 1;
  if (!(_strcmp(HEAP32[(HEAP32[$extList >> 2] | 0) + (HEAP32[$i17 >> 2] << 2) >> 2] | 0, 8497) | 0)) HEAP8[30891] = 1;
  HEAP32[$i17 >> 2] = (HEAP32[$i17 >> 2] | 0) + 1;
 }
 _free($23);
 _free(HEAP32[$extensionsDup >> 2] | 0);
 if (HEAP8[30881] & 1) _TraceLog(3, 8517, $vararg_buffer14); else _TraceLog(4, 8592, $vararg_buffer16);
 if (HEAP8[30883] & 1) _TraceLog(3, 8653, $vararg_buffer18); else _TraceLog(4, 8728, $vararg_buffer20);
 if (HEAP8[30885] & 1) _TraceLog(3, 8820, $vararg_buffer22);
 if (HEAP8[30886] & 1) _TraceLog(3, 8866, $vararg_buffer24);
 if (HEAP8[30887] & 1) _TraceLog(3, 8913, $vararg_buffer26);
 if (HEAP8[30888] & 1) _TraceLog(3, 8964, $vararg_buffer28);
 if (HEAP8[30889] & 1) _TraceLog(3, 9011, $vararg_buffer30);
 if (HEAP8[30890] & 1) {
  HEAPF64[$vararg_buffer32 >> 3] = +Math_fround(HEAPF32[7496]);
  _TraceLog(3, 9058, $vararg_buffer32);
 }
 if (HEAP8[30882] & 1) _TraceLog(3, 9124, $vararg_buffer35);
 if (HEAP8[30891] & 1) _TraceLog(3, 9177, $vararg_buffer37);
 HEAP8[$pixels >> 0] = HEAP8[9212] | 0;
 HEAP8[$pixels + 1 >> 0] = HEAP8[9213] | 0;
 HEAP8[$pixels + 2 >> 0] = HEAP8[9214] | 0;
 HEAP8[$pixels + 3 >> 0] = HEAP8[9215] | 0;
 HEAP32[7416] = _rlLoadTexture($pixels, 1, 1, 7, 1) | 0;
 if (HEAP32[7416] | 0) {
  HEAP32[$vararg_buffer39 >> 2] = HEAP32[7416];
  _TraceLog(3, 9216, $vararg_buffer39);
 } else _TraceLog(4, 9267, $vararg_buffer42);
 _LoadShaderDefault($tmp);
 HEAP32[7499] = HEAP32[$tmp >> 2];
 HEAP32[7500] = HEAP32[$tmp + 4 >> 2];
 HEAP32[7417] = HEAP32[7499];
 HEAP32[7418] = HEAP32[7500];
 _LoadBuffersDefault();
 _MatrixIdentity($tmp177);
 dest = 29588;
 src = $tmp177;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[7413] = _malloc(4096) | 0;
 HEAP32[$i179 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i179 >> 2] | 0) >= 256) break;
  HEAP32[(HEAP32[7413] | 0) + (HEAP32[$i179 >> 2] << 4) >> 2] = 7;
  HEAP32[(HEAP32[7413] | 0) + (HEAP32[$i179 >> 2] << 4) + 4 >> 2] = 0;
  HEAP32[(HEAP32[7413] | 0) + (HEAP32[$i179 >> 2] << 4) + 8 >> 2] = 0;
  HEAP32[(HEAP32[7413] | 0) + (HEAP32[$i179 >> 2] << 4) + 12 >> 2] = HEAP32[7416];
  HEAP32[$i179 >> 2] = (HEAP32[$i179 >> 2] | 0) + 1;
 }
 HEAP32[7414] = 1;
 HEAP32[$i191 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i191 >> 2] | 0) >= 32) break;
  $arrayidx196 = 18880 + (HEAP32[$i191 >> 2] << 6) | 0;
  _MatrixIdentity($tmp197);
  dest = $arrayidx196;
  src = $tmp197;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$i191 >> 2] = (HEAP32[$i191 >> 2] | 0) + 1;
 }
 _MatrixIdentity($tmp201);
 dest = 29452;
 src = $tmp201;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixIdentity($tmp202);
 dest = 29520;
 src = $tmp202;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[7379] = 29520;
 _glDepthFunc(515);
 _glDisable(2929);
 _glBlendFunc(770, 771);
 _glEnable(3042);
 _glCullFace(1029);
 _glFrontFace(2305);
 _glEnable(2884);
 _glClearColor(0.0, 0.0, 0.0, 1.0);
 _glClearDepthf(1.0);
 _glClear(16640);
 HEAP32[7420] = HEAP32[$width$addr >> 2];
 HEAP32[7421] = HEAP32[$height$addr >> 2];
 _TraceLog(3, 9306, $vararg_buffer44);
 STACKTOP = sp;
 return;
}

function _ProcessGestureEvent($event) {
 $event = $event | 0;
 var $$compoundliteral = 0, $$compoundliteral159 = 0, $$compoundliteral72 = 0, $10 = f0, $arrayidx118 = 0, $arrayidx131 = 0, $call = 0.0, $call142 = f0, $call27 = 0.0, $cmp1 = 0, $cmp39 = 0, $cmp45 = 0, $cmp52 = 0, $cmp59 = 0, $moveDownPosition$byval_copy15 = 0, $moveDownPosition2$byval_copy16 = 0, $position = 0, $position11 = 0, $position115 = 0, $position128 = 0, $position13 = 0, $position23 = 0, $position88 = 0, $position95 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $moveDownPosition2$byval_copy16 = sp + 32 | 0;
 $moveDownPosition$byval_copy15 = sp + 24 | 0;
 $$compoundliteral = sp + 16 | 0;
 $$compoundliteral72 = sp + 8 | 0;
 $$compoundliteral159 = sp;
 HEAP32[7504] = HEAP32[$event + 4 >> 2];
 $cmp1 = (HEAP32[$event >> 2] | 0) == 1;
 if ((HEAP32[7504] | 0) >= 2) {
  if ($cmp1) {
   $position115 = $event + 24 | 0;
   HEAP32[7506] = HEAP32[$position115 >> 2];
   HEAP32[7507] = HEAP32[$position115 + 4 >> 2];
   $arrayidx118 = $event + 24 + 8 | 0;
   HEAP32[7517] = HEAP32[$arrayidx118 >> 2];
   HEAP32[7518] = HEAP32[$arrayidx118 + 4 >> 2];
   HEAP32[7503] = 4;
   +_GetCurrentTime();
   STACKTOP = sp;
   return;
  }
  if ((HEAP32[$event >> 2] | 0) != 2) {
   if (HEAP32[$event >> 2] | 0) {
    STACKTOP = sp;
    return;
   }
   HEAPF32[7521] = Math_fround(0.0);
   HEAPF32[$$compoundliteral159 >> 2] = Math_fround(0.0);
   HEAPF32[$$compoundliteral159 + 4 >> 2] = Math_fround(0.0);
   HEAP32[7504] = 0;
   HEAP32[7503] = 0;
   STACKTOP = sp;
   return;
  };
  HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[7515];
  HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[7516];
  HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[7519];
  HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[7520];
  HEAPF32[7521] = Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16));
  HEAP32[7506] = HEAP32[7515];
  HEAP32[7507] = HEAP32[7516];
  HEAP32[7517] = HEAP32[7519];
  HEAP32[7518] = HEAP32[7520];
  $position128 = $event + 24 | 0;
  HEAP32[7515] = HEAP32[$position128 >> 2];
  HEAP32[7516] = HEAP32[$position128 + 4 >> 2];
  $arrayidx131 = $event + 24 + 8 | 0;
  HEAP32[7519] = HEAP32[$arrayidx131 >> 2];
  HEAP32[7520] = HEAP32[$arrayidx131 + 4 >> 2];
  HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[7506];
  HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[7507];
  HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[7515];
  HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[7516];
  if (Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16)) >= Math_fround(.00499999989)) label = 41; else {
   HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[7517];
   HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[7518];
   HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[7519];
   HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[7520];
   if (Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16)) >= Math_fround(.00499999989)) label = 41; else {
    HEAP32[7503] = 4;
    +_GetCurrentTime();
   }
  }
  do if ((label | 0) == 41) {
   HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[7515];
   HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[7516];
   HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[7519];
   HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[7520];
   $call142 = Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16));
   if (Math_fround($call142 - Math_fround(HEAPF32[7521])) < Math_fround(0.0)) {
    HEAP32[7503] = 256;
    break;
   } else {
    HEAP32[7503] = 512;
    break;
   }
  } while (0);
  HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[7515];
  HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[7516];
  HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[7519];
  HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[7520];
  Math_fround(_Vector2Angle($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16));
  STACKTOP = sp;
  return;
 }
 if ($cmp1) {
  HEAP32[7505] = (HEAP32[7505] | 0) + 1;
  if ((HEAP32[7503] | 0) == 0 & (HEAP32[7505] | 0) >= 2) {
   $call = +_GetCurrentTime();
   if ($call - +HEAPF64[3674] < 300.0) {
    $position = $event + 24 | 0;
    HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[7506];
    HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[7507];
    HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[$position >> 2];
    HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[$position + 4 >> 2];
    if (Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16)) < Math_fround(.0299999993)) {
     HEAP32[7503] = 2;
     HEAP32[7505] = 0;
    } else label = 7;
   } else label = 7;
  } else label = 7;
  if ((label | 0) == 7) {
   HEAP32[7505] = 1;
   HEAP32[7503] = 1;
  }
  $position11 = $event + 24 | 0;
  HEAP32[7506] = HEAP32[$position11 >> 2];
  HEAP32[7507] = HEAP32[$position11 + 4 >> 2];
  $position13 = $event + 24 | 0;
  HEAP32[7508] = HEAP32[$position13 >> 2];
  HEAP32[7509] = HEAP32[$position13 + 4 >> 2];
  HEAP32[7510] = HEAP32[7506];
  HEAP32[7511] = HEAP32[7507];
  HEAPF64[3674] = +_GetCurrentTime();
  HEAP32[1894] = HEAP32[$event + 8 >> 2];
  HEAPF32[$$compoundliteral >> 2] = Math_fround(0.0);
  HEAPF32[$$compoundliteral + 4 >> 2] = Math_fround(0.0);
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$event >> 2] | 0) {
  if ((HEAP32[$event >> 2] | 0) != 2) {
   STACKTOP = sp;
   return;
  }
  if ((HEAP32[7503] | 0) == 8) HEAPF64[3674] = +_GetCurrentTime();
  if (!(HEAP8[30892] & 1)) {
   HEAPF64[3675] = +_GetCurrentTime();
   HEAP8[30892] = 1;
  }
  $position88 = $event + 24 | 0;
  HEAP32[7515] = HEAP32[$position88 >> 2];
  HEAP32[7516] = HEAP32[$position88 + 4 >> 2];
  if ((HEAP32[7503] | 0) == 4) {
   if (HEAP8[30893] & 1) {
    $position95 = $event + 24 | 0;
    HEAP32[7506] = HEAP32[$position95 >> 2];
    HEAP32[7507] = HEAP32[$position95 + 4 >> 2];
   }
   HEAP8[30893] = 0;
   HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[7506];
   HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[7507];
   HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[7515];
   HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[7516];
   if (Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16)) >= Math_fround(.0149999997)) {
    HEAPF64[3674] = +_GetCurrentTime();
    HEAP32[7503] = 8;
   }
  }
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[7503] | 0) == 8) {
  $position23 = $event + 24 | 0;
  HEAP32[7510] = HEAP32[$position23 >> 2];
  HEAP32[7511] = HEAP32[$position23 + 4 >> 2];
 };
 HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[7506];
 HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[7507];
 HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[7510];
 HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[7511];
 HEAPF32[7512] = Math_fround(_Vector2Distance($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16));
 $10 = Math_fround(HEAPF32[7512]);
 $call27 = +_GetCurrentTime();
 HEAPF32[7513] = Math_fround($10 / Math_fround($call27 - +HEAPF64[3675]));
 HEAP8[30892] = 0;
 do if (Math_fround(HEAPF32[7513]) > Math_fround(.000500000024)) if ((HEAP32[1894] | 0) == (HEAP32[$event + 8 >> 2] | 0)) {
  HEAP32[$moveDownPosition$byval_copy15 >> 2] = HEAP32[7506];
  HEAP32[$moveDownPosition$byval_copy15 + 4 >> 2] = HEAP32[7507];
  HEAP32[$moveDownPosition2$byval_copy16 >> 2] = HEAP32[7510];
  HEAP32[$moveDownPosition2$byval_copy16 + 4 >> 2] = HEAP32[7511];
  HEAPF32[7514] = Math_fround(Math_fround(360.0) - Math_fround(_Vector2Angle($moveDownPosition$byval_copy15, $moveDownPosition2$byval_copy16)));
  $cmp39 = Math_fround(HEAPF32[7514]) < Math_fround(30.0);
  if ($cmp39 | Math_fround(HEAPF32[7514]) > Math_fround(330.0)) {
   HEAP32[7503] = 16;
   break;
  }
  $cmp45 = Math_fround(HEAPF32[7514]) > Math_fround(30.0);
  if ($cmp45 & Math_fround(HEAPF32[7514]) < Math_fround(120.0)) {
   HEAP32[7503] = 64;
   break;
  }
  $cmp52 = Math_fround(HEAPF32[7514]) > Math_fround(120.0);
  if ($cmp52 & Math_fround(HEAPF32[7514]) < Math_fround(210.0)) {
   HEAP32[7503] = 32;
   break;
  }
  $cmp59 = Math_fround(HEAPF32[7514]) > Math_fround(210.0);
  if ($cmp59 & Math_fround(HEAPF32[7514]) < Math_fround(300.0)) {
   HEAP32[7503] = 128;
   break;
  } else {
   HEAP32[7503] = 0;
   break;
  }
 } else label = 23; else label = 23; while (0);
 if ((label | 0) == 23) {
  HEAPF32[7512] = Math_fround(0.0);
  HEAPF32[7513] = Math_fround(0.0);
  HEAPF32[7514] = Math_fround(0.0);
  HEAP32[7503] = 0;
 }
 HEAPF32[$$compoundliteral72 >> 2] = Math_fround(0.0);
 HEAPF32[$$compoundliteral72 + 4 >> 2] = Math_fround(0.0);
 HEAP32[7508] = HEAP32[$$compoundliteral72 >> 2];
 HEAP32[7509] = HEAP32[$$compoundliteral72 + 4 >> 2];
 HEAP32[7504] = 0;
 STACKTOP = sp;
 return;
}

function _LoadFontDefault() {
 var $$compoundliteral = 0, $$compoundliteral13 = 0, $12 = 0, $52 = f0, $arrayidx = 0, $arrayidx12 = 0, $arrayidx75 = 0, $charsDivisor = 0, $charsHeight = 0, $charsWidth = 0, $conv = f0, $conv41 = f0, $conv44 = f0, $conv46 = f0, $conv52 = 0, $conv61 = f0, $conv67 = f0, $counter = 0, $currentLine = 0, $currentPosX = 0, $defaultFontData = 0, $i = 0, $i3 = 0, $i31 = 0, $imFont = 0, $imFont$byval_copy1 = 0, $imFont$byval_copy2 = 0, $imHeight = 0, $imWidth = 0, $image = 0, $imagePixels = 0, $inc20 = 0, $j = 0, $testPosX = 0, $tmp = 0, $tmp76 = 0, $vararg_buffer = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3120 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(3120);
 $imFont$byval_copy2 = sp + 3080 | 0;
 $imFont$byval_copy1 = sp + 3060 | 0;
 $vararg_buffer = sp + 2944 | 0;
 $defaultFontData = sp + 896 | 0;
 $charsHeight = sp + 3056 | 0;
 $charsDivisor = sp + 3052 | 0;
 $charsWidth = sp;
 $imWidth = sp + 3048 | 0;
 $imHeight = sp + 3044 | 0;
 $imagePixels = sp + 3040 | 0;
 $i = sp + 3036 | 0;
 $$compoundliteral = sp + 3104 | 0;
 $counter = sp + 3032 | 0;
 $i3 = sp + 3028 | 0;
 $j = sp + 3024 | 0;
 $$compoundliteral13 = sp + 3100 | 0;
 $imFont = sp + 3004 | 0;
 $tmp = sp + 2984 | 0;
 $currentLine = sp + 2980 | 0;
 $currentPosX = sp + 2976 | 0;
 $testPosX = sp + 2972 | 0;
 $i31 = sp + 2968 | 0;
 $tmp76 = sp + 2948 | 0;
 HEAP32[7567] = 224;
 _memcpy($defaultFontData | 0, 1024, 2048) | 0;
 HEAP32[$charsHeight >> 2] = 10;
 HEAP32[$charsDivisor >> 2] = 1;
 _memcpy($charsWidth | 0, 3072, 896) | 0;
 HEAP32[$imWidth >> 2] = 128;
 HEAP32[$imHeight >> 2] = 128;
 HEAP32[$imagePixels >> 2] = _malloc((Math_imul(HEAP32[$imWidth >> 2] | 0, HEAP32[$imHeight >> 2] | 0) | 0) << 2) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$imWidth >> 2] | 0, HEAP32[$imHeight >> 2] | 0) | 0)) break;
  $arrayidx = (HEAP32[$imagePixels >> 2] | 0) + (HEAP32[$i >> 2] << 2) | 0;
  HEAP8[$$compoundliteral >> 0] = 0;
  HEAP8[$$compoundliteral + 1 >> 0] = 0;
  HEAP8[$$compoundliteral + 2 >> 0] = 0;
  HEAP8[$$compoundliteral + 3 >> 0] = 0;
  HEAP8[$arrayidx >> 0] = HEAP8[$$compoundliteral >> 0] | 0;
  HEAP8[$arrayidx + 1 >> 0] = HEAP8[$$compoundliteral + 1 >> 0] | 0;
  HEAP8[$arrayidx + 2 >> 0] = HEAP8[$$compoundliteral + 2 >> 0] | 0;
  HEAP8[$arrayidx + 3 >> 0] = HEAP8[$$compoundliteral + 3 >> 0] | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$counter >> 2] = 0;
 HEAP32[$i3 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i3 >> 2] | 0) >= (Math_imul(HEAP32[$imWidth >> 2] | 0, HEAP32[$imHeight >> 2] | 0) | 0)) break;
  HEAP32[$j >> 2] = 31;
  while (1) {
   $12 = HEAP32[$counter >> 2] | 0;
   if ((HEAP32[$j >> 2] | 0) < 0) break;
   if (HEAP32[$defaultFontData + ($12 << 2) >> 2] & 1 << HEAP32[$j >> 2] | 0) {
    $arrayidx12 = (HEAP32[$imagePixels >> 2] | 0) + ((HEAP32[$i3 >> 2] | 0) + (HEAP32[$j >> 2] | 0) << 2) | 0;
    HEAP8[$$compoundliteral13 >> 0] = -1;
    HEAP8[$$compoundliteral13 + 1 >> 0] = -1;
    HEAP8[$$compoundliteral13 + 2 >> 0] = -1;
    HEAP8[$$compoundliteral13 + 3 >> 0] = -1;
    HEAP8[$arrayidx12 >> 0] = HEAP8[$$compoundliteral13 >> 0] | 0;
    HEAP8[$arrayidx12 + 1 >> 0] = HEAP8[$$compoundliteral13 + 1 >> 0] | 0;
    HEAP8[$arrayidx12 + 2 >> 0] = HEAP8[$$compoundliteral13 + 2 >> 0] | 0;
    HEAP8[$arrayidx12 + 3 >> 0] = HEAP8[$$compoundliteral13 + 3 >> 0] | 0;
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + -1;
  }
  $inc20 = $12 + 1 | 0;
  HEAP32[$counter >> 2] = $inc20;
  HEAP32[$counter >> 2] = (HEAP32[$counter >> 2] | 0) > 512 ? 0 : $inc20;
  HEAP32[$i3 >> 2] = (HEAP32[$i3 >> 2] | 0) + 32;
 }
 _LoadImageEx($imFont, HEAP32[$imagePixels >> 2] | 0, HEAP32[$imWidth >> 2] | 0, HEAP32[$imHeight >> 2] | 0);
 _ImageFormat($imFont, 2);
 _free(HEAP32[$imagePixels >> 2] | 0);
 HEAP32[$imFont$byval_copy2 >> 2] = HEAP32[$imFont >> 2];
 HEAP32[$imFont$byval_copy2 + 4 >> 2] = HEAP32[$imFont + 4 >> 2];
 HEAP32[$imFont$byval_copy2 + 8 >> 2] = HEAP32[$imFont + 8 >> 2];
 HEAP32[$imFont$byval_copy2 + 12 >> 2] = HEAP32[$imFont + 12 >> 2];
 HEAP32[$imFont$byval_copy2 + 16 >> 2] = HEAP32[$imFont + 16 >> 2];
 _LoadTextureFromImage($tmp, $imFont$byval_copy2);
 HEAP32[7568] = HEAP32[$tmp >> 2];
 HEAP32[7569] = HEAP32[$tmp + 4 >> 2];
 HEAP32[7570] = HEAP32[$tmp + 8 >> 2];
 HEAP32[7571] = HEAP32[$tmp + 12 >> 2];
 HEAP32[7572] = HEAP32[$tmp + 16 >> 2];
 HEAP32[7574] = _malloc((HEAP32[7567] | 0) * 36 | 0) | 0;
 HEAP32[7573] = _malloc(HEAP32[7567] << 4) | 0;
 HEAP32[$currentLine >> 2] = 0;
 HEAP32[$currentPosX >> 2] = HEAP32[$charsDivisor >> 2];
 HEAP32[$testPosX >> 2] = HEAP32[$charsDivisor >> 2];
 HEAP32[$i31 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i31 >> 2] | 0) >= (HEAP32[7567] | 0)) break;
  CSE$0 = HEAP32[$i31 >> 2] | 0;
  HEAP32[(HEAP32[7574] | 0) + ((CSE$0 | 0) * 36 | 0) >> 2] = 32 + (CSE$0 | 0);
  $conv = Math_fround(HEAP32[$currentPosX >> 2] | 0);
  HEAPF32[(HEAP32[7573] | 0) + (HEAP32[$i31 >> 2] << 4) >> 2] = $conv;
  CSE$1 = HEAP32[$charsDivisor >> 2] | 0;
  $conv41 = Math_fround(CSE$1 + (Math_imul(HEAP32[$currentLine >> 2] | 0, (HEAP32[$charsHeight >> 2] | 0) + CSE$1 | 0) | 0) | 0);
  HEAPF32[(HEAP32[7573] | 0) + (HEAP32[$i31 >> 2] << 4) + 4 >> 2] = $conv41;
  $conv44 = Math_fround(HEAP32[$charsWidth + (HEAP32[$i31 >> 2] << 2) >> 2] | 0);
  HEAPF32[(HEAP32[7573] | 0) + (HEAP32[$i31 >> 2] << 4) + 8 >> 2] = $conv44;
  $conv46 = Math_fround(HEAP32[$charsHeight >> 2] | 0);
  HEAPF32[(HEAP32[7573] | 0) + (HEAP32[$i31 >> 2] << 4) + 12 >> 2] = $conv46;
  $52 = Math_fround(HEAPF32[(HEAP32[7573] | 0) + (HEAP32[$i31 >> 2] << 4) + 8 >> 2]);
  $conv52 = ~~Math_fround($52 + Math_fround(HEAP32[$charsDivisor >> 2] | 0));
  HEAP32[$testPosX >> 2] = (HEAP32[$testPosX >> 2] | 0) + $conv52;
  if ((HEAP32[$testPosX >> 2] | 0) >= (HEAP32[7569] | 0)) {
   HEAP32[$currentLine >> 2] = (HEAP32[$currentLine >> 2] | 0) + 1;
   HEAP32[$currentPosX >> 2] = (HEAP32[$charsDivisor >> 2] << 1) + (HEAP32[$charsWidth + (HEAP32[$i31 >> 2] << 2) >> 2] | 0);
   HEAP32[$testPosX >> 2] = HEAP32[$currentPosX >> 2];
   $conv61 = Math_fround(HEAP32[$charsDivisor >> 2] | 0);
   HEAPF32[(HEAP32[7573] | 0) + (HEAP32[$i31 >> 2] << 4) >> 2] = $conv61;
   CSE$2 = HEAP32[$charsDivisor >> 2] | 0;
   $conv67 = Math_fround(CSE$2 + (Math_imul(HEAP32[$currentLine >> 2] | 0, (HEAP32[$charsHeight >> 2] | 0) + CSE$2 | 0) | 0) | 0);
   HEAPF32[(HEAP32[7573] | 0) + (HEAP32[$i31 >> 2] << 4) + 4 >> 2] = $conv67;
  } else HEAP32[$currentPosX >> 2] = HEAP32[$testPosX >> 2];
  HEAP32[(HEAP32[7574] | 0) + ((HEAP32[$i31 >> 2] | 0) * 36 | 0) + 4 >> 2] = 0;
  HEAP32[(HEAP32[7574] | 0) + ((HEAP32[$i31 >> 2] | 0) * 36 | 0) + 8 >> 2] = 0;
  HEAP32[(HEAP32[7574] | 0) + ((HEAP32[$i31 >> 2] | 0) * 36 | 0) + 12 >> 2] = 0;
  $image = (HEAP32[7574] | 0) + ((HEAP32[$i31 >> 2] | 0) * 36 | 0) + 16 | 0;
  $arrayidx75 = (HEAP32[7573] | 0) + (HEAP32[$i31 >> 2] << 4) | 0;
  HEAP32[$imFont$byval_copy1 >> 2] = HEAP32[$imFont >> 2];
  HEAP32[$imFont$byval_copy1 + 4 >> 2] = HEAP32[$imFont + 4 >> 2];
  HEAP32[$imFont$byval_copy1 + 8 >> 2] = HEAP32[$imFont + 8 >> 2];
  HEAP32[$imFont$byval_copy1 + 12 >> 2] = HEAP32[$imFont + 12 >> 2];
  HEAP32[$imFont$byval_copy1 + 16 >> 2] = HEAP32[$imFont + 16 >> 2];
  HEAP32[$imFont$byval_copy2 >> 2] = HEAP32[$arrayidx75 >> 2];
  HEAP32[$imFont$byval_copy2 + 4 >> 2] = HEAP32[$arrayidx75 + 4 >> 2];
  HEAP32[$imFont$byval_copy2 + 8 >> 2] = HEAP32[$arrayidx75 + 8 >> 2];
  HEAP32[$imFont$byval_copy2 + 12 >> 2] = HEAP32[$arrayidx75 + 12 >> 2];
  _ImageFromImage($tmp76, $imFont$byval_copy1, $imFont$byval_copy2);
  HEAP32[$image >> 2] = HEAP32[$tmp76 >> 2];
  HEAP32[$image + 4 >> 2] = HEAP32[$tmp76 + 4 >> 2];
  HEAP32[$image + 8 >> 2] = HEAP32[$tmp76 + 8 >> 2];
  HEAP32[$image + 12 >> 2] = HEAP32[$tmp76 + 12 >> 2];
  HEAP32[$image + 16 >> 2] = HEAP32[$tmp76 + 16 >> 2];
  HEAP32[$i31 >> 2] = (HEAP32[$i31 >> 2] | 0) + 1;
 }
 HEAP32[$imFont$byval_copy2 >> 2] = HEAP32[$imFont >> 2];
 HEAP32[$imFont$byval_copy2 + 4 >> 2] = HEAP32[$imFont + 4 >> 2];
 HEAP32[$imFont$byval_copy2 + 8 >> 2] = HEAP32[$imFont + 8 >> 2];
 HEAP32[$imFont$byval_copy2 + 12 >> 2] = HEAP32[$imFont + 12 >> 2];
 HEAP32[$imFont$byval_copy2 + 16 >> 2] = HEAP32[$imFont + 16 >> 2];
 _UnloadImage($imFont$byval_copy2);
 HEAP32[7566] = ~~Math_fround(HEAPF32[(HEAP32[7573] | 0) + 12 >> 2]);
 HEAP32[$vararg_buffer >> 2] = HEAP32[7568];
 _TraceLog(3, 12129, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0, CSE$0 = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (setTempRet0($_0$1 | 0), $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (setTempRet0($_0$1 | 0), $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (setTempRet0($_0$1 | 0), $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = getTempRet0() | 0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = getTempRet0() | 0;
   CSE$0 = (($150$1 | 0) < 0 ? -1 : 0) << 1 | 0;
   $151$0 = $150$1 >> 31 | CSE$0;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | CSE$0) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = getTempRet0() | 0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (setTempRet0($_0$1 | 0), $_0$0) | 0;
}

function _stbiw__encode_png_line($pixels, $stride_bytes, $width, $height, $y, $n, $filter_type, $line_buffer) {
 $pixels = $pixels | 0;
 $stride_bytes = $stride_bytes | 0;
 $width = $width | 0;
 $height = $height | 0;
 $y = $y | 0;
 $n = $n | 0;
 $filter_type = $filter_type | 0;
 $line_buffer = $line_buffer | 0;
 var $17 = 0, $9 = 0, $cond2 = 0, $conv109 = 0, $conv123 = 0, $conv153 = 0, $conv160 = 0, $conv39 = 0, $filter_type$addr = 0, $height$addr = 0, $i = 0, $line_buffer$addr = 0, $mymap = 0, $n$addr = 0, $pixels$addr = 0, $signed_stride = 0, $stride_bytes$addr = 0, $type = 0, $width$addr = 0, $y$addr = 0, $z = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0, CSE$5 = 0, CSE$6 = 0, CSE$7 = 0, CSE$8 = 0, CSE$9 = 0, CSE$10 = 0, CSE$11 = 0, CSE$12 = 0, CSE$13 = 0, CSE$14 = 0, CSE$15 = 0, CSE$16 = 0, CSE$17 = 0, CSE$18 = 0, CSE$19 = 0, CSE$20 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $pixels$addr = sp + 48 | 0;
 $stride_bytes$addr = sp + 44 | 0;
 $width$addr = sp + 40 | 0;
 $height$addr = sp + 36 | 0;
 $y$addr = sp + 32 | 0;
 $n$addr = sp + 28 | 0;
 $filter_type$addr = sp + 24 | 0;
 $line_buffer$addr = sp + 20 | 0;
 $mymap = sp + 16 | 0;
 $i = sp + 12 | 0;
 $type = sp + 8 | 0;
 $z = sp + 4 | 0;
 $signed_stride = sp;
 HEAP32[$pixels$addr >> 2] = $pixels;
 HEAP32[$stride_bytes$addr >> 2] = $stride_bytes;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$filter_type$addr >> 2] = $filter_type;
 HEAP32[$line_buffer$addr >> 2] = $line_buffer;
 HEAP32[$mymap >> 2] = HEAP32[$y$addr >> 2] | 0 ? 5216 : 5248;
 HEAP32[$type >> 2] = HEAP32[(HEAP32[$mymap >> 2] | 0) + (HEAP32[$filter_type$addr >> 2] << 2) >> 2];
 if (0) $cond2 = (HEAP32[$height$addr >> 2] | 0) - 1 - (HEAP32[$y$addr >> 2] | 0) | 0; else $cond2 = HEAP32[$y$addr >> 2] | 0;
 HEAP32[$z >> 2] = (HEAP32[$pixels$addr >> 2] | 0) + (Math_imul(HEAP32[$stride_bytes$addr >> 2] | 0, $cond2) | 0);
 $9 = HEAP32[$stride_bytes$addr >> 2] | 0;
 HEAP32[$signed_stride >> 2] = 0 ? 0 - $9 | 0 : $9;
 if (!(HEAP32[$type >> 2] | 0)) {
  _memcpy(HEAP32[$line_buffer$addr >> 2] | 0, HEAP32[$z >> 2] | 0, Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0) | 0;
  STACKTOP = sp;
  return;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  $17 = HEAP32[$type >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$n$addr >> 2] | 0)) break;
  switch ($17 | 0) {
  case 1:
   {
    CSE$0 = HEAP32[$i >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$0 >> 0] = HEAP8[(HEAP32[$z >> 2] | 0) + CSE$0 >> 0] | 0;
    break;
   }
  case 2:
   {
    CSE$1 = HEAP32[$i >> 2] | 0;
    CSE$2 = HEAP32[$z >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$1 >> 0] = (HEAPU8[CSE$2 + CSE$1 >> 0] | 0) - (HEAPU8[CSE$2 + (CSE$1 - (HEAP32[$signed_stride >> 2] | 0)) >> 0] | 0);
    break;
   }
  case 3:
   {
    CSE$3 = HEAP32[$i >> 2] | 0;
    CSE$4 = HEAP32[$z >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$3 >> 0] = (HEAPU8[CSE$4 + CSE$3 >> 0] | 0) - (HEAPU8[CSE$4 + (CSE$3 - (HEAP32[$signed_stride >> 2] | 0)) >> 0] >> 1);
    break;
   }
  case 4:
   {
    CSE$5 = HEAP32[$z >> 2] | 0;
    CSE$6 = HEAP32[$i >> 2] | 0;
    $conv39 = (HEAPU8[CSE$5 + CSE$6 >> 0] | 0) - ((_stbiw__paeth(0, HEAPU8[CSE$5 + (CSE$6 - (HEAP32[$signed_stride >> 2] | 0)) >> 0] | 0, 0) | 0) & 255) & 255;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = $conv39;
    break;
   }
  case 5:
   {
    CSE$7 = HEAP32[$i >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$7 >> 0] = HEAP8[(HEAP32[$z >> 2] | 0) + CSE$7 >> 0] | 0;
    break;
   }
  case 6:
   {
    CSE$8 = HEAP32[$i >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$8 >> 0] = HEAP8[(HEAP32[$z >> 2] | 0) + CSE$8 >> 0] | 0;
    break;
   }
  default:
   {}
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 switch ($17 | 0) {
 case 1:
  {
   HEAP32[$i >> 2] = HEAP32[$n$addr >> 2];
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
    CSE$9 = HEAP32[$i >> 2] | 0;
    CSE$10 = HEAP32[$z >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$9 >> 0] = (HEAPU8[CSE$10 + CSE$9 >> 0] | 0) - (HEAPU8[CSE$10 + (CSE$9 - (HEAP32[$n$addr >> 2] | 0)) >> 0] | 0);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 2:
  {
   HEAP32[$i >> 2] = HEAP32[$n$addr >> 2];
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
    CSE$11 = HEAP32[$i >> 2] | 0;
    CSE$12 = HEAP32[$z >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$11 >> 0] = (HEAPU8[CSE$12 + CSE$11 >> 0] | 0) - (HEAPU8[CSE$12 + (CSE$11 - (HEAP32[$signed_stride >> 2] | 0)) >> 0] | 0);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 3:
  {
   HEAP32[$i >> 2] = HEAP32[$n$addr >> 2];
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
    CSE$13 = HEAP32[$i >> 2] | 0;
    CSE$14 = HEAP32[$z >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$13 >> 0] = (HEAPU8[CSE$14 + CSE$13 >> 0] | 0) - ((HEAPU8[CSE$14 + (CSE$13 - (HEAP32[$n$addr >> 2] | 0)) >> 0] | 0) + (HEAPU8[CSE$14 + (CSE$13 - (HEAP32[$signed_stride >> 2] | 0)) >> 0] | 0) >> 1);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   HEAP32[$i >> 2] = HEAP32[$n$addr >> 2];
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
    $conv109 = HEAPU8[(HEAP32[$z >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
    CSE$15 = HEAP32[$z >> 2] | 0;
    CSE$16 = HEAP32[$i >> 2] | 0;
    CSE$17 = (HEAP32[$i >> 2] | 0) - (HEAP32[$signed_stride >> 2] | 0) | 0;
    CSE$18 = HEAP32[$n$addr >> 2] | 0;
    $conv123 = $conv109 - ((_stbiw__paeth(HEAPU8[CSE$15 + (CSE$16 - CSE$18) >> 0] | 0, HEAPU8[CSE$15 + CSE$17 >> 0] | 0, HEAPU8[CSE$15 + (CSE$17 - CSE$18) >> 0] | 0) | 0) & 255) & 255;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = $conv123;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 5:
  {
   HEAP32[$i >> 2] = HEAP32[$n$addr >> 2];
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
    CSE$19 = HEAP32[$i >> 2] | 0;
    CSE$20 = HEAP32[$z >> 2] | 0;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + CSE$19 >> 0] = (HEAPU8[CSE$20 + CSE$19 >> 0] | 0) - (HEAPU8[CSE$20 + (CSE$19 - (HEAP32[$n$addr >> 2] | 0)) >> 0] >> 1);
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 case 6:
  {
   HEAP32[$i >> 2] = HEAP32[$n$addr >> 2];
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0)) break;
    $conv153 = HEAPU8[(HEAP32[$z >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0;
    $conv160 = $conv153 - ((_stbiw__paeth(HEAPU8[(HEAP32[$z >> 2] | 0) + ((HEAP32[$i >> 2] | 0) - (HEAP32[$n$addr >> 2] | 0)) >> 0] | 0, 0, 0) | 0) & 255) & 255;
    HEAP8[(HEAP32[$line_buffer$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = $conv160;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   STACKTOP = sp;
   return;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function _stbir__normalize_downsample_coefficients($contributors, $coefficients, $filter, $scale_ratio, $input_size, $output_size) {
 $contributors = $contributors | 0;
 $coefficients = $coefficients | 0;
 $filter = $filter | 0;
 $scale_ratio = Math_fround($scale_ratio);
 $input_size = $input_size | 0;
 $output_size = $output_size | 0;
 var $0 = f0, $101 = f0, $104 = f0, $20 = f0, $27 = f0, $47 = f0, $50 = f0, $67 = f0, $71 = 0, $97 = f0, $arrayidx55 = 0, $arrayidx63 = 0, $call35 = 0, $call98 = 0, $cmp53 = 0, $coefficient = 0, $coefficients$addr = 0, $contributors$addr = 0, $filter$addr = 0, $i = 0, $input_size$addr = 0, $j = 0, $max = 0, $num_coefficients = 0, $num_contributors = 0, $output_size$addr = 0, $range = 0, $scale = 0, $scale_ratio$addr = 0, $skip = 0, $total = 0, $width = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $contributors$addr = sp + 64 | 0;
 $coefficients$addr = sp + 60 | 0;
 $filter$addr = sp + 56 | 0;
 $scale_ratio$addr = sp + 52 | 0;
 $input_size$addr = sp + 48 | 0;
 $output_size$addr = sp + 44 | 0;
 $num_contributors = sp + 40 | 0;
 $num_coefficients = sp + 36 | 0;
 $i = sp + 32 | 0;
 $j = sp + 28 | 0;
 $skip = sp + 24 | 0;
 $scale = sp + 20 | 0;
 $total = sp + 16 | 0;
 $coefficient = sp + 12 | 0;
 $range = sp + 8 | 0;
 $max = sp + 4 | 0;
 $width = sp;
 HEAP32[$contributors$addr >> 2] = $contributors;
 HEAP32[$coefficients$addr >> 2] = $coefficients;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale_ratio$addr >> 2] = $scale_ratio;
 HEAP32[$input_size$addr >> 2] = $input_size;
 HEAP32[$output_size$addr >> 2] = $output_size;
 $0 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
 HEAP32[$num_contributors >> 2] = _stbir__get_contributors($0, HEAP32[$filter$addr >> 2] | 0, HEAP32[$input_size$addr >> 2] | 0, HEAP32[$output_size$addr >> 2] | 0) | 0;
 HEAP32[$num_coefficients >> 2] = _stbir__get_coefficient_width(HEAP32[$filter$addr >> 2] | 0, Math_fround(HEAPF32[$scale_ratio$addr >> 2])) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$output_size$addr >> 2] | 0)) {
   label = 22;
   break;
  }
  HEAPF32[$total >> 2] = Math_fround(0.0);
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$num_contributors >> 2] | 0)) break;
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0)) if ((HEAP32[$i >> 2] | 0) <= (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) + 4 >> 2] | 0)) {
    $20 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
    HEAPF32[$coefficient >> 2] = Math_fround(HEAPF32[(_stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $20, HEAP32[$j >> 2] | 0, (HEAP32[$i >> 2] | 0) - (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0) | 0) | 0) >> 2]);
    $27 = Math_fround(HEAPF32[$coefficient >> 2]);
    HEAPF32[$total >> 2] = Math_fround(Math_fround(HEAPF32[$total >> 2]) + $27);
   } else label = 8; else label = 8;
   if ((label | 0) == 8) {
    label = 0;
    if ((HEAP32[$i >> 2] | 0) < (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0)) break;
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  if (!(Math_fround(HEAPF32[$total >> 2]) > Math_fround(.899999976))) {
   label = 11;
   break;
  }
  if (!(Math_fround(HEAPF32[$total >> 2]) < Math_fround(1.10000002))) {
   label = 13;
   break;
  }
  HEAPF32[$scale >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$total >> 2]));
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$num_contributors >> 2] | 0)) break;
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0)) if ((HEAP32[$i >> 2] | 0) <= (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) + 4 >> 2] | 0)) {
    $47 = Math_fround(HEAPF32[$scale >> 2]);
    $50 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
    $call35 = _stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $50, HEAP32[$j >> 2] | 0, (HEAP32[$i >> 2] | 0) - (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0) | 0) | 0;
    HEAPF32[$call35 >> 2] = Math_fround(Math_fround(HEAPF32[$call35 >> 2]) * $47);
   } else label = 19; else label = 19;
   if ((label | 0) == 19) {
    label = 0;
    if ((HEAP32[$i >> 2] | 0) < (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0)) break;
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 11) ___assert_fail(14090, 12378, 1140, 14103); else if ((label | 0) == 13) ___assert_fail(14144, 12378, 1141, 14103); else if ((label | 0) == 22) {
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= (HEAP32[$num_contributors >> 2] | 0)) break;
   HEAP32[$skip >> 2] = 0;
   while (1) {
    $67 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
    $cmp53 = Math_fround(HEAPF32[(_stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $67, HEAP32[$j >> 2] | 0, HEAP32[$skip >> 2] | 0) | 0) >> 2]) == Math_fround(0.0);
    $71 = HEAP32[$skip >> 2] | 0;
    if (!$cmp53) break;
    HEAP32[$skip >> 2] = $71 + 1;
   }
   $arrayidx55 = (HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) | 0;
   HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + $71;
   while (1) {
    $arrayidx63 = (HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) | 0;
    if ((HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0) >= 0) break;
    HEAP32[$arrayidx63 >> 2] = (HEAP32[$arrayidx63 >> 2] | 0) + 1;
    HEAP32[$skip >> 2] = (HEAP32[$skip >> 2] | 0) + 1;
   }
   HEAP32[$range >> 2] = (HEAP32[$arrayidx63 + 4 >> 2] | 0) - (HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$j >> 2] << 3) >> 2] | 0) + 1;
   HEAP32[$max >> 2] = _stbir__min(HEAP32[$num_coefficients >> 2] | 0, HEAP32[$range >> 2] | 0) | 0;
   HEAP32[$width >> 2] = _stbir__get_coefficient_width(HEAP32[$filter$addr >> 2] | 0, Math_fround(HEAPF32[$scale_ratio$addr >> 2])) | 0;
   HEAP32[$i >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$max >> 2] | 0)) break;
    if (((HEAP32[$i >> 2] | 0) + (HEAP32[$skip >> 2] | 0) | 0) >= (HEAP32[$width >> 2] | 0)) break;
    $97 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
    $101 = Math_fround(HEAPF32[(_stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $97, HEAP32[$j >> 2] | 0, (HEAP32[$i >> 2] | 0) + (HEAP32[$skip >> 2] | 0) | 0) | 0) >> 2]);
    $104 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
    HEAPF32[(_stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $104, HEAP32[$j >> 2] | 0, HEAP32[$i >> 2] | 0) | 0) >> 2] = $101;
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$num_contributors >> 2] | 0)) break;
   $call98 = _stbir__min(HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$i >> 2] << 3) + 4 >> 2] | 0, (HEAP32[$output_size$addr >> 2] | 0) - 1 | 0) | 0;
   HEAP32[(HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$i >> 2] << 3) + 4 >> 2] = $call98;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return;
 }
}

function _twoway_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $0 = 0, $12 = 0, $14 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add13165 = 0, $add46157 = 0, $add90 = 0, $add99 = 0, $arrayidx8 = 0, $byteset = 0, $call108 = 0, $cmp156 = 0, $cmp160 = 0, $cmp85 = 0, $cond162 = 0, $conv125 = 0, $conv5 = 0, $h$addr$0 = 0, $inc177 = 0, $ip$0$lcssa179 = 0, $ip$0161 = 0, $ip$1 = 0, $ip$2$ip$0 = 0, $ip$2$lcssa = 0, $ip$2153 = 0, $ip$3 = 0, $jp$0162 = 0, $jp$1 = 0, $jp$2154 = 0, $jp$3 = 0, $k$0163 = 0, $k$1 = 0, $k$2155 = 0, $k$3 = 0, $k$4$sink = 0, $k$5148 = 0, $k$6150 = 0, $l$0$lcssa176178 = 0, $l$0169 = 0, $mem$0 = 0, $mem$0$be = 0, $mem0$0 = 0, $or107 = 0, $p$0$lcssa180 = 0, $p$0164 = 0, $p$1 = 0, $p$2$lcssa = 0, $p$2$p$0 = 0, $p$2156 = 0, $p$3 = 0, $p$5 = 0, $retval$3 = 0, $shift = 0, $sub$ptr$rhs$cast = 0, $sub101 = 0, $sub123 = 0, $sub139 = 0, $sub148$pre$phiZ2D = 0, $sub94 = 0, $tobool142 = 0, $z$0 = 0, $z$3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056);
 $byteset = sp + 1024 | 0;
 $shift = sp;
 HEAP32[$byteset >> 2] = 0;
 HEAP32[$byteset + 4 >> 2] = 0;
 HEAP32[$byteset + 8 >> 2] = 0;
 HEAP32[$byteset + 12 >> 2] = 0;
 HEAP32[$byteset + 16 >> 2] = 0;
 HEAP32[$byteset + 20 >> 2] = 0;
 HEAP32[$byteset + 24 >> 2] = 0;
 HEAP32[$byteset + 28 >> 2] = 0;
 $0 = HEAP8[$n >> 0] | 0;
 L1 : do if (!($0 << 24 >> 24)) {
  $ip$0$lcssa179 = -1;
  $ip$2$lcssa = -1;
  $l$0$lcssa176178 = 0;
  $p$0$lcssa180 = 1;
  $p$2$lcssa = 1;
  label = 25;
 } else {
  $2 = $0;
  $l$0169 = 0;
  do {
   if (!(HEAP8[$h + $l$0169 >> 0] | 0)) {
    $retval$3 = 0;
    break L1;
   }
   $conv5 = $2 & 255;
   $arrayidx8 = $byteset + ($conv5 >>> 5 << 2) | 0;
   HEAP32[$arrayidx8 >> 2] = HEAP32[$arrayidx8 >> 2] | 1 << ($conv5 & 31);
   $l$0169 = $l$0169 + 1 | 0;
   HEAP32[$shift + ($conv5 << 2) >> 2] = $l$0169;
   $2 = HEAP8[$n + $l$0169 >> 0] | 0;
  } while ($2 << 24 >> 24 != 0);
  $cmp160 = $l$0169 >>> 0 > 1;
  if ($cmp160) {
   $add13165 = 1;
   $ip$0161 = -1;
   $jp$0162 = 0;
   $k$0163 = 1;
   $p$0164 = 1;
   while (1) {
    $5 = HEAP8[$n + ($k$0163 + $ip$0161) >> 0] | 0;
    $6 = HEAP8[$n + $add13165 >> 0] | 0;
    do if ($5 << 24 >> 24 == $6 << 24 >> 24) if (($k$0163 | 0) == ($p$0164 | 0)) {
     $ip$1 = $ip$0161;
     $jp$1 = $p$0164 + $jp$0162 | 0;
     $k$1 = 1;
     $p$1 = $p$0164;
     break;
    } else {
     $ip$1 = $ip$0161;
     $jp$1 = $jp$0162;
     $k$1 = $k$0163 + 1 | 0;
     $p$1 = $p$0164;
     break;
    } else if (($5 & 255) > ($6 & 255)) {
     $ip$1 = $ip$0161;
     $jp$1 = $add13165;
     $k$1 = 1;
     $p$1 = $add13165 - $ip$0161 | 0;
     break;
    } else {
     $ip$1 = $jp$0162;
     $jp$1 = $jp$0162 + 1 | 0;
     $k$1 = 1;
     $p$1 = 1;
     break;
    } while (0);
    $add13165 = $k$1 + $jp$1 | 0;
    if ($add13165 >>> 0 >= $l$0169 >>> 0) break; else {
     $ip$0161 = $ip$1;
     $jp$0162 = $jp$1;
     $k$0163 = $k$1;
     $p$0164 = $p$1;
    }
   }
   if ($cmp160) {
    $add46157 = 1;
    $ip$2153 = -1;
    $jp$2154 = 0;
    $k$2155 = 1;
    $p$2156 = 1;
    while (1) {
     $7 = HEAP8[$n + ($k$2155 + $ip$2153) >> 0] | 0;
     $8 = HEAP8[$n + $add46157 >> 0] | 0;
     do if ($7 << 24 >> 24 == $8 << 24 >> 24) if (($k$2155 | 0) == ($p$2156 | 0)) {
      $ip$3 = $ip$2153;
      $jp$3 = $p$2156 + $jp$2154 | 0;
      $k$3 = 1;
      $p$3 = $p$2156;
      break;
     } else {
      $ip$3 = $ip$2153;
      $jp$3 = $jp$2154;
      $k$3 = $k$2155 + 1 | 0;
      $p$3 = $p$2156;
      break;
     } else if (($7 & 255) < ($8 & 255)) {
      $ip$3 = $ip$2153;
      $jp$3 = $add46157;
      $k$3 = 1;
      $p$3 = $add46157 - $ip$2153 | 0;
      break;
     } else {
      $ip$3 = $jp$2154;
      $jp$3 = $jp$2154 + 1 | 0;
      $k$3 = 1;
      $p$3 = 1;
      break;
     } while (0);
     $add46157 = $k$3 + $jp$3 | 0;
     if ($add46157 >>> 0 >= $l$0169 >>> 0) {
      $ip$0$lcssa179 = $ip$1;
      $ip$2$lcssa = $ip$3;
      $l$0$lcssa176178 = $l$0169;
      $p$0$lcssa180 = $p$1;
      $p$2$lcssa = $p$3;
      label = 25;
      break;
     } else {
      $ip$2153 = $ip$3;
      $jp$2154 = $jp$3;
      $k$2155 = $k$3;
      $p$2156 = $p$3;
     }
    }
   } else {
    $ip$0$lcssa179 = $ip$1;
    $ip$2$lcssa = -1;
    $l$0$lcssa176178 = $l$0169;
    $p$0$lcssa180 = $p$1;
    $p$2$lcssa = 1;
    label = 25;
   }
  } else {
   $ip$0$lcssa179 = -1;
   $ip$2$lcssa = -1;
   $l$0$lcssa176178 = $l$0169;
   $p$0$lcssa180 = 1;
   $p$2$lcssa = 1;
   label = 25;
  }
 } while (0);
 L34 : do if ((label | 0) == 25) {
  $cmp85 = ($ip$2$lcssa + 1 | 0) >>> 0 > ($ip$0$lcssa179 + 1 | 0) >>> 0;
  $p$2$p$0 = $cmp85 ? $p$2$lcssa : $p$0$lcssa180;
  $ip$2$ip$0 = $cmp85 ? $ip$2$lcssa : $ip$0$lcssa179;
  $add90 = $ip$2$ip$0 + 1 | 0;
  if (!(_memcmp($n, $n + $p$2$p$0 | 0, $add90) | 0)) {
   $sub101 = $l$0$lcssa176178 - $p$2$p$0 | 0;
   $mem0$0 = $sub101;
   $p$5 = $p$2$p$0;
   $sub148$pre$phiZ2D = $sub101;
  } else {
   $sub94 = $l$0$lcssa176178 - $ip$2$ip$0 + -1 | 0;
   $add99 = ($ip$2$ip$0 >>> 0 > $sub94 >>> 0 ? $ip$2$ip$0 : $sub94) + 1 | 0;
   $mem0$0 = 0;
   $p$5 = $add99;
   $sub148$pre$phiZ2D = $l$0$lcssa176178 - $add99 | 0;
  }
  $or107 = $l$0$lcssa176178 | 63;
  $sub123 = $l$0$lcssa176178 + -1 | 0;
  $tobool142 = ($mem0$0 | 0) != 0;
  $h$addr$0 = $h;
  $mem$0 = 0;
  $z$0 = $h;
  while (1) {
   $sub$ptr$rhs$cast = $h$addr$0;
   do if (($z$0 - $sub$ptr$rhs$cast | 0) >>> 0 < $l$0$lcssa176178 >>> 0) {
    $call108 = _memchr($z$0, 0, $or107) | 0;
    if (!$call108) {
     $z$3 = $z$0 + $or107 | 0;
     break;
    } else if (($call108 - $sub$ptr$rhs$cast | 0) >>> 0 < $l$0$lcssa176178 >>> 0) {
     $retval$3 = 0;
     break L34;
    } else {
     $z$3 = $call108;
     break;
    }
   } else $z$3 = $z$0; while (0);
   $conv125 = HEAPU8[$h$addr$0 + $sub123 >> 0] | 0;
   L48 : do if (!(1 << ($conv125 & 31) & HEAP32[$byteset + ($conv125 >>> 5 << 2) >> 2])) {
    $k$4$sink = $l$0$lcssa176178;
    $mem$0$be = 0;
   } else {
    $sub139 = $l$0$lcssa176178 - (HEAP32[$shift + ($conv125 << 2) >> 2] | 0) | 0;
    if ($sub139 | 0) {
     $k$4$sink = $tobool142 & ($mem$0 | 0) != 0 & $sub139 >>> 0 < $p$5 >>> 0 ? $sub148$pre$phiZ2D : $sub139;
     $mem$0$be = 0;
     break;
    }
    $cmp156 = $add90 >>> 0 > $mem$0 >>> 0;
    $cond162 = $cmp156 ? $add90 : $mem$0;
    $12 = HEAP8[$n + $cond162 >> 0] | 0;
    L53 : do if ($12 << 24 >> 24) {
     $14 = $12;
     $k$5148 = $cond162;
     while (1) {
      if ($14 << 24 >> 24 != (HEAP8[$h$addr$0 + $k$5148 >> 0] | 0)) break;
      $inc177 = $k$5148 + 1 | 0;
      $14 = HEAP8[$n + $inc177 >> 0] | 0;
      if (!($14 << 24 >> 24)) break L53; else $k$5148 = $inc177;
     }
     $k$4$sink = $k$5148 - $ip$2$ip$0 | 0;
     $mem$0$be = 0;
     break L48;
    } while (0);
    if (!$cmp156) {
     $retval$3 = $h$addr$0;
     break L34;
    }
    $k$6150 = $add90;
    while (1) {
     $k$6150 = $k$6150 + -1 | 0;
     if ((HEAP8[$n + $k$6150 >> 0] | 0) != (HEAP8[$h$addr$0 + $k$6150 >> 0] | 0)) {
      $k$4$sink = $p$5;
      $mem$0$be = $mem0$0;
      break L48;
     }
     if ($k$6150 >>> 0 <= $mem$0 >>> 0) {
      $retval$3 = $h$addr$0;
      break L34;
     }
    }
   } while (0);
   $h$addr$0 = $h$addr$0 + $k$4$sink | 0;
   $mem$0 = $mem$0$be;
   $z$0 = $z$3;
  }
 } while (0);
 STACKTOP = sp;
 return $retval$3 | 0;
}

function __emscripten_dceable_type_decls() {
 _emscripten_glCreateProgram() | 0;
 _emscripten_glCreateShader(0) | 0;
 _emscripten_glCullFace(0);
 _emscripten_glDeleteBuffers(0, 0);
 _emscripten_glDeleteFramebuffers(0, 0);
 _emscripten_glDeleteProgram(0);
 _emscripten_glDeleteRenderbuffers(0, 0);
 _emscripten_glDeleteShader(0);
 _emscripten_glDeleteTextures(0, 0);
 _emscripten_glDepthFunc(0);
 _emscripten_glDepthMask(0);
 _emscripten_glDepthRangef(Math_fround(0.0), Math_fround(0.0));
 _emscripten_glDetachShader(0, 0);
 _emscripten_glDisable(0);
 _emscripten_glDisableVertexAttribArray(0);
 _emscripten_glDrawArrays(0, 0, 0);
 _emscripten_glDrawElements(0, 0, 0, 0);
 _emscripten_glEnable(0);
 _emscripten_glEnableVertexAttribArray(0);
 _emscripten_glFinish();
 _emscripten_glFlush();
 _emscripten_glFramebufferRenderbuffer(0, 0, 0, 0);
 _emscripten_glFramebufferTexture2D(0, 0, 0, 0, 0);
 _emscripten_glFrontFace(0);
 _emscripten_glGenBuffers(0, 0);
 _emscripten_glGenerateMipmap(0);
 _emscripten_glGenFramebuffers(0, 0);
 _emscripten_glGenRenderbuffers(0, 0);
 _emscripten_glGenTextures(0, 0);
 _emscripten_glGetActiveAttrib(0, 0, 0, 0, 0, 0, 0);
 _emscripten_glGetActiveUniform(0, 0, 0, 0, 0, 0, 0);
 _emscripten_glGetAttachedShaders(0, 0, 0, 0);
 _emscripten_glGetAttribLocation(0, 0) | 0;
 _emscripten_glGetBooleanv(0, 0);
 _emscripten_glGetBufferParameteriv(0, 0, 0);
 _emscripten_glGetError() | 0;
 _emscripten_glGetFloatv(0, 0);
 _emscripten_glGetFramebufferAttachmentParameteriv(0, 0, 0, 0);
 _emscripten_glGetIntegerv(0, 0);
 _emscripten_glGetProgramiv(0, 0, 0);
 _emscripten_glGetProgramInfoLog(0, 0, 0, 0);
 _emscripten_glGetRenderbufferParameteriv(0, 0, 0);
 _emscripten_glGetShaderiv(0, 0, 0);
 _emscripten_glGetShaderInfoLog(0, 0, 0, 0);
 _emscripten_glGetShaderPrecisionFormat(0, 0, 0, 0);
 _emscripten_glGetShaderSource(0, 0, 0, 0);
 _emscripten_glGetString(0) | 0;
 _emscripten_glGetTexParameterfv(0, 0, 0);
 _emscripten_glGetTexParameteriv(0, 0, 0);
 _emscripten_glGetUniformfv(0, 0, 0);
 _emscripten_glGetUniformiv(0, 0, 0);
 _emscripten_glGetUniformLocation(0, 0) | 0;
 _emscripten_glGetVertexAttribfv(0, 0, 0);
 _emscripten_glGetVertexAttribiv(0, 0, 0);
 _emscripten_glGetVertexAttribPointerv(0, 0, 0);
 _emscripten_glHint(0, 0);
 _emscripten_glIsBuffer(0) << 24 >> 24;
 _emscripten_glIsEnabled(0) << 24 >> 24;
 _emscripten_glIsFramebuffer(0) << 24 >> 24;
 _emscripten_glIsProgram(0) << 24 >> 24;
 _emscripten_glIsRenderbuffer(0) << 24 >> 24;
 _emscripten_glIsShader(0) << 24 >> 24;
 _emscripten_glIsTexture(0) << 24 >> 24;
 _emscripten_glLineWidth(Math_fround(0.0));
 _emscripten_glLinkProgram(0);
 _emscripten_glPixelStorei(0, 0);
 _emscripten_glPolygonOffset(Math_fround(0.0), Math_fround(0.0));
 _emscripten_glReadPixels(0, 0, 0, 0, 0, 0, 0);
 _emscripten_glReleaseShaderCompiler();
 _emscripten_glRenderbufferStorage(0, 0, 0, 0);
 _emscripten_glSampleCoverage(Math_fround(0.0), 0);
 _emscripten_glScissor(0, 0, 0, 0);
 _emscripten_glShaderBinary(0, 0, 0, 0, 0);
 _emscripten_glShaderSource(0, 0, 0, 0);
 _emscripten_glStencilFunc(0, 0, 0);
 _emscripten_glStencilFuncSeparate(0, 0, 0, 0);
 _emscripten_glStencilMask(0);
 _emscripten_glStencilMaskSeparate(0, 0);
 _emscripten_glStencilOp(0, 0, 0);
 _emscripten_glStencilOpSeparate(0, 0, 0, 0);
 _emscripten_glTexImage2D(0, 0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glTexParameterf(0, 0, Math_fround(0.0));
 _emscripten_glTexParameterfv(0, 0, 0);
 _emscripten_glTexParameteri(0, 0, 0);
 _emscripten_glTexParameteriv(0, 0, 0);
 _emscripten_glTexSubImage2D(0, 0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glUniform1f(0, Math_fround(0.0));
 _emscripten_glUniform1fv(0, 0, 0);
 _emscripten_glUniform1i(0, 0);
 _emscripten_glUniform1iv(0, 0, 0);
 _emscripten_glUniform2f(0, Math_fround(0.0), Math_fround(0.0));
 _emscripten_glUniform2fv(0, 0, 0);
 _emscripten_glUniform2i(0, 0, 0);
 _emscripten_glUniform2iv(0, 0, 0);
 _emscripten_glUniform3f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glUniform3fv(0, 0, 0);
 _emscripten_glUniform3i(0, 0, 0, 0);
 _emscripten_glUniform3iv(0, 0, 0);
 _emscripten_glVertexAttribDivisorANGLE(0, 0);
 _emscripten_glGenQueriesEXT(0, 0);
 _emscripten_glDeleteQueriesEXT(0, 0);
 _emscripten_glIsQueryEXT(0) << 24 >> 24;
 _emscripten_glBeginQueryEXT(0, 0);
 _emscripten_glEndQueryEXT(0);
 _emscripten_glQueryCounterEXT(0, 0);
 _emscripten_glGetQueryivEXT(0, 0, 0);
 _emscripten_glGetQueryObjectivEXT(0, 0, 0);
 _emscripten_glGetQueryObjectuivEXT(0, 0, 0);
 _emscripten_glGetQueryObjecti64vEXT(0, 0, 0);
 _emscripten_glGetQueryObjectui64vEXT(0, 0, 0);
 _emscripten_glBindVertexArrayOES(0);
 _emscripten_glDeleteVertexArraysOES(0, 0);
 _emscripten_glGenVertexArraysOES(0, 0);
 _emscripten_glIsVertexArrayOES(0) << 24 >> 24;
 _emscripten_glDrawBuffersWEBGL(0, 0);
 _emscripten_glDrawArraysInstancedANGLE(0, 0, 0, 0);
 _emscripten_glDrawElementsInstancedANGLE(0, 0, 0, 0, 0);
 _emscripten_glActiveTexture(0);
 _emscripten_glAttachShader(0, 0);
 _emscripten_glBindAttribLocation(0, 0, 0);
 _emscripten_glBindBuffer(0, 0);
 _emscripten_glBindFramebuffer(0, 0);
 _emscripten_glBindRenderbuffer(0, 0);
 _emscripten_glBindTexture(0, 0);
 _emscripten_glBlendColor(Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glBlendEquation(0);
 _emscripten_glBlendEquationSeparate(0, 0);
 _emscripten_glBlendFunc(0, 0);
 _emscripten_glBlendFuncSeparate(0, 0, 0, 0);
 _emscripten_glBufferData(0, 0, 0, 0);
 _emscripten_glBufferSubData(0, 0, 0, 0);
 _emscripten_glCheckFramebufferStatus(0) | 0;
 _emscripten_glClear(0);
 _emscripten_glClearColor(Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glClearDepthf(Math_fround(0.0));
 _emscripten_glClearStencil(0);
 _emscripten_glColorMask(0, 0, 0, 0);
 _emscripten_glCompileShader(0);
 _emscripten_glCompressedTexImage2D(0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCompressedTexSubImage2D(0, 0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCopyTexImage2D(0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCopyTexSubImage2D(0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glUniform4f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glUniform4fv(0, 0, 0);
 _emscripten_glUniform4i(0, 0, 0, 0, 0);
 _emscripten_glUniform4iv(0, 0, 0);
 _emscripten_glUniformMatrix2fv(0, 0, 0, 0);
 _emscripten_glUniformMatrix3fv(0, 0, 0, 0);
 _emscripten_glUniformMatrix4fv(0, 0, 0, 0);
 _emscripten_glUseProgram(0);
 _emscripten_glValidateProgram(0);
 _emscripten_glVertexAttrib1f(0, Math_fround(0.0));
 _emscripten_glVertexAttrib1fv(0, 0);
 _emscripten_glVertexAttrib2f(0, Math_fround(0.0), Math_fround(0.0));
 _emscripten_glVertexAttrib2fv(0, 0);
 _emscripten_glVertexAttrib3f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glVertexAttrib3fv(0, 0);
 _emscripten_glVertexAttrib4f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glVertexAttrib4fv(0, 0);
 _emscripten_glVertexAttribPointer(0, 0, 0, 0, 0, 0);
 _emscripten_glViewport(0, 0, 0, 0);
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $0 = 0, $1 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $add = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr303 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add105 = 0, $add58 = 0, $and = 0, $and2 = 0, $arrayidx = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $bk164 = 0, $child = 0, $child249 = 0, $fd138 = 0, $fd148$pre$phiZ2D = 0, $fd167 = 0, $head = 0, $head299 = 0, $head318 = 0, $head6 = 0, $head79 = 0, $head92 = 0, $newp$2 = 0, $shr = 0, $storemerge = 0, $storemerge3 = 0, $sub = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0;
 $head = $p + 4 | 0;
 $0 = HEAP32[$head >> 2] | 0;
 $and = $0 & -8;
 $add$ptr = $p + $and | 0;
 $1 = HEAP32[7600] | 0;
 $and2 = $0 & 3;
 if (!(($and2 | 0) != 1 & $1 >>> 0 <= $p >>> 0 & $add$ptr >>> 0 > $p >>> 0)) _abort();
 $head6 = $add$ptr + 4 | 0;
 $2 = HEAP32[$head6 >> 2] | 0;
 if (!($2 & 1)) _abort();
 if (!$and2) {
  if ($nb >>> 0 < 256) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  if ($and >>> 0 >= ($nb + 4 | 0) >>> 0) if (($and - $nb | 0) >>> 0 <= HEAP32[7716] << 1 >>> 0) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 if ($and >>> 0 >= $nb >>> 0) {
  $sub = $and - $nb | 0;
  if ($sub >>> 0 <= 15) {
   $newp$2 = $p;
   return $newp$2 | 0;
  }
  $add$ptr17 = $p + $nb | 0;
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr17 + 4 >> 2] = $sub | 3;
  HEAP32[$head6 >> 2] = HEAP32[$head6 >> 2] | 1;
  _dispose_chunk($add$ptr17, $sub);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ((HEAP32[7602] | 0) == ($add$ptr | 0)) {
  $add = (HEAP32[7599] | 0) + $and | 0;
  $sub40 = $add - $nb | 0;
  $add$ptr41 = $p + $nb | 0;
  if ($add >>> 0 <= $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr41 + 4 >> 2] = $sub40 | 1;
  HEAP32[7602] = $add$ptr41;
  HEAP32[7599] = $sub40;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ((HEAP32[7601] | 0) == ($add$ptr | 0)) {
  $add58 = (HEAP32[7598] | 0) + $and | 0;
  if ($add58 >>> 0 < $nb >>> 0) {
   $newp$2 = 0;
   return $newp$2 | 0;
  }
  $sub62 = $add58 - $nb | 0;
  if ($sub62 >>> 0 > 15) {
   $add$ptr66 = $p + $nb | 0;
   $add$ptr67 = $p + $add58 | 0;
   HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
   HEAP32[$add$ptr66 + 4 >> 2] = $sub62 | 1;
   HEAP32[$add$ptr67 >> 2] = $sub62;
   $head79 = $add$ptr67 + 4 | 0;
   HEAP32[$head79 >> 2] = HEAP32[$head79 >> 2] & -2;
   $storemerge = $add$ptr66;
   $storemerge3 = $sub62;
  } else {
   HEAP32[$head >> 2] = $0 & 1 | $add58 | 2;
   $head92 = $p + $add58 + 4 | 0;
   HEAP32[$head92 >> 2] = HEAP32[$head92 >> 2] | 1;
   $storemerge = 0;
   $storemerge3 = 0;
  }
  HEAP32[7598] = $storemerge3;
  HEAP32[7601] = $storemerge;
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 if ($2 & 2 | 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $add105 = ($2 & -8) + $and | 0;
 if ($add105 >>> 0 < $nb >>> 0) {
  $newp$2 = 0;
  return $newp$2 | 0;
 }
 $sub110 = $add105 - $nb | 0;
 $shr = $2 >>> 3;
 L49 : do if ($2 >>> 0 < 256) {
  $11 = HEAP32[$add$ptr + 8 >> 2] | 0;
  $12 = HEAP32[$add$ptr + 12 >> 2] | 0;
  $arrayidx = 30424 + ($shr << 1 << 2) | 0;
  if (($11 | 0) != ($arrayidx | 0)) {
   if ($1 >>> 0 > $11 >>> 0) _abort();
   if ((HEAP32[$11 + 12 >> 2] | 0) != ($add$ptr | 0)) _abort();
  }
  if (($12 | 0) == ($11 | 0)) {
   HEAP32[7596] = HEAP32[7596] & ~(1 << $shr);
   break;
  }
  if (($12 | 0) == ($arrayidx | 0)) $fd148$pre$phiZ2D = $12 + 8 | 0; else {
   if ($1 >>> 0 > $12 >>> 0) _abort();
   $fd138 = $12 + 8 | 0;
   if ((HEAP32[$fd138 >> 2] | 0) == ($add$ptr | 0)) $fd148$pre$phiZ2D = $fd138; else _abort();
  }
  HEAP32[$11 + 12 >> 2] = $12;
  HEAP32[$fd148$pre$phiZ2D >> 2] = $11;
 } else {
  $16 = HEAP32[$add$ptr + 24 >> 2] | 0;
  $17 = HEAP32[$add$ptr + 12 >> 2] | 0;
  do if (($17 | 0) == ($add$ptr | 0)) {
   $child = $add$ptr + 16 | 0;
   $arrayidx179 = $child + 4 | 0;
   $21 = HEAP32[$arrayidx179 >> 2] | 0;
   if (!$21) {
    $22 = HEAP32[$child >> 2] | 0;
    if (!$22) {
     $R$3 = 0;
     break;
    } else {
     $R$1$ph = $22;
     $RP$1$ph = $child;
    }
   } else {
    $R$1$ph = $21;
    $RP$1$ph = $arrayidx179;
   }
   $R$1 = $R$1$ph;
   $RP$1 = $RP$1$ph;
   while (1) {
    $arrayidx186 = $R$1 + 20 | 0;
    $23 = HEAP32[$arrayidx186 >> 2] | 0;
    if (!$23) {
     $arrayidx190 = $R$1 + 16 | 0;
     $24 = HEAP32[$arrayidx190 >> 2] | 0;
     if (!$24) break; else {
      $R$1$be = $24;
      $RP$1$be = $arrayidx190;
     }
    } else {
     $R$1$be = $23;
     $RP$1$be = $arrayidx186;
    }
    $R$1 = $R$1$be;
    $RP$1 = $RP$1$be;
   }
   if ($1 >>> 0 > $RP$1 >>> 0) _abort(); else {
    HEAP32[$RP$1 >> 2] = 0;
    $R$3 = $R$1;
    break;
   }
  } else {
   $18 = HEAP32[$add$ptr + 8 >> 2] | 0;
   if ($1 >>> 0 > $18 >>> 0) _abort();
   $bk164 = $18 + 12 | 0;
   if ((HEAP32[$bk164 >> 2] | 0) != ($add$ptr | 0)) _abort();
   $fd167 = $17 + 8 | 0;
   if ((HEAP32[$fd167 >> 2] | 0) == ($add$ptr | 0)) {
    HEAP32[$bk164 >> 2] = $17;
    HEAP32[$fd167 >> 2] = $18;
    $R$3 = $17;
    break;
   } else _abort();
  } while (0);
  if ($16 | 0) {
   $25 = HEAP32[$add$ptr + 28 >> 2] | 0;
   $arrayidx206 = 30688 + ($25 << 2) | 0;
   do if ((HEAP32[$arrayidx206 >> 2] | 0) == ($add$ptr | 0)) {
    HEAP32[$arrayidx206 >> 2] = $R$3;
    if (!$R$3) {
     HEAP32[7597] = HEAP32[7597] & ~(1 << $25);
     break L49;
    }
   } else if ((HEAP32[7600] | 0) >>> 0 > $16 >>> 0) _abort(); else {
    $arrayidx226 = $16 + 16 | 0;
    HEAP32[((HEAP32[$arrayidx226 >> 2] | 0) == ($add$ptr | 0) ? $arrayidx226 : $16 + 20 | 0) >> 2] = $R$3;
    if (!$R$3) break L49; else break;
   } while (0);
   $30 = HEAP32[7600] | 0;
   if ($30 >>> 0 > $R$3 >>> 0) _abort();
   HEAP32[$R$3 + 24 >> 2] = $16;
   $child249 = $add$ptr + 16 | 0;
   $31 = HEAP32[$child249 >> 2] | 0;
   do if ($31 | 0) if ($30 >>> 0 > $31 >>> 0) _abort(); else {
    HEAP32[$R$3 + 16 >> 2] = $31;
    HEAP32[$31 + 24 >> 2] = $R$3;
    break;
   } while (0);
   $32 = HEAP32[$child249 + 4 >> 2] | 0;
   if ($32 | 0) if ((HEAP32[7600] | 0) >>> 0 > $32 >>> 0) _abort(); else {
    HEAP32[$R$3 + 20 >> 2] = $32;
    HEAP32[$32 + 24 >> 2] = $R$3;
    break;
   }
  }
 } while (0);
 if ($sub110 >>> 0 < 16) {
  HEAP32[$head >> 2] = $0 & 1 | $add105 | 2;
  $head299 = $p + $add105 + 4 | 0;
  HEAP32[$head299 >> 2] = HEAP32[$head299 >> 2] | 1;
  $newp$2 = $p;
  return $newp$2 | 0;
 } else {
  $add$ptr303 = $p + $nb | 0;
  HEAP32[$head >> 2] = $0 & 1 | $nb | 2;
  HEAP32[$add$ptr303 + 4 >> 2] = $sub110 | 3;
  $head318 = $p + $add105 + 4 | 0;
  HEAP32[$head318 >> 2] = HEAP32[$head318 >> 2] | 1;
  _dispose_chunk($add$ptr303, $sub110);
  $newp$2 = $p;
  return $newp$2 | 0;
 }
 return 0;
}

function _DrawTextEx($font, $text, $position, $fontSize, $spacing, $tint) {
 $font = $font | 0;
 $text = $text | 0;
 $position = $position | 0;
 $fontSize = Math_fround($fontSize);
 $spacing = Math_fround($spacing);
 $tint = $tint | 0;
 var $$compoundliteral = 0, $$compoundliteral$byval_copy = 0, $1 = f0, $16 = f0, $22 = f0, $30 = f0, $34 = f0, $43 = f0, $7 = 0, $add21 = f0, $add28 = f0, $add55 = f0, $add63 = f0, $arrayidx42 = 0, $arrayidx42$byval_copy = 0, $codepoint = 0, $codepointByteCount = 0, $conv12 = f0, $conv13 = 0, $conv23 = f0, $conv31 = f0, $conv61 = f0, $fontSize$addr = 0, $i = 0, $index = 0, $length = 0, $mul54 = f0, $mul62 = f0, $rec = 0, $rec$byval_copy = 0, $scaleFactor = 0, $spacing$addr = 0, $text$addr = 0, $textOffsetX = 0, $textOffsetY = 0, $texture = 0, $texture$byval_copy = 0, $tint$byval_copy = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $tint$byval_copy = sp + 128 | 0;
 $$compoundliteral$byval_copy = sp + 120 | 0;
 $rec$byval_copy = sp + 104 | 0;
 $arrayidx42$byval_copy = sp + 88 | 0;
 $texture$byval_copy = sp + 68 | 0;
 $text$addr = sp + 64 | 0;
 $fontSize$addr = sp + 60 | 0;
 $spacing$addr = sp + 56 | 0;
 $length = sp + 52 | 0;
 $textOffsetY = sp + 48 | 0;
 $textOffsetX = sp + 44 | 0;
 $scaleFactor = sp + 40 | 0;
 $i = sp + 36 | 0;
 $codepointByteCount = sp + 32 | 0;
 $codepoint = sp + 28 | 0;
 $index = sp + 24 | 0;
 $rec = sp + 8 | 0;
 $$compoundliteral = sp;
 HEAP32[$text$addr >> 2] = $text;
 HEAPF32[$fontSize$addr >> 2] = $fontSize;
 HEAPF32[$spacing$addr >> 2] = $spacing;
 HEAP32[$length >> 2] = _strlen(HEAP32[$text$addr >> 2] | 0) | 0;
 HEAP32[$textOffsetY >> 2] = 0;
 HEAPF32[$textOffsetX >> 2] = Math_fround(0.0);
 $1 = Math_fround(HEAPF32[$fontSize$addr >> 2]);
 HEAPF32[$scaleFactor >> 2] = Math_fround($1 / Math_fround(HEAP32[$font >> 2] | 0));
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$length >> 2] | 0)) break;
  HEAP32[$codepointByteCount >> 2] = 0;
  HEAP32[$codepoint >> 2] = _GetNextCodepoint((HEAP32[$text$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) | 0, $codepointByteCount) | 0;
  $7 = HEAP32[$codepoint >> 2] | 0;
  dest = $tint$byval_copy;
  src = $font;
  stop = dest + 36 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[$index >> 2] = _GetGlyphIndex($tint$byval_copy, $7) | 0;
  if ((HEAP32[$codepoint >> 2] | 0) == 63) HEAP32[$codepointByteCount >> 2] = 1;
  do if ((HEAP32[$codepoint >> 2] | 0) == 10) {
   CSE$0 = HEAP32[$font >> 2] | 0;
   $conv12 = Math_fround(CSE$0 + ((CSE$0 | 0) / 2 | 0) | 0);
   $conv13 = ~~Math_fround($conv12 * Math_fround(HEAPF32[$scaleFactor >> 2]));
   HEAP32[$textOffsetY >> 2] = (HEAP32[$textOffsetY >> 2] | 0) + $conv13;
   HEAPF32[$textOffsetX >> 2] = Math_fround(0.0);
  } else {
   if ((HEAP32[$codepoint >> 2] | 0) != 32 & (HEAP32[$codepoint >> 2] | 0) != 9) {
    $16 = Math_fround(HEAPF32[$position >> 2]);
    $add21 = Math_fround($16 + Math_fround(HEAPF32[$textOffsetX >> 2]));
    $conv23 = Math_fround(HEAP32[(HEAP32[$font + 32 >> 2] | 0) + ((HEAP32[$index >> 2] | 0) * 36 | 0) + 4 >> 2] | 0);
    HEAPF32[$rec >> 2] = Math_fround($add21 + Math_fround($conv23 * Math_fround(HEAPF32[$scaleFactor >> 2])));
    $22 = Math_fround(HEAPF32[$position + 4 >> 2]);
    $add28 = Math_fround($22 + Math_fround(HEAP32[$textOffsetY >> 2] | 0));
    $conv31 = Math_fround(HEAP32[(HEAP32[$font + 32 >> 2] | 0) + ((HEAP32[$index >> 2] | 0) * 36 | 0) + 8 >> 2] | 0);
    HEAPF32[$rec + 4 >> 2] = Math_fround($add28 + Math_fround($conv31 * Math_fround(HEAPF32[$scaleFactor >> 2])));
    $30 = Math_fround(HEAPF32[(HEAP32[$font + 28 >> 2] | 0) + (HEAP32[$index >> 2] << 4) + 8 >> 2]);
    HEAPF32[$rec + 8 >> 2] = Math_fround($30 * Math_fround(HEAPF32[$scaleFactor >> 2]));
    $34 = Math_fround(HEAPF32[(HEAP32[$font + 28 >> 2] | 0) + (HEAP32[$index >> 2] << 4) + 12 >> 2]);
    HEAPF32[$rec + 12 >> 2] = Math_fround($34 * Math_fround(HEAPF32[$scaleFactor >> 2]));
    $texture = $font + 8 | 0;
    $arrayidx42 = (HEAP32[$font + 28 >> 2] | 0) + (HEAP32[$index >> 2] << 4) | 0;
    HEAPF32[$$compoundliteral >> 2] = Math_fround(0.0);
    HEAPF32[$$compoundliteral + 4 >> 2] = Math_fround(0.0);
    HEAP32[$texture$byval_copy >> 2] = HEAP32[$texture >> 2];
    HEAP32[$texture$byval_copy + 4 >> 2] = HEAP32[$texture + 4 >> 2];
    HEAP32[$texture$byval_copy + 8 >> 2] = HEAP32[$texture + 8 >> 2];
    HEAP32[$texture$byval_copy + 12 >> 2] = HEAP32[$texture + 12 >> 2];
    HEAP32[$texture$byval_copy + 16 >> 2] = HEAP32[$texture + 16 >> 2];
    HEAP32[$arrayidx42$byval_copy >> 2] = HEAP32[$arrayidx42 >> 2];
    HEAP32[$arrayidx42$byval_copy + 4 >> 2] = HEAP32[$arrayidx42 + 4 >> 2];
    HEAP32[$arrayidx42$byval_copy + 8 >> 2] = HEAP32[$arrayidx42 + 8 >> 2];
    HEAP32[$arrayidx42$byval_copy + 12 >> 2] = HEAP32[$arrayidx42 + 12 >> 2];
    HEAP32[$rec$byval_copy >> 2] = HEAP32[$rec >> 2];
    HEAP32[$rec$byval_copy + 4 >> 2] = HEAP32[$rec + 4 >> 2];
    HEAP32[$rec$byval_copy + 8 >> 2] = HEAP32[$rec + 8 >> 2];
    HEAP32[$rec$byval_copy + 12 >> 2] = HEAP32[$rec + 12 >> 2];
    HEAP32[$$compoundliteral$byval_copy >> 2] = HEAP32[$$compoundliteral >> 2];
    HEAP32[$$compoundliteral$byval_copy + 4 >> 2] = HEAP32[$$compoundliteral + 4 >> 2];
    HEAP8[$tint$byval_copy >> 0] = HEAP8[$tint >> 0] | 0;
    HEAP8[$tint$byval_copy + 1 >> 0] = HEAP8[$tint + 1 >> 0] | 0;
    HEAP8[$tint$byval_copy + 2 >> 0] = HEAP8[$tint + 2 >> 0] | 0;
    HEAP8[$tint$byval_copy + 3 >> 0] = HEAP8[$tint + 3 >> 0] | 0;
    _DrawTexturePro($texture$byval_copy, $arrayidx42$byval_copy, $rec$byval_copy, $$compoundliteral$byval_copy, Math_fround(0.0), $tint$byval_copy);
   }
   if (!(HEAP32[(HEAP32[$font + 32 >> 2] | 0) + ((HEAP32[$index >> 2] | 0) * 36 | 0) + 12 >> 2] | 0)) {
    $43 = Math_fround(HEAPF32[(HEAP32[$font + 28 >> 2] | 0) + (HEAP32[$index >> 2] << 4) + 8 >> 2]);
    $mul54 = Math_fround($43 * Math_fround(HEAPF32[$scaleFactor >> 2]));
    $add55 = Math_fround($mul54 + Math_fround(HEAPF32[$spacing$addr >> 2]));
    HEAPF32[$textOffsetX >> 2] = Math_fround(Math_fround(HEAPF32[$textOffsetX >> 2]) + $add55);
    break;
   } else {
    $conv61 = Math_fround(HEAP32[(HEAP32[$font + 32 >> 2] | 0) + ((HEAP32[$index >> 2] | 0) * 36 | 0) + 12 >> 2] | 0);
    $mul62 = Math_fround($conv61 * Math_fround(HEAPF32[$scaleFactor >> 2]));
    $add63 = Math_fround($mul62 + Math_fround(HEAPF32[$spacing$addr >> 2]));
    HEAPF32[$textOffsetX >> 2] = Math_fround(Math_fround(HEAPF32[$textOffsetX >> 2]) + $add63);
    break;
   }
  } while (0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + ((HEAP32[$codepointByteCount >> 2] | 0) - 1);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _stbir__calculate_memory($info) {
 $info = $info | 0;
 var $18 = f0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = f0, $add55 = 0, $add57 = 0, $add59 = 0, $add61 = 0, $add63 = 0, $add65 = 0, $add67 = 0, $call4 = 0, $call7 = 0, $decode_buffer_size60 = 0, $encode_buffer_size66 = 0, $filter_height = 0, $horizontal_buffer_size62 = 0, $horizontal_coefficients_size54 = 0, $horizontal_contributors_size53 = 0, $info$addr = 0, $mul10 = 0, $mul14 = 0, $mul19 = 0, $mul23 = 0, $mul26 = 0, $mul29 = 0, $mul33 = 0, $pixel_margin = 0, $ring_buffer_size64 = 0, $tobool = 0, $vertical_coefficients_size58 = 0, $vertical_contributors_size56 = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0, CSE$5 = 0, CSE$6 = 0, CSE$7 = 0, CSE$8 = 0, CSE$9 = 0, CSE$10 = 0, CSE$11 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $info$addr = sp + 8 | 0;
 $pixel_margin = sp + 4 | 0;
 $filter_height = sp;
 HEAP32[$info$addr >> 2] = $info;
 CSE$0 = HEAP32[$info$addr >> 2] | 0;
 HEAP32[$pixel_margin >> 2] = _stbir__get_filter_pixel_margin(HEAP32[CSE$0 + 80 >> 2] | 0, Math_fround(HEAPF32[CSE$0 + 56 >> 2])) | 0;
 CSE$1 = HEAP32[$info$addr >> 2] | 0;
 HEAP32[$filter_height >> 2] = _stbir__get_filter_pixel_width(HEAP32[CSE$1 + 84 >> 2] | 0, Math_fround(HEAPF32[CSE$1 + 60 >> 2])) | 0;
 $9 = Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 56 >> 2]);
 CSE$2 = HEAP32[$info$addr >> 2] | 0;
 $call4 = _stbir__get_contributors($9, HEAP32[CSE$2 + 80 >> 2] | 0, HEAP32[CSE$2 + 4 >> 2] | 0, HEAP32[CSE$2 + 20 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 152 >> 2] = $call4;
 $18 = Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 60 >> 2]);
 CSE$3 = HEAP32[$info$addr >> 2] | 0;
 $call7 = _stbir__get_contributors($18, HEAP32[CSE$3 + 84 >> 2] | 0, HEAP32[CSE$3 + 8 >> 2] | 0, HEAP32[CSE$3 + 24 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 156 >> 2] = $call7;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 164 >> 2] = (HEAP32[$filter_height >> 2] | 0) + 1;
 CSE$4 = HEAP32[$info$addr >> 2] | 0;
 HEAP32[CSE$4 + 188 >> 2] = HEAP32[CSE$4 + 152 >> 2] << 3;
 $mul10 = (_stbir__get_total_horizontal_coefficients(HEAP32[$info$addr >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 192 >> 2] = $mul10;
 CSE$5 = HEAP32[$info$addr >> 2] | 0;
 HEAP32[CSE$5 + 196 >> 2] = HEAP32[CSE$5 + 156 >> 2] << 3;
 $mul14 = (_stbir__get_total_vertical_coefficients(HEAP32[$info$addr >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 200 >> 2] = $mul14;
 CSE$6 = HEAP32[$info$addr >> 2] | 0;
 $mul19 = (Math_imul((HEAP32[CSE$6 + 4 >> 2] | 0) + (HEAP32[$pixel_margin >> 2] << 1) | 0, HEAP32[CSE$6 + 64 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 204 >> 2] = $mul19;
 CSE$7 = HEAP32[$info$addr >> 2] | 0;
 $mul23 = (Math_imul(HEAP32[CSE$7 + 20 >> 2] | 0, HEAP32[CSE$7 + 64 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 208 >> 2] = $mul23;
 CSE$8 = HEAP32[$info$addr >> 2] | 0;
 $mul26 = Math_imul(HEAP32[CSE$8 + 20 >> 2] | 0, HEAP32[CSE$8 + 64 >> 2] | 0) | 0;
 $mul29 = (Math_imul($mul26, HEAP32[(HEAP32[$info$addr >> 2] | 0) + 164 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 212 >> 2] = $mul29;
 CSE$9 = HEAP32[$info$addr >> 2] | 0;
 $mul33 = (Math_imul(HEAP32[CSE$9 + 20 >> 2] | 0, HEAP32[CSE$9 + 64 >> 2] | 0) | 0) << 2;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 216 >> 2] = $mul33;
 if (!(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 80 >> 2] | 0)) ___assert_fail(14862, 12378, 2265, 14891);
 if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 80 >> 2] | 0) >>> 0 >= 6) ___assert_fail(12474, 12378, 2266, 14891);
 if (!(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 84 >> 2] | 0)) ___assert_fail(14915, 12378, 2267, 14891);
 if ((HEAP32[(HEAP32[$info$addr >> 2] | 0) + 84 >> 2] | 0) >>> 0 >= 6) ___assert_fail(12575, 12378, 2268, 14891);
 $tobool = (_stbir__use_height_upsampling(HEAP32[$info$addr >> 2] | 0) | 0) != 0;
 $70 = HEAP32[$info$addr >> 2] | 0;
 if ($tobool) {
  HEAP32[$70 + 208 >> 2] = 0;
  CSE$10 = HEAP32[$info$addr >> 2] | 0;
  $71 = CSE$10 | 0;
  $horizontal_contributors_size53 = $71 + 188 | 0;
  $72 = HEAP32[$horizontal_contributors_size53 >> 2] | 0;
  $73 = CSE$10 | 0;
  $horizontal_coefficients_size54 = $73 + 192 | 0;
  $74 = HEAP32[$horizontal_coefficients_size54 >> 2] | 0;
  $add55 = $72 + $74 | 0;
  $75 = CSE$10 | 0;
  $vertical_contributors_size56 = $75 + 196 | 0;
  $76 = HEAP32[$vertical_contributors_size56 >> 2] | 0;
  $add57 = $add55 + $76 | 0;
  $77 = CSE$10 | 0;
  $vertical_coefficients_size58 = $77 + 200 | 0;
  $78 = HEAP32[$vertical_coefficients_size58 >> 2] | 0;
  $add59 = $add57 + $78 | 0;
  $79 = CSE$10 | 0;
  $decode_buffer_size60 = $79 + 204 | 0;
  $80 = HEAP32[$decode_buffer_size60 >> 2] | 0;
  $add61 = $add59 + $80 | 0;
  $81 = CSE$10 | 0;
  $horizontal_buffer_size62 = $81 + 208 | 0;
  $82 = HEAP32[$horizontal_buffer_size62 >> 2] | 0;
  $add63 = $add61 + $82 | 0;
  $83 = CSE$10 | 0;
  $ring_buffer_size64 = $83 + 212 | 0;
  $84 = HEAP32[$ring_buffer_size64 >> 2] | 0;
  $add65 = $add63 + $84 | 0;
  $85 = CSE$10 | 0;
  $encode_buffer_size66 = $85 + 216 | 0;
  $86 = HEAP32[$encode_buffer_size66 >> 2] | 0;
  $add67 = $add65 + $86 | 0;
  STACKTOP = sp;
  return $add67 | 0;
 } else {
  HEAP32[$70 + 216 >> 2] = 0;
  CSE$11 = HEAP32[$info$addr >> 2] | 0;
  $71 = CSE$11 | 0;
  $horizontal_contributors_size53 = $71 + 188 | 0;
  $72 = HEAP32[$horizontal_contributors_size53 >> 2] | 0;
  $73 = CSE$11 | 0;
  $horizontal_coefficients_size54 = $73 + 192 | 0;
  $74 = HEAP32[$horizontal_coefficients_size54 >> 2] | 0;
  $add55 = $72 + $74 | 0;
  $75 = CSE$11 | 0;
  $vertical_contributors_size56 = $75 + 196 | 0;
  $76 = HEAP32[$vertical_contributors_size56 >> 2] | 0;
  $add57 = $add55 + $76 | 0;
  $77 = CSE$11 | 0;
  $vertical_coefficients_size58 = $77 + 200 | 0;
  $78 = HEAP32[$vertical_coefficients_size58 >> 2] | 0;
  $add59 = $add57 + $78 | 0;
  $79 = CSE$11 | 0;
  $decode_buffer_size60 = $79 + 204 | 0;
  $80 = HEAP32[$decode_buffer_size60 >> 2] | 0;
  $add61 = $add59 + $80 | 0;
  $81 = CSE$11 | 0;
  $horizontal_buffer_size62 = $81 + 208 | 0;
  $82 = HEAP32[$horizontal_buffer_size62 >> 2] | 0;
  $add63 = $add61 + $82 | 0;
  $83 = CSE$11 | 0;
  $ring_buffer_size64 = $83 + 212 | 0;
  $84 = HEAP32[$ring_buffer_size64 >> 2] | 0;
  $add65 = $add63 + $84 | 0;
  $85 = CSE$11 | 0;
  $encode_buffer_size66 = $85 + 216 | 0;
  $86 = HEAP32[$encode_buffer_size66 >> 2] | 0;
  $add67 = $add65 + $86 | 0;
  STACKTOP = sp;
  return $add67 | 0;
 }
 return 0;
}

function _InitGraphicsDevice($width, $height) {
 $width = $width | 0;
 $height = $height | 0;
 var $$compoundliteral = 0, $$compoundliteral$byval_copy = 0, $$pre_trunc = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $42 = 0, $44 = 0, $46 = 0, $63 = 0, $count = 0, $fbHeight = 0, $fbWidth = 0, $height$addr = 0, $i = 0, $modes = 0, $retval = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer20 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $width$addr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 $$compoundliteral$byval_copy = sp + 56 | 0;
 $vararg_buffer20 = sp + 48 | 0;
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer8 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $retval = sp + 164 | 0;
 $width$addr = sp + 156 | 0;
 $height$addr = sp + 152 | 0;
 $tmp = sp + 88 | 0;
 $count = sp + 80 | 0;
 $modes = sp + 76 | 0;
 $i = sp + 72 | 0;
 $fbWidth = sp + 68 | 0;
 $fbHeight = sp + 64 | 0;
 $$compoundliteral = sp + 160 | 0;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[7525] = HEAP32[$width$addr >> 2];
 HEAP32[7526] = HEAP32[$height$addr >> 2];
 _MatrixIdentity($tmp);
 dest = 30108;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _glfwSetErrorCallback(1) | 0;
 if (!(_glfwInit() | 0)) {
  _TraceLog(4, 11469, $vararg_buffer);
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $63 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $63 | 0;
 }
 HEAP32[7543] = HEAP32[7525];
 HEAP32[7544] = HEAP32[7526];
 _glfwDefaultWindowHints();
 if (0 | 0) _glfwWindowHint(131076, 0); else _glfwWindowHint(131076, 1);
 if (0 | 0) _glfwWindowHint(131075, 1); else _glfwWindowHint(131075, 0);
 if (0 | 0) _glfwWindowHint(131077, 0); else _glfwWindowHint(131077, 1);
 if (0 | 0) _glfwWindowHint(135181, 4);
 do if ((_rlGetVersion() | 0) == 2) {
  _glfwWindowHint(139266, 2);
  _glfwWindowHint(139267, 1);
 } else {
  if ((_rlGetVersion() | 0) == 3) {
   _glfwWindowHint(139266, 3);
   _glfwWindowHint(139267, 3);
   _glfwWindowHint(139272, 204801);
   _glfwWindowHint(139270, 0);
   break;
  }
  if ((_rlGetVersion() | 0) == 4) {
   _glfwWindowHint(139266, 2);
   _glfwWindowHint(139267, 0);
   _glfwWindowHint(139265, 196610);
   _glfwWindowHint(139275, 221185);
  }
 } while (0);
 if (0) {
  HEAP32[7545] = ((HEAP32[7543] | 0) / 2 | 0) - ((HEAP32[7525] | 0) / 2 | 0);
  HEAP32[7546] = ((HEAP32[7544] | 0) / 2 | 0) - ((HEAP32[7526] | 0) / 2 | 0);
  if ((HEAP32[7545] | 0) < 0) HEAP32[7545] = 0;
  if ((HEAP32[7546] | 0) < 0) HEAP32[7546] = 0;
  HEAP32[$count >> 2] = 0;
  HEAP32[$modes >> 2] = _glfwGetVideoModes(_glfwGetPrimaryMonitor() | 0, $count | 0) | 0;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$count >> 2] | 0)) break;
   if ((HEAP32[(HEAP32[$modes >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 24 | 0) >> 2] | 0) >= (HEAP32[7525] | 0)) if ((HEAP32[(HEAP32[$modes >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 24 | 0) + 4 >> 2] | 0) >= (HEAP32[7526] | 0)) {
    label = 29;
    break;
   }
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
  if ((label | 0) == 29) {
   HEAP32[7543] = HEAP32[(HEAP32[$modes >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 24 | 0) >> 2];
   HEAP32[7544] = HEAP32[(HEAP32[$modes >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 24 | 0) + 4 >> 2];
  }
  $28 = HEAP32[7544] | 0;
  HEAP32[$vararg_buffer1 >> 2] = HEAP32[7543];
  HEAP32[$vararg_buffer1 + 4 >> 2] = $28;
  _TraceLog(4, 11495, $vararg_buffer1);
  _SetupFramebuffer(HEAP32[7543] | 0, HEAP32[7544] | 0);
  $31 = HEAP32[7543] | 0;
  $32 = HEAP32[7544] | 0;
  $33 = HEAP32[7524] | 0;
  HEAP32[7522] = _glfwCreateWindow($31 | 0, $32 | 0, $33 | 0, _glfwGetPrimaryMonitor() | 0, 0) | 0;
 } else {
  HEAP32[7522] = _glfwCreateWindow(HEAP32[7525] | 0, HEAP32[7526] | 0, HEAP32[7524] | 0, 0, 0) | 0;
  if (HEAP32[7522] | 0) {
   HEAP32[7547] = HEAP32[7525];
   HEAP32[7548] = HEAP32[7526];
  }
 }
 if (!(HEAP32[7522] | 0)) {
  _glfwTerminate();
  _TraceLog(4, 11533, $vararg_buffer4);
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $63 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $63 | 0;
 }
 _TraceLog(3, 11566, $vararg_buffer6);
 $42 = HEAP32[7548] | 0;
 HEAP32[$vararg_buffer8 >> 2] = HEAP32[7547];
 HEAP32[$vararg_buffer8 + 4 >> 2] = $42;
 _TraceLog(3, 11606, $vararg_buffer8);
 $44 = HEAP32[7526] | 0;
 HEAP32[$vararg_buffer12 >> 2] = HEAP32[7525];
 HEAP32[$vararg_buffer12 + 4 >> 2] = $44;
 _TraceLog(3, 11627, $vararg_buffer12);
 $46 = HEAP32[7550] | 0;
 HEAP32[$$compoundliteral$byval_copy >> 2] = HEAP32[7549];
 HEAP32[$$compoundliteral$byval_copy + 4 >> 2] = $46;
 _TraceLog(3, 11648, $$compoundliteral$byval_copy);
 _glfwSetWindowSizeCallback(HEAP32[7522] | 0, 1) | 0;
 _glfwSetCursorEnterCallback(HEAP32[7522] | 0, 2) | 0;
 _glfwSetKeyCallback(HEAP32[7522] | 0, 1) | 0;
 _glfwSetMouseButtonCallback(HEAP32[7522] | 0, 1) | 0;
 _glfwSetCursorPosCallback(HEAP32[7522] | 0, 1) | 0;
 _glfwSetCharCallback(HEAP32[7522] | 0, 3) | 0;
 _glfwSetScrollCallback(HEAP32[7522] | 0, 2) | 0;
 _glfwSetWindowIconifyCallback(HEAP32[7522] | 0, 4) | 0;
 _glfwSetDropCallback(HEAP32[7522] | 0, 2) | 0;
 _glfwMakeContextCurrent(HEAP32[7522] | 0);
 if (0 | 0) {
  _glfwSwapInterval(1);
  _TraceLog(3, 11673, $vararg_buffer20);
 }
 _rlglInit(HEAP32[7525] | 0, HEAP32[7526] | 0);
 HEAP32[$fbWidth >> 2] = HEAP32[7547];
 HEAP32[$fbHeight >> 2] = HEAP32[7548];
 _SetupViewport(HEAP32[$fbWidth >> 2] | 0, HEAP32[$fbHeight >> 2] | 0);
 HEAP8[$$compoundliteral >> 0] = -11;
 HEAP8[$$compoundliteral + 1 >> 0] = -11;
 HEAP8[$$compoundliteral + 2 >> 0] = -11;
 HEAP8[$$compoundliteral + 3 >> 0] = -1;
 HEAP8[$$compoundliteral$byval_copy >> 0] = HEAP8[$$compoundliteral >> 0] | 0;
 HEAP8[$$compoundliteral$byval_copy + 1 >> 0] = HEAP8[$$compoundliteral + 1 >> 0] | 0;
 HEAP8[$$compoundliteral$byval_copy + 2 >> 0] = HEAP8[$$compoundliteral + 2 >> 0] | 0;
 HEAP8[$$compoundliteral$byval_copy + 3 >> 0] = HEAP8[$$compoundliteral + 3 >> 0] | 0;
 _ClearBackground($$compoundliteral$byval_copy);
 HEAP8[$retval >> 0] = 1;
 $$pre_trunc = HEAP8[$retval >> 0] | 0;
 $63 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $63 | 0;
}

function _DrawBuffersDefault() {
 var $3 = 0, $8 = 0, $eye = 0, $eyesCount = 0, $i = 0, $i68 = 0, $inc81 = 0, $matMVP = 0, $matMVP$byval_copy = 0, $matModelView = 0, $matProjection = 0, $modelview$byval_copy = 0, $tmp = 0, $vertexOffset = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0, CSE$1 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416);
 $matMVP$byval_copy = sp + 344 | 0;
 $modelview$byval_copy = sp + 216 | 0;
 $matProjection = sp + 280 | 0;
 $matModelView = sp + 152 | 0;
 $eyesCount = sp + 148 | 0;
 $eye = sp + 144 | 0;
 $matMVP = sp + 80 | 0;
 $tmp = sp + 16 | 0;
 $vertexOffset = sp + 8 | 0;
 $i = sp + 4 | 0;
 $i68 = sp;
 dest = $matProjection;
 src = 29452;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $matModelView;
 src = 29520;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$eyesCount >> 2] = 1;
 HEAP32[$eyesCount >> 2] = 0 ? 2 : 1;
 HEAP32[$eye >> 2] = 0;
 while (1) {
  if ((HEAP32[$eye >> 2] | 0) >= (HEAP32[$eyesCount >> 2] | 0)) break;
  if ((HEAP32[$eyesCount >> 2] | 0) == 2) {
   $3 = HEAP32[$eye >> 2] | 0;
   dest = $modelview$byval_copy;
   src = $matProjection;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $matMVP$byval_copy;
   src = $matModelView;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   _SetStereoView($3, $modelview$byval_copy, $matMVP$byval_copy);
  }
  if ((HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) >> 2] | 0) > 0) {
   _glUseProgram(HEAP32[7417] | 0);
   dest = $modelview$byval_copy;
   src = 29520;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   dest = $matMVP$byval_copy;
   src = 29452;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   _MatrixMultiply($matMVP, $modelview$byval_copy, $matMVP$byval_copy);
   $8 = HEAP32[(HEAP32[7418] | 0) + 24 >> 2] | 0;
   dest = $matMVP$byval_copy;
   src = $matMVP;
   stop = dest + 64 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   _MatrixToFloatV($tmp, $matMVP$byval_copy);
   _glUniformMatrix4fv($8 | 0, 1, 0, $tmp | 0);
   _glUniform4f(HEAP32[(HEAP32[7418] | 0) + 44 >> 2] | 0, 1.0, 1.0, 1.0, 1.0);
   _glUniform1i(HEAP32[(HEAP32[7418] | 0) + 56 >> 2] | 0, 0);
   HEAP32[$vertexOffset >> 2] = 0;
   if (HEAP8[30881] & 1) FUNCTION_TABLE_vi[HEAP32[7419] & 31](HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 28 >> 2] | 0); else {
    _glBindBuffer(34962, HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 32 >> 2] | 0);
    _glVertexAttribPointer(HEAP32[HEAP32[7418] >> 2] | 0, 3, 5126, 0, 0, 0);
    _glEnableVertexAttribArray(HEAP32[HEAP32[7418] >> 2] | 0);
    _glBindBuffer(34962, HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 32 + 4 >> 2] | 0);
    _glVertexAttribPointer(HEAP32[(HEAP32[7418] | 0) + 4 >> 2] | 0, 2, 5126, 0, 0, 0);
    _glEnableVertexAttribArray(HEAP32[(HEAP32[7418] | 0) + 4 >> 2] | 0);
    _glBindBuffer(34962, HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 32 + 8 >> 2] | 0);
    _glVertexAttribPointer(HEAP32[(HEAP32[7418] | 0) + 20 >> 2] | 0, 4, 5121, 1, 0, 0);
    _glEnableVertexAttribArray(HEAP32[(HEAP32[7418] | 0) + 20 >> 2] | 0);
    _glBindBuffer(34963, HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 32 + 12 >> 2] | 0);
   }
   _glActiveTexture(33984);
   HEAP32[$i >> 2] = 0;
   while (1) {
    if ((HEAP32[$i >> 2] | 0) >= (HEAP32[7414] | 0)) break;
    _glBindTexture(3553, HEAP32[(HEAP32[7413] | 0) + (HEAP32[$i >> 2] << 4) + 12 >> 2] | 0);
    if ((HEAP32[(HEAP32[7413] | 0) + (HEAP32[$i >> 2] << 4) >> 2] | 0) == 1) label = 13; else if ((HEAP32[(HEAP32[7413] | 0) + (HEAP32[$i >> 2] << 4) >> 2] | 0) == 4) label = 13; else _glDrawElements(4, ((HEAP32[(HEAP32[7413] | 0) + (HEAP32[$i >> 2] << 4) + 4 >> 2] | 0) / 4 | 0) * 6 | 0, 5123, ((HEAP32[$vertexOffset >> 2] << 1 >>> 0) / 4 | 0) * 6 | 0);
    if ((label | 0) == 13) {
     label = 0;
     CSE$1 = (HEAP32[7413] | 0) + (HEAP32[$i >> 2] << 4) | 0;
     _glDrawArrays(HEAP32[CSE$1 >> 2] | 0, HEAP32[$vertexOffset >> 2] | 0, HEAP32[CSE$1 + 4 >> 2] | 0);
    }
    CSE$0 = (HEAP32[7413] | 0) + (HEAP32[$i >> 2] << 4) | 0;
    HEAP32[$vertexOffset >> 2] = (HEAP32[$vertexOffset >> 2] | 0) + ((HEAP32[CSE$0 + 4 >> 2] | 0) + (HEAP32[CSE$0 + 8 >> 2] | 0));
    HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
   }
   if (!(HEAP8[30881] & 1)) {
    _glBindBuffer(34962, 0);
    _glBindBuffer(34963, 0);
   }
   _glBindTexture(3553, 0);
  }
  if (HEAP8[30881] & 1) FUNCTION_TABLE_vi[HEAP32[7419] & 31](0);
  _glUseProgram(0);
  HEAP32[$eye >> 2] = (HEAP32[$eye >> 2] | 0) + 1;
 }
 HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) >> 2] = 0;
 HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 4 >> 2] = 0;
 HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 8 >> 2] = 0;
 HEAPF32[1893] = Math_fround(-1.0);
 dest = 29452;
 src = $matProjection;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = 29520;
 src = $matModelView;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$i68 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i68 >> 2] | 0) >= 256) break;
  HEAP32[(HEAP32[7413] | 0) + (HEAP32[$i68 >> 2] << 4) >> 2] = 7;
  HEAP32[(HEAP32[7413] | 0) + (HEAP32[$i68 >> 2] << 4) + 4 >> 2] = 0;
  HEAP32[(HEAP32[7413] | 0) + (HEAP32[$i68 >> 2] << 4) + 12 >> 2] = HEAP32[7416];
  HEAP32[$i68 >> 2] = (HEAP32[$i68 >> 2] | 0) + 1;
 }
 HEAP32[7414] = 1;
 $inc81 = (HEAP32[7415] | 0) + 1 | 0;
 HEAP32[7415] = $inc81;
 HEAP32[7415] = (HEAP32[7415] | 0) >= 1 ? 0 : $inc81;
 STACKTOP = sp;
 return;
}

function _ImageMipmaps($image) {
 $image = $image | 0;
 var $24 = 0, $25 = 0, $34 = 0, $49 = 0, $64 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $call22 = 0, $i = 0, $imCopy = 0, $imCopy$byval_copy = 0, $image$addr = 0, $mipCount = 0, $mipHeight = 0, $mipSize = 0, $mipWidth = 0, $mipmaps47 = 0, $nextmip = 0, $temp = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer25 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $imCopy$byval_copy = sp + 80 | 0;
 $vararg_buffer25 = sp + 72 | 0;
 $vararg_buffer18 = sp + 48 | 0;
 $vararg_buffer16 = sp + 40 | 0;
 $vararg_buffer13 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $image$addr = sp + 148 | 0;
 $mipCount = sp + 144 | 0;
 $mipWidth = sp + 140 | 0;
 $mipHeight = sp + 136 | 0;
 $mipSize = sp + 132 | 0;
 $temp = sp + 128 | 0;
 $nextmip = sp + 124 | 0;
 $imCopy = sp + 104 | 0;
 $i = sp + 100 | 0;
 HEAP32[$image$addr >> 2] = $image;
 if (!(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$mipCount >> 2] = 1;
 HEAP32[$mipWidth >> 2] = HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2];
 HEAP32[$mipHeight >> 2] = HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2];
 HEAP32[$mipSize >> 2] = _GetPixelDataSize(HEAP32[$mipWidth >> 2] | 0, HEAP32[$mipHeight >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) | 0;
 while (1) {
  if (!((HEAP32[$mipWidth >> 2] | 0) != 1 ? 1 : (HEAP32[$mipHeight >> 2] | 0) != 1)) break;
  if ((HEAP32[$mipWidth >> 2] | 0) != 1) HEAP32[$mipWidth >> 2] = (HEAP32[$mipWidth >> 2] | 0) / 2 | 0;
  if ((HEAP32[$mipHeight >> 2] | 0) != 1) HEAP32[$mipHeight >> 2] = (HEAP32[$mipHeight >> 2] | 0) / 2 | 0;
  if ((HEAP32[$mipWidth >> 2] | 0) < 1) HEAP32[$mipWidth >> 2] = 1;
  if ((HEAP32[$mipHeight >> 2] | 0) < 1) HEAP32[$mipHeight >> 2] = 1;
  $24 = HEAP32[$mipHeight >> 2] | 0;
  $25 = HEAP32[$mipSize >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = HEAP32[$mipWidth >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = $24;
  HEAP32[$vararg_buffer + 8 >> 2] = $25;
  _TraceLog(2, 15375, $vararg_buffer);
  HEAP32[$mipCount >> 2] = (HEAP32[$mipCount >> 2] | 0) + 1;
  $call22 = _GetPixelDataSize(HEAP32[$mipWidth >> 2] | 0, HEAP32[$mipHeight >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) | 0;
  HEAP32[$mipSize >> 2] = (HEAP32[$mipSize >> 2] | 0) + $call22;
 }
 $34 = HEAP32[$mipCount >> 2] | 0;
 HEAP32[$vararg_buffer3 >> 2] = HEAP32[(HEAP32[$image$addr >> 2] | 0) + 12 >> 2];
 HEAP32[$vararg_buffer3 + 4 >> 2] = $34;
 _TraceLog(2, 15420, $vararg_buffer3);
 HEAP32[$vararg_buffer7 >> 2] = HEAP32[$mipSize >> 2];
 _TraceLog(2, 15465, $vararg_buffer7);
 HEAP32[$imCopy$byval_copy >> 2] = HEAP32[HEAP32[$image$addr >> 2] >> 2];
 _TraceLog(2, 15497, $imCopy$byval_copy);
 if ((HEAP32[(HEAP32[$image$addr >> 2] | 0) + 12 >> 2] | 0) >= (HEAP32[$mipCount >> 2] | 0)) {
  _TraceLog(4, 15681, $vararg_buffer25);
  STACKTOP = sp;
  return;
 }
 HEAP32[$temp >> 2] = _realloc(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0, HEAP32[$mipSize >> 2] | 0) | 0;
 if (HEAP32[$temp >> 2] | 0) {
  HEAP32[HEAP32[$image$addr >> 2] >> 2] = HEAP32[$temp >> 2];
  HEAP32[$vararg_buffer13 >> 2] = HEAP32[$temp >> 2];
  _TraceLog(2, 15535, $vararg_buffer13);
 } else _TraceLog(4, 15577, $vararg_buffer16);
 $49 = HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0;
 CSE$0 = HEAP32[$image$addr >> 2] | 0;
 HEAP32[$nextmip >> 2] = $49 + (_GetPixelDataSize(HEAP32[CSE$0 + 4 >> 2] | 0, HEAP32[CSE$0 + 8 >> 2] | 0, HEAP32[CSE$0 + 16 >> 2] | 0) | 0);
 HEAP32[$mipWidth >> 2] = (HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0) / 2 | 0;
 HEAP32[$mipHeight >> 2] = (HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0) / 2 | 0;
 HEAP32[$mipSize >> 2] = _GetPixelDataSize(HEAP32[$mipWidth >> 2] | 0, HEAP32[$mipHeight >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) | 0;
 $64 = HEAP32[$image$addr >> 2] | 0;
 HEAP32[$imCopy$byval_copy >> 2] = HEAP32[$64 >> 2];
 HEAP32[$imCopy$byval_copy + 4 >> 2] = HEAP32[$64 + 4 >> 2];
 HEAP32[$imCopy$byval_copy + 8 >> 2] = HEAP32[$64 + 8 >> 2];
 HEAP32[$imCopy$byval_copy + 12 >> 2] = HEAP32[$64 + 12 >> 2];
 HEAP32[$imCopy$byval_copy + 16 >> 2] = HEAP32[$64 + 16 >> 2];
 _ImageCopy($imCopy, $imCopy$byval_copy);
 HEAP32[$i >> 2] = 1;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$mipCount >> 2] | 0)) break;
  $68 = HEAP32[$mipWidth >> 2] | 0;
  $69 = HEAP32[$mipHeight >> 2] | 0;
  $70 = HEAP32[$mipSize >> 2] | 0;
  $71 = HEAP32[$nextmip >> 2] | 0;
  HEAP32[$vararg_buffer18 >> 2] = HEAP32[$i >> 2];
  HEAP32[$vararg_buffer18 + 4 >> 2] = $68;
  HEAP32[$vararg_buffer18 + 8 >> 2] = $69;
  HEAP32[$vararg_buffer18 + 12 >> 2] = $70;
  HEAP32[$vararg_buffer18 + 16 >> 2] = $71;
  _TraceLog(2, 15624, $vararg_buffer18);
  _ImageResize($imCopy, HEAP32[$mipWidth >> 2] | 0, HEAP32[$mipHeight >> 2] | 0);
  _memcpy(HEAP32[$nextmip >> 2] | 0, HEAP32[$imCopy >> 2] | 0, HEAP32[$mipSize >> 2] | 0) | 0;
  HEAP32[$nextmip >> 2] = (HEAP32[$nextmip >> 2] | 0) + (HEAP32[$mipSize >> 2] | 0);
  $mipmaps47 = (HEAP32[$image$addr >> 2] | 0) + 12 | 0;
  HEAP32[$mipmaps47 >> 2] = (HEAP32[$mipmaps47 >> 2] | 0) + 1;
  HEAP32[$mipWidth >> 2] = (HEAP32[$mipWidth >> 2] | 0) / 2 | 0;
  HEAP32[$mipHeight >> 2] = (HEAP32[$mipHeight >> 2] | 0) / 2 | 0;
  if ((HEAP32[$mipWidth >> 2] | 0) < 1) HEAP32[$mipWidth >> 2] = 1;
  if ((HEAP32[$mipHeight >> 2] | 0) < 1) HEAP32[$mipHeight >> 2] = 1;
  HEAP32[$mipSize >> 2] = _GetPixelDataSize(HEAP32[$mipWidth >> 2] | 0, HEAP32[$mipHeight >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$imCopy$byval_copy >> 2] = HEAP32[$imCopy >> 2];
 HEAP32[$imCopy$byval_copy + 4 >> 2] = HEAP32[$imCopy + 4 >> 2];
 HEAP32[$imCopy$byval_copy + 8 >> 2] = HEAP32[$imCopy + 8 >> 2];
 HEAP32[$imCopy$byval_copy + 12 >> 2] = HEAP32[$imCopy + 12 >> 2];
 HEAP32[$imCopy$byval_copy + 16 >> 2] = HEAP32[$imCopy + 16 >> 2];
 _UnloadImage($imCopy$byval_copy);
 STACKTOP = sp;
 return;
}

function _rlLoadTexture($data, $width, $height, $format, $mipmapCount) {
 $data = $data | 0;
 $width = $width | 0;
 $height = $height | 0;
 $format = $format | 0;
 $mipmapCount = $mipmapCount | 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $data$addr = 0, $format$addr = 0, $glFormat = 0, $glInternalFormat = 0, $glType = 0, $height$addr = 0, $i = 0, $id = 0, $mipHeight = 0, $mipOffset = 0, $mipSize = 0, $mipWidth = 0, $mipmapCount$addr = 0, $retval = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer24 = 0, $vararg_buffer30 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $vararg_buffer30 = sp + 88 | 0;
 $vararg_buffer24 = sp + 72 | 0;
 $vararg_buffer17 = sp + 48 | 0;
 $vararg_buffer15 = sp + 40 | 0;
 $vararg_buffer13 = sp + 32 | 0;
 $vararg_buffer11 = sp + 24 | 0;
 $vararg_buffer9 = sp + 16 | 0;
 $vararg_buffer7 = sp + 8 | 0;
 $vararg_buffer = sp;
 $retval = sp + 148 | 0;
 $data$addr = sp + 144 | 0;
 $width$addr = sp + 140 | 0;
 $height$addr = sp + 136 | 0;
 $format$addr = sp + 132 | 0;
 $mipmapCount$addr = sp + 128 | 0;
 $id = sp + 124 | 0;
 $mipWidth = sp + 120 | 0;
 $mipHeight = sp + 116 | 0;
 $mipOffset = sp + 112 | 0;
 $i = sp + 108 | 0;
 $mipSize = sp + 104 | 0;
 $glInternalFormat = sp + 100 | 0;
 $glFormat = sp + 96 | 0;
 $glType = sp + 92 | 0;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$format$addr >> 2] = $format;
 HEAP32[$mipmapCount$addr >> 2] = $mipmapCount;
 _glBindTexture(3553, 0);
 HEAP32[$id >> 2] = 0;
 if (!(HEAP8[30885] & 1)) if ((HEAP32[$format$addr >> 2] | 0) == 11 | (HEAP32[$format$addr >> 2] | 0) == 12 | (HEAP32[$format$addr >> 2] | 0) == 13 | (HEAP32[$format$addr >> 2] | 0) == 14) {
  _TraceLog(4, 10755, $vararg_buffer);
  HEAP32[$retval >> 2] = HEAP32[$id >> 2];
  $63 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 if ((HEAP8[30886] & 1 ^ 1) & (HEAP32[$format$addr >> 2] | 0) == 15) {
  _TraceLog(4, 10799, $vararg_buffer7);
  HEAP32[$retval >> 2] = HEAP32[$id >> 2];
  $63 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 if (!(HEAP8[30887] & 1)) if ((HEAP32[$format$addr >> 2] | 0) == 16 | (HEAP32[$format$addr >> 2] | 0) == 17) {
  _TraceLog(4, 10844, $vararg_buffer9);
  HEAP32[$retval >> 2] = HEAP32[$id >> 2];
  $63 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 if (!(HEAP8[30888] & 1)) if ((HEAP32[$format$addr >> 2] | 0) == 18 | (HEAP32[$format$addr >> 2] | 0) == 19) {
  _TraceLog(4, 10889, $vararg_buffer11);
  HEAP32[$retval >> 2] = HEAP32[$id >> 2];
  $63 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 if (!(HEAP8[30889] & 1)) if ((HEAP32[$format$addr >> 2] | 0) == 20 | (HEAP32[$format$addr >> 2] | 0) == 21) {
  _TraceLog(4, 10934, $vararg_buffer13);
  HEAP32[$retval >> 2] = HEAP32[$id >> 2];
  $63 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $63 | 0;
 }
 _glPixelStorei(3317, 1);
 _glGenTextures(1, $id | 0);
 _glBindTexture(3553, HEAP32[$id >> 2] | 0);
 HEAP32[$mipWidth >> 2] = HEAP32[$width$addr >> 2];
 HEAP32[$mipHeight >> 2] = HEAP32[$height$addr >> 2];
 HEAP32[$mipOffset >> 2] = 0;
 HEAP32[$vararg_buffer15 >> 2] = HEAP32[$data$addr >> 2];
 _TraceLog(2, 10979, $vararg_buffer15);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$mipmapCount$addr >> 2] | 0)) break;
  HEAP32[$mipSize >> 2] = _GetPixelDataSize(HEAP32[$mipWidth >> 2] | 0, HEAP32[$mipHeight >> 2] | 0, HEAP32[$format$addr >> 2] | 0) | 0;
  _rlGetGlTextureFormats(HEAP32[$format$addr >> 2] | 0, $glInternalFormat, $glFormat, $glType);
  $32 = HEAP32[$mipWidth >> 2] | 0;
  $33 = HEAP32[$mipHeight >> 2] | 0;
  $34 = HEAP32[$mipSize >> 2] | 0;
  $35 = HEAP32[$mipOffset >> 2] | 0;
  HEAP32[$vararg_buffer17 >> 2] = HEAP32[$i >> 2];
  HEAP32[$vararg_buffer17 + 4 >> 2] = $32;
  HEAP32[$vararg_buffer17 + 8 >> 2] = $33;
  HEAP32[$vararg_buffer17 + 12 >> 2] = $34;
  HEAP32[$vararg_buffer17 + 16 >> 2] = $35;
  _TraceLog(2, 11023, $vararg_buffer17);
  do if ((HEAP32[$glInternalFormat >> 2] | 0) != -1) {
   $38 = HEAP32[$i >> 2] | 0;
   $39 = HEAP32[$glInternalFormat >> 2] | 0;
   $40 = HEAP32[$mipWidth >> 2] | 0;
   $41 = HEAP32[$mipHeight >> 2] | 0;
   if ((HEAP32[$format$addr >> 2] | 0) < 11) {
    _glTexImage2D(3553, $38 | 0, $39 | 0, $40 | 0, $41 | 0, 0, HEAP32[$glFormat >> 2] | 0, HEAP32[$glType >> 2] | 0, (HEAP32[$data$addr >> 2] | 0) + (HEAP32[$mipOffset >> 2] | 0) | 0);
    break;
   } else {
    _glCompressedTexImage2D(3553, $38 | 0, $39 | 0, $40 | 0, $41 | 0, 0, HEAP32[$mipSize >> 2] | 0, (HEAP32[$data$addr >> 2] | 0) + (HEAP32[$mipOffset >> 2] | 0) | 0);
    break;
   }
  } while (0);
  HEAP32[$mipWidth >> 2] = (HEAP32[$mipWidth >> 2] | 0) / 2 | 0;
  HEAP32[$mipHeight >> 2] = (HEAP32[$mipHeight >> 2] | 0) / 2 | 0;
  HEAP32[$mipOffset >> 2] = (HEAP32[$mipOffset >> 2] | 0) + (HEAP32[$mipSize >> 2] | 0);
  if ((HEAP32[$mipWidth >> 2] | 0) < 1) HEAP32[$mipWidth >> 2] = 1;
  if ((HEAP32[$mipHeight >> 2] | 0) < 1) HEAP32[$mipHeight >> 2] = 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if (HEAP8[30883] & 1) {
  _glTexParameteri(3553, 10242, 10497);
  _glTexParameteri(3553, 10243, 10497);
 } else {
  _glTexParameteri(3553, 10242, 33071);
  _glTexParameteri(3553, 10243, 33071);
 }
 _glTexParameteri(3553, 10240, 9728);
 _glTexParameteri(3553, 10241, 9728);
 _glBindTexture(3553, 0);
 if ((HEAP32[$id >> 2] | 0) >>> 0 > 0) {
  $59 = HEAP32[$width$addr >> 2] | 0;
  $60 = HEAP32[$height$addr >> 2] | 0;
  $61 = HEAP32[$mipmapCount$addr >> 2] | 0;
  HEAP32[$vararg_buffer24 >> 2] = HEAP32[$id >> 2];
  HEAP32[$vararg_buffer24 + 4 >> 2] = $59;
  HEAP32[$vararg_buffer24 + 8 >> 2] = $60;
  HEAP32[$vararg_buffer24 + 12 >> 2] = $61;
  _TraceLog(3, 11076, $vararg_buffer24);
 } else _TraceLog(4, 11138, $vararg_buffer30);
 HEAP32[$retval >> 2] = HEAP32[$id >> 2];
 $63 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $63 | 0;
}

function _GifWriteLzwImage($f, $image, $left, $top, $width, $height, $delay, $pPal) {
 $f = $f | 0;
 $image = $image | 0;
 $left = $left | 0;
 $top = $top | 0;
 $width = $width | 0;
 $height = $height | 0;
 $delay = $delay | 0;
 $pPal = $pPal | 0;
 var $95 = 0, $96 = 0, $clearCode = 0, $codeSize = 0, $codetree = 0, $curCode = 0, $delay$addr = 0, $f$addr = 0, $height$addr = 0, $image$addr = 0, $inc = 0, $left$addr = 0, $maxCode = 0, $minCodeSize = 0, $mul = 0, $nextValue = 0, $pPal$addr = 0, $stat = 0, $top$addr = 0, $width$addr = 0, $xx = 0, $yy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $f$addr = sp + 324 | 0;
 $image$addr = sp + 320 | 0;
 $left$addr = sp + 316 | 0;
 $top$addr = sp + 312 | 0;
 $width$addr = sp + 308 | 0;
 $height$addr = sp + 304 | 0;
 $delay$addr = sp + 300 | 0;
 $pPal$addr = sp + 296 | 0;
 $minCodeSize = sp + 292 | 0;
 $clearCode = sp + 288 | 0;
 $codetree = sp + 284 | 0;
 $curCode = sp + 280 | 0;
 $codeSize = sp + 276 | 0;
 $maxCode = sp + 272 | 0;
 $stat = sp + 8 | 0;
 $yy = sp + 4 | 0;
 $xx = sp;
 $nextValue = sp + 328 | 0;
 HEAP32[$f$addr >> 2] = $f;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$left$addr >> 2] = $left;
 HEAP32[$top$addr >> 2] = $top;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$delay$addr >> 2] = $delay;
 HEAP32[$pPal$addr >> 2] = $pPal;
 _fputc(33, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(249, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(4, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(5, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(HEAP32[$delay$addr >> 2] & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc((HEAP32[$delay$addr >> 2] | 0) >>> 8 & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(0, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(0, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(44, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(HEAP32[$left$addr >> 2] & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc((HEAP32[$left$addr >> 2] | 0) >>> 8 & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(HEAP32[$top$addr >> 2] & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc((HEAP32[$top$addr >> 2] | 0) >>> 8 & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(HEAP32[$width$addr >> 2] & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc((HEAP32[$width$addr >> 2] | 0) >>> 8 & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(HEAP32[$height$addr >> 2] & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc((HEAP32[$height$addr >> 2] | 0) >>> 8 & 255, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(128 + (HEAP32[HEAP32[$pPal$addr >> 2] >> 2] | 0) - 1 | 0, HEAP32[$f$addr >> 2] | 0) | 0;
 _GifWritePalette(HEAP32[$f$addr >> 2] | 0, HEAP32[$pPal$addr >> 2] | 0);
 HEAP32[$minCodeSize >> 2] = HEAP32[HEAP32[$pPal$addr >> 2] >> 2];
 HEAP32[$clearCode >> 2] = 1 << HEAP32[HEAP32[$pPal$addr >> 2] >> 2];
 _fputc(HEAP32[$minCodeSize >> 2] | 0, HEAP32[$f$addr >> 2] | 0) | 0;
 HEAP32[$codetree >> 2] = _malloc(2097152) | 0;
 _memset(HEAP32[$codetree >> 2] | 0, 0, 2097152) | 0;
 HEAP32[$curCode >> 2] = -1;
 HEAP32[$codeSize >> 2] = (HEAP32[$minCodeSize >> 2] | 0) + 1;
 HEAP32[$maxCode >> 2] = (HEAP32[$clearCode >> 2] | 0) + 1;
 HEAP8[$stat + 1 >> 0] = 0;
 HEAP8[$stat >> 0] = 0;
 HEAP32[$stat + 4 >> 2] = 0;
 _GifWriteCode(HEAP32[$f$addr >> 2] | 0, $stat, HEAP32[$clearCode >> 2] | 0, HEAP32[$codeSize >> 2] | 0);
 HEAP32[$yy >> 2] = 0;
 while (1) {
  if ((HEAP32[$yy >> 2] | 0) >>> 0 >= (HEAP32[$height$addr >> 2] | 0) >>> 0) break;
  HEAP32[$xx >> 2] = 0;
  while (1) {
   if ((HEAP32[$xx >> 2] | 0) >>> 0 >= (HEAP32[$width$addr >> 2] | 0) >>> 0) break;
   $mul = Math_imul(HEAP32[$yy >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0;
   HEAP8[$nextValue >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + (($mul + (HEAP32[$xx >> 2] | 0) << 2) + 3) >> 0] | 0;
   do if ((HEAP32[$curCode >> 2] | 0) < 0) HEAP32[$curCode >> 2] = HEAPU8[$nextValue >> 0]; else {
    if (HEAP16[(HEAP32[$codetree >> 2] | 0) + (HEAP32[$curCode >> 2] << 9) + (HEAPU8[$nextValue >> 0] << 1) >> 1] | 0) {
     HEAP32[$curCode >> 2] = HEAPU16[(HEAP32[$codetree >> 2] | 0) + (HEAP32[$curCode >> 2] << 9) + (HEAPU8[$nextValue >> 0] << 1) >> 1];
     break;
    }
    _GifWriteCode(HEAP32[$f$addr >> 2] | 0, $stat, HEAP32[$curCode >> 2] | 0, HEAP32[$codeSize >> 2] | 0);
    $inc = (HEAP32[$maxCode >> 2] | 0) + 1 | 0;
    HEAP32[$maxCode >> 2] = $inc;
    HEAP16[(HEAP32[$codetree >> 2] | 0) + (HEAP32[$curCode >> 2] << 9) + (HEAPU8[$nextValue >> 0] << 1) >> 1] = $inc;
    if ((HEAP32[$maxCode >> 2] | 0) >>> 0 >= 1 << HEAP32[$codeSize >> 2] >>> 0) HEAP32[$codeSize >> 2] = (HEAP32[$codeSize >> 2] | 0) + 1;
    if ((HEAP32[$maxCode >> 2] | 0) == 4095) {
     _GifWriteCode(HEAP32[$f$addr >> 2] | 0, $stat, HEAP32[$clearCode >> 2] | 0, HEAP32[$codeSize >> 2] | 0);
     _memset(HEAP32[$codetree >> 2] | 0, 0, 2097152) | 0;
     HEAP32[$codeSize >> 2] = (HEAP32[$minCodeSize >> 2] | 0) + 1;
     HEAP32[$maxCode >> 2] = (HEAP32[$clearCode >> 2] | 0) + 1;
    }
    HEAP32[$curCode >> 2] = HEAPU8[$nextValue >> 0];
   } while (0);
   HEAP32[$xx >> 2] = (HEAP32[$xx >> 2] | 0) + 1;
  }
  HEAP32[$yy >> 2] = (HEAP32[$yy >> 2] | 0) + 1;
 }
 _GifWriteCode(HEAP32[$f$addr >> 2] | 0, $stat, HEAP32[$curCode >> 2] | 0, HEAP32[$codeSize >> 2] | 0);
 _GifWriteCode(HEAP32[$f$addr >> 2] | 0, $stat, HEAP32[$clearCode >> 2] | 0, HEAP32[$codeSize >> 2] | 0);
 _GifWriteCode(HEAP32[$f$addr >> 2] | 0, $stat, (HEAP32[$clearCode >> 2] | 0) + 1 | 0, (HEAP32[$minCodeSize >> 2] | 0) + 1 | 0);
 while (1) {
  if (!(HEAP8[$stat >> 0] | 0)) break;
  _GifWriteBit($stat, 0);
 }
 if (!(HEAP32[$stat + 4 >> 2] | 0)) {
  $95 = HEAP32[$f$addr >> 2] | 0;
  _fputc(0, $95) | 0;
  $96 = HEAP32[$codetree >> 2] | 0;
  _free($96);
  STACKTOP = sp;
  return;
 }
 _GifWriteChunk(HEAP32[$f$addr >> 2] | 0, $stat);
 $95 = HEAP32[$f$addr >> 2] | 0;
 _fputc(0, $95) | 0;
 $96 = HEAP32[$codetree >> 2] | 0;
 _free($96);
 STACKTOP = sp;
 return;
}

function _MatrixRotate($agg$result, $axis, $angle) {
 $agg$result = $agg$result | 0;
 $axis = $axis | 0;
 $angle = Math_fround($angle);
 var $13 = f0, $15 = f0, $17 = f0, $24 = f0, $28 = f0, $3 = f0, $31 = f0, $33 = f0, $36 = f0, $38 = f0, $41 = f0, $43 = f0, $47 = f0, $5 = f0, $50 = f0, $52 = f0, $55 = f0, $57 = f0, $60 = f0, $62 = f0, $7 = f0, $add = f0, $angle$addr = 0, $cmp = 0, $cosres = 0, $length = 0, $mul = f0, $mul11 = f0, $mul12 = f0, $mul14 = f0, $mul15 = f0, $mul18 = f0, $mul19 = f0, $mul22 = f0, $mul23 = f0, $mul26 = f0, $mul27 = f0, $mul29 = f0, $mul30 = f0, $mul33 = f0, $mul34 = f0, $mul37 = f0, $mul38 = f0, $mul41 = f0, $mul42 = f0, $result = 0, $sinres = 0, $t = 0, $x = 0, $y = 0, $z = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $angle$addr = sp + 96 | 0;
 $result = sp + 32 | 0;
 $x = sp + 24 | 0;
 $y = sp + 20 | 0;
 $z = sp + 16 | 0;
 $length = sp + 12 | 0;
 $sinres = sp + 8 | 0;
 $cosres = sp + 4 | 0;
 $t = sp;
 HEAPF32[$angle$addr >> 2] = $angle;
 dest = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$x >> 2] = Math_fround(HEAPF32[$axis >> 2]);
 HEAPF32[$y >> 2] = Math_fround(HEAPF32[$axis + 4 >> 2]);
 HEAPF32[$z >> 2] = Math_fround(HEAPF32[$axis + 8 >> 2]);
 $3 = Math_fround(HEAPF32[$x >> 2]);
 $mul = Math_fround($3 * Math_fround(HEAPF32[$x >> 2]));
 $5 = Math_fround(HEAPF32[$y >> 2]);
 $add = Math_fround($mul + Math_fround($5 * Math_fround(HEAPF32[$y >> 2])));
 $7 = Math_fround(HEAPF32[$z >> 2]);
 HEAPF32[$length >> 2] = Math_fround(Math_sqrt(Math_fround($add + Math_fround($7 * Math_fround(HEAPF32[$z >> 2])))));
 $cmp = Math_fround(HEAPF32[$length >> 2]) != Math_fround(1.0);
 if ($cmp & Math_fround(HEAPF32[$length >> 2]) != Math_fround(0.0)) {
  HEAPF32[$length >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$length >> 2]));
  $13 = Math_fround(HEAPF32[$length >> 2]);
  HEAPF32[$x >> 2] = Math_fround(Math_fround(HEAPF32[$x >> 2]) * $13);
  $15 = Math_fround(HEAPF32[$length >> 2]);
  HEAPF32[$y >> 2] = Math_fround(Math_fround(HEAPF32[$y >> 2]) * $15);
  $17 = Math_fround(HEAPF32[$length >> 2]);
  HEAPF32[$z >> 2] = Math_fround(Math_fround(HEAPF32[$z >> 2]) * $17);
 }
 HEAPF32[$sinres >> 2] = Math_fround(+_llvm_sin_f32(+Math_fround(HEAPF32[$angle$addr >> 2])));
 HEAPF32[$cosres >> 2] = Math_fround(+_llvm_cos_f32(+Math_fround(HEAPF32[$angle$addr >> 2])));
 HEAPF32[$t >> 2] = Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[$cosres >> 2]));
 $24 = Math_fround(HEAPF32[$x >> 2]);
 $mul11 = Math_fround($24 * Math_fround(HEAPF32[$x >> 2]));
 $mul12 = Math_fround($mul11 * Math_fround(HEAPF32[$t >> 2]));
 HEAPF32[$result >> 2] = Math_fround($mul12 + Math_fround(HEAPF32[$cosres >> 2]));
 $28 = Math_fround(HEAPF32[$y >> 2]);
 $mul14 = Math_fround($28 * Math_fround(HEAPF32[$x >> 2]));
 $mul15 = Math_fround($mul14 * Math_fround(HEAPF32[$t >> 2]));
 $31 = Math_fround(HEAPF32[$z >> 2]);
 HEAPF32[$result + 16 >> 2] = Math_fround($mul15 + Math_fround($31 * Math_fround(HEAPF32[$sinres >> 2])));
 $33 = Math_fround(HEAPF32[$z >> 2]);
 $mul18 = Math_fround($33 * Math_fround(HEAPF32[$x >> 2]));
 $mul19 = Math_fround($mul18 * Math_fround(HEAPF32[$t >> 2]));
 $36 = Math_fround(HEAPF32[$y >> 2]);
 HEAPF32[$result + 32 >> 2] = Math_fround($mul19 - Math_fround($36 * Math_fround(HEAPF32[$sinres >> 2])));
 HEAPF32[$result + 48 >> 2] = Math_fround(0.0);
 $38 = Math_fround(HEAPF32[$x >> 2]);
 $mul22 = Math_fround($38 * Math_fround(HEAPF32[$y >> 2]));
 $mul23 = Math_fround($mul22 * Math_fround(HEAPF32[$t >> 2]));
 $41 = Math_fround(HEAPF32[$z >> 2]);
 HEAPF32[$result + 4 >> 2] = Math_fround($mul23 - Math_fround($41 * Math_fround(HEAPF32[$sinres >> 2])));
 $43 = Math_fround(HEAPF32[$y >> 2]);
 $mul26 = Math_fround($43 * Math_fround(HEAPF32[$y >> 2]));
 $mul27 = Math_fround($mul26 * Math_fround(HEAPF32[$t >> 2]));
 HEAPF32[$result + 20 >> 2] = Math_fround($mul27 + Math_fround(HEAPF32[$cosres >> 2]));
 $47 = Math_fround(HEAPF32[$z >> 2]);
 $mul29 = Math_fround($47 * Math_fround(HEAPF32[$y >> 2]));
 $mul30 = Math_fround($mul29 * Math_fround(HEAPF32[$t >> 2]));
 $50 = Math_fround(HEAPF32[$x >> 2]);
 HEAPF32[$result + 36 >> 2] = Math_fround($mul30 + Math_fround($50 * Math_fround(HEAPF32[$sinres >> 2])));
 HEAPF32[$result + 52 >> 2] = Math_fround(0.0);
 $52 = Math_fround(HEAPF32[$x >> 2]);
 $mul33 = Math_fround($52 * Math_fround(HEAPF32[$z >> 2]));
 $mul34 = Math_fround($mul33 * Math_fround(HEAPF32[$t >> 2]));
 $55 = Math_fround(HEAPF32[$y >> 2]);
 HEAPF32[$result + 8 >> 2] = Math_fround($mul34 + Math_fround($55 * Math_fround(HEAPF32[$sinres >> 2])));
 $57 = Math_fround(HEAPF32[$y >> 2]);
 $mul37 = Math_fround($57 * Math_fround(HEAPF32[$z >> 2]));
 $mul38 = Math_fround($mul37 * Math_fround(HEAPF32[$t >> 2]));
 $60 = Math_fround(HEAPF32[$x >> 2]);
 HEAPF32[$result + 24 >> 2] = Math_fround($mul38 - Math_fround($60 * Math_fround(HEAPF32[$sinres >> 2])));
 $62 = Math_fround(HEAPF32[$z >> 2]);
 $mul41 = Math_fround($62 * Math_fround(HEAPF32[$z >> 2]));
 $mul42 = Math_fround($mul41 * Math_fround(HEAPF32[$t >> 2]));
 HEAPF32[$result + 40 >> 2] = Math_fround($mul42 + Math_fround(HEAPF32[$cosres >> 2]));
 HEAPF32[$result + 56 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 12 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 28 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 44 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 60 >> 2] = Math_fround(1.0);
 dest = $agg$result;
 src = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _stbir__calculate_coefficients_upsample($filter, $scale, $in_first_pixel, $in_last_pixel, $in_center_of_out, $contributor, $coefficient_group) {
 $filter = $filter | 0;
 $scale = Math_fround($scale);
 $in_first_pixel = $in_first_pixel | 0;
 $in_last_pixel = $in_last_pixel | 0;
 $in_center_of_out = Math_fround($in_center_of_out);
 $contributor = $contributor | 0;
 $coefficient_group = $coefficient_group | 0;
 var $21 = f0, $35 = f0, $49 = f0, $add31 = f0, $arrayidx57 = 0, $call18 = f0, $coefficient_group$addr = 0, $contributor$addr = 0, $div = f0, $div17 = f0, $div33 = f0, $filter$addr = 0, $filter_scale = 0, $i = 0, $in_center_of_out$addr = 0, $in_first_pixel$addr = 0, $in_last_pixel$addr = 0, $in_pixel_center = 0, $inc = 0, $scale$addr = 0, $sub = 0, $sub16 = f0, $sub32 = f0, $total_filter = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $filter$addr = sp + 40 | 0;
 $scale$addr = sp + 36 | 0;
 $in_first_pixel$addr = sp + 32 | 0;
 $in_last_pixel$addr = sp + 28 | 0;
 $in_center_of_out$addr = sp + 24 | 0;
 $contributor$addr = sp + 20 | 0;
 $coefficient_group$addr = sp + 16 | 0;
 $i = sp + 12 | 0;
 $total_filter = sp + 8 | 0;
 $filter_scale = sp + 4 | 0;
 $in_pixel_center = sp;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale$addr >> 2] = $scale;
 HEAP32[$in_first_pixel$addr >> 2] = $in_first_pixel;
 HEAP32[$in_last_pixel$addr >> 2] = $in_last_pixel;
 HEAPF32[$in_center_of_out$addr >> 2] = $in_center_of_out;
 HEAP32[$contributor$addr >> 2] = $contributor;
 HEAP32[$coefficient_group$addr >> 2] = $coefficient_group;
 HEAPF32[$total_filter >> 2] = Math_fround(0.0);
 $sub = (HEAP32[$in_last_pixel$addr >> 2] | 0) - (HEAP32[$in_first_pixel$addr >> 2] | 0) | 0;
 $div = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$scale$addr >> 2]));
 if (($sub | 0) > (~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[HEAP32[5280 + (HEAP32[$filter$addr >> 2] << 3) + 4 >> 2] & 7]($div)) * Math_fround(2.0)))) | 0)) ___assert_fail(14451, 12378, 1043, 14550);
 HEAP32[HEAP32[$contributor$addr >> 2] >> 2] = HEAP32[$in_first_pixel$addr >> 2];
 HEAP32[(HEAP32[$contributor$addr >> 2] | 0) + 4 >> 2] = HEAP32[$in_last_pixel$addr >> 2];
 if ((HEAP32[(HEAP32[$contributor$addr >> 2] | 0) + 4 >> 2] | 0) < (HEAP32[HEAP32[$contributor$addr >> 2] >> 2] | 0)) ___assert_fail(14303, 12378, 1048, 14550);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > ((HEAP32[$in_last_pixel$addr >> 2] | 0) - (HEAP32[$in_first_pixel$addr >> 2] | 0) | 0)) break;
  HEAPF32[$in_pixel_center >> 2] = Math_fround(Math_fround((HEAP32[$i >> 2] | 0) + (HEAP32[$in_first_pixel$addr >> 2] | 0) | 0) + Math_fround(.5));
  $21 = Math_fround(HEAPF32[$in_center_of_out$addr >> 2]);
  $sub16 = Math_fround($21 - Math_fround(HEAPF32[$in_pixel_center >> 2]));
  $div17 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$scale$addr >> 2]));
  $call18 = Math_fround(FUNCTION_TABLE_fff[HEAP32[5280 + (HEAP32[$filter$addr >> 2] << 3) >> 2] & 7]($sub16, $div17));
  HEAPF32[(HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = $call18;
  if (!(HEAP32[$i >> 2] | 0)) if (Math_fround(HEAPF32[(HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2]) != Math_fround(0.0)) label = 10; else {
   $inc = (HEAP32[$in_first_pixel$addr >> 2] | 0) + 1 | 0;
   HEAP32[$in_first_pixel$addr >> 2] = $inc;
   HEAP32[HEAP32[$contributor$addr >> 2] >> 2] = $inc;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
  } else label = 10;
  if ((label | 0) == 10) {
   label = 0;
   $35 = Math_fround(HEAPF32[(HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2]);
   HEAPF32[$total_filter >> 2] = Math_fround(Math_fround(HEAPF32[$total_filter >> 2]) + $35);
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $add31 = Math_fround(Math_fround((HEAP32[$in_last_pixel$addr >> 2] | 0) + 1 | 0) + Math_fround(.5));
 $sub32 = Math_fround($add31 - Math_fround(HEAPF32[$in_center_of_out$addr >> 2]));
 $div33 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$scale$addr >> 2]));
 if (!(Math_fround(FUNCTION_TABLE_fff[HEAP32[5280 + (HEAP32[$filter$addr >> 2] << 3) >> 2] & 7]($sub32, $div33)) == Math_fround(0.0))) ___assert_fail(14589, 12378, 1066, 14550);
 if (!(+Math_fround(HEAPF32[$total_filter >> 2]) > .9)) ___assert_fail(14697, 12378, 1068, 14550);
 if (!(Math_fround(HEAPF32[$total_filter >> 2]) < Math_fround(1.10000002))) ___assert_fail(14716, 12378, 1069, 14550);
 HEAPF32[$filter_scale >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$total_filter >> 2]));
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > ((HEAP32[$in_last_pixel$addr >> 2] | 0) - (HEAP32[$in_first_pixel$addr >> 2] | 0) | 0)) break;
  $49 = Math_fround(HEAPF32[$filter_scale >> 2]);
  $arrayidx57 = (HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) | 0;
  HEAPF32[$arrayidx57 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx57 >> 2]) * $49);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i >> 2] = (HEAP32[$in_last_pixel$addr >> 2] | 0) - (HEAP32[$in_first_pixel$addr >> 2] | 0);
 while (1) {
  if ((HEAP32[$i >> 2] | 0) < 0) {
   label = 25;
   break;
  }
  if (Math_fround(HEAPF32[(HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2]) != Math_fround(0.0)) {
   label = 25;
   break;
  }
  HEAP32[(HEAP32[$contributor$addr >> 2] | 0) + 4 >> 2] = (HEAP32[HEAP32[$contributor$addr >> 2] >> 2] | 0) + (HEAP32[$i >> 2] | 0) - 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 if ((label | 0) == 25) {
  STACKTOP = sp;
  return;
 }
}

function _GetNextCodepoint($text, $bytesProcessed) {
 $text = $text | 0;
 $bytesProcessed = $bytesProcessed | 0;
 var $81 = 0, $bytesProcessed$addr = 0, $code = 0, $octet = 0, $octet1 = 0, $octet129 = 0, $octet197 = 0, $octet2 = 0, $octet299 = 0, $octet3 = 0, $retval = 0, $text$addr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 16 | 0;
 $text$addr = sp + 12 | 0;
 $bytesProcessed$addr = sp + 8 | 0;
 $code = sp + 4 | 0;
 $octet = sp;
 $octet1 = sp + 25 | 0;
 $octet129 = sp + 24 | 0;
 $octet2 = sp + 23 | 0;
 $octet197 = sp + 22 | 0;
 $octet299 = sp + 21 | 0;
 $octet3 = sp + 20 | 0;
 HEAP32[$text$addr >> 2] = $text;
 HEAP32[$bytesProcessed$addr >> 2] = $bytesProcessed;
 HEAP32[$code >> 2] = 63;
 HEAP32[$octet >> 2] = HEAPU8[HEAP32[$text$addr >> 2] >> 0];
 HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 1;
 L1 : do if ((HEAP32[$octet >> 2] | 0) <= 127) HEAP32[$code >> 2] = HEAP8[HEAP32[$text$addr >> 2] >> 0]; else {
  if ((HEAP32[$octet >> 2] & 224 | 0) == 192) {
   HEAP8[$octet1 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + 1 >> 0] | 0;
   if (HEAPU8[$octet1 >> 0] | 0) if ((HEAPU8[$octet1 >> 0] >> 6 | 0) == 2) {
    if (!((HEAP32[$octet >> 2] | 0) >= 194 & (HEAP32[$octet >> 2] | 0) <= 223)) break;
    HEAP32[$code >> 2] = (HEAP32[$octet >> 2] & 31) << 6 | HEAPU8[$octet1 >> 0] & 63;
    HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 2;
    break;
   }
   HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 2;
   HEAP32[$retval >> 2] = HEAP32[$code >> 2];
   $81 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $81 | 0;
  }
  if ((HEAP32[$octet >> 2] & 240 | 0) == 224) {
   HEAP8[$octet129 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + 1 >> 0] | 0;
   HEAP8[$octet2 >> 0] = 0;
   if (HEAPU8[$octet129 >> 0] | 0) if ((HEAPU8[$octet129 >> 0] >> 6 | 0) == 2) {
    HEAP8[$octet2 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + 2 >> 0] | 0;
    if (HEAPU8[$octet2 >> 0] | 0) if ((HEAPU8[$octet2 >> 0] >> 6 | 0) == 2) {
     if ((HEAP32[$octet >> 2] | 0) == 224) {
      if ((HEAPU8[$octet129 >> 0] | 0) >= 160) if ((HEAPU8[$octet129 >> 0] | 0) <= 191) label = 19;
     } else label = 19;
     do if ((label | 0) == 19) {
      if ((HEAP32[$octet >> 2] | 0) == 237) {
       if ((HEAPU8[$octet129 >> 0] | 0) < 128) break;
       if ((HEAPU8[$octet129 >> 0] | 0) > 159) break;
      }
      if ((HEAP32[$octet >> 2] | 0) < 224) break L1;
      HEAP32[$code >> 2] = (HEAP32[$octet >> 2] & 15) << 12 | (HEAPU8[$octet129 >> 0] & 63) << 6 | HEAPU8[$octet2 >> 0] & 63;
      HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 3;
      break L1;
     } while (0);
     HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 2;
     HEAP32[$retval >> 2] = HEAP32[$code >> 2];
     $81 = HEAP32[$retval >> 2] | 0;
     STACKTOP = sp;
     return $81 | 0;
    }
    HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 3;
    HEAP32[$retval >> 2] = HEAP32[$code >> 2];
    $81 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $81 | 0;
   }
   HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 2;
   HEAP32[$retval >> 2] = HEAP32[$code >> 2];
   $81 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $81 | 0;
  }
  if ((HEAP32[$octet >> 2] & 248 | 0) == 240) {
   if ((HEAP32[$octet >> 2] | 0) > 244) {
    HEAP32[$retval >> 2] = HEAP32[$code >> 2];
    $81 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $81 | 0;
   }
   HEAP8[$octet197 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + 1 >> 0] | 0;
   HEAP8[$octet299 >> 0] = 0;
   HEAP8[$octet3 >> 0] = 0;
   if (HEAPU8[$octet197 >> 0] | 0) if ((HEAPU8[$octet197 >> 0] >> 6 | 0) == 2) {
    HEAP8[$octet299 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + 2 >> 0] | 0;
    if (HEAPU8[$octet299 >> 0] | 0) if ((HEAPU8[$octet299 >> 0] >> 6 | 0) == 2) {
     HEAP8[$octet3 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + 3 >> 0] | 0;
     if (HEAPU8[$octet3 >> 0] | 0) if ((HEAPU8[$octet3 >> 0] >> 6 | 0) == 2) {
      if ((HEAP32[$octet >> 2] | 0) == 240) {
       if ((HEAPU8[$octet197 >> 0] | 0) >= 144) if ((HEAPU8[$octet197 >> 0] | 0) <= 191) label = 40;
      } else label = 40;
      do if ((label | 0) == 40) {
       if ((HEAP32[$octet >> 2] | 0) == 244) {
        if ((HEAPU8[$octet197 >> 0] | 0) < 128) break;
        if ((HEAPU8[$octet197 >> 0] | 0) > 143) break;
       }
       if ((HEAP32[$octet >> 2] | 0) < 240) break L1;
       HEAP32[$code >> 2] = (HEAP32[$octet >> 2] & 7) << 18 | (HEAPU8[$octet197 >> 0] & 63) << 12 | (HEAPU8[$octet299 >> 0] & 63) << 6 | HEAPU8[$octet3 >> 0] & 63;
       HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 4;
       break L1;
      } while (0);
      HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 2;
      HEAP32[$retval >> 2] = HEAP32[$code >> 2];
      $81 = HEAP32[$retval >> 2] | 0;
      STACKTOP = sp;
      return $81 | 0;
     }
     HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 4;
     HEAP32[$retval >> 2] = HEAP32[$code >> 2];
     $81 = HEAP32[$retval >> 2] | 0;
     STACKTOP = sp;
     return $81 | 0;
    }
    HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 3;
    HEAP32[$retval >> 2] = HEAP32[$code >> 2];
    $81 = HEAP32[$retval >> 2] | 0;
    STACKTOP = sp;
    return $81 | 0;
   }
   HEAP32[HEAP32[$bytesProcessed$addr >> 2] >> 2] = 2;
   HEAP32[$retval >> 2] = HEAP32[$code >> 2];
   $81 = HEAP32[$retval >> 2] | 0;
   STACKTOP = sp;
   return $81 | 0;
  }
 } while (0);
 if ((HEAP32[$code >> 2] | 0) > 1114111) HEAP32[$code >> 2] = 63;
 HEAP32[$retval >> 2] = HEAP32[$code >> 2];
 $81 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $81 | 0;
}

function _ImageCrop($image, $crop) {
 $image = $image | 0;
 $crop = $crop | 0;
 var $$byval_copy1 = 0, $10 = f0, $12 = f0, $19 = f0, $26 = f0, $29 = f0, $32 = 0, $37 = f0, $41 = f0, $59 = 0, $60 = 0, $7 = f0, $add19 = f0, $add31 = f0, $arrayidx = 0, $arrayidx91 = 0, $conv25 = f0, $conv38 = f0, $conv55 = 0, $conv97 = 0, $cropPixels = 0, $format = 0, $height13 = 0, $i = 0, $image$addr = 0, $j = 0, $mul83 = 0, $mul89 = 0, $pixels = 0, $sub80 = 0, $tmp = 0, $vararg_buffer = 0, $width7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $$byval_copy1 = sp + 48 | 0;
 $vararg_buffer = sp;
 $image$addr = sp + 44 | 0;
 $pixels = sp + 40 | 0;
 $cropPixels = sp + 36 | 0;
 $j = sp + 32 | 0;
 $i = sp + 28 | 0;
 $format = sp + 24 | 0;
 $tmp = sp + 4 | 0;
 HEAP32[$image$addr >> 2] = $image;
 if (!(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (Math_fround(HEAPF32[$crop >> 2]) < Math_fround(0.0)) {
  $7 = Math_fround(HEAPF32[$crop >> 2]);
  $width7 = $crop + 8 | 0;
  HEAPF32[$width7 >> 2] = Math_fround(Math_fround(HEAPF32[$width7 >> 2]) + $7);
  HEAPF32[$crop >> 2] = Math_fround(0.0);
 }
 if (Math_fround(HEAPF32[$crop + 4 >> 2]) < Math_fround(0.0)) {
  $10 = Math_fround(HEAPF32[$crop + 4 >> 2]);
  $height13 = $crop + 12 | 0;
  HEAPF32[$height13 >> 2] = Math_fround(Math_fround(HEAPF32[$height13 >> 2]) + $10);
  HEAPF32[$crop + 4 >> 2] = Math_fround(0.0);
 }
 $12 = Math_fround(HEAPF32[$crop >> 2]);
 $add19 = Math_fround($12 + Math_fround(HEAPF32[$crop + 8 >> 2]));
 if ($add19 > Math_fround(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0)) {
  $conv25 = Math_fround(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0);
  HEAPF32[$crop + 8 >> 2] = Math_fround($conv25 - Math_fround(HEAPF32[$crop >> 2]));
 }
 $19 = Math_fround(HEAPF32[$crop + 4 >> 2]);
 $add31 = Math_fround($19 + Math_fround(HEAPF32[$crop + 12 >> 2]));
 if ($add31 > Math_fround(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0)) {
  $conv38 = Math_fround(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0);
  HEAPF32[$crop + 12 >> 2] = Math_fround($conv38 - Math_fround(HEAPF32[$crop + 4 >> 2]));
 }
 $26 = Math_fround(HEAPF32[$crop >> 2]);
 if ($26 < Math_fround(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0)) {
  $29 = Math_fround(HEAPF32[$crop + 4 >> 2]);
  if ($29 < Math_fround(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0)) {
   $32 = HEAP32[$image$addr >> 2] | 0;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
   HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$32 + 8 >> 2];
   HEAP32[$$byval_copy1 + 12 >> 2] = HEAP32[$32 + 12 >> 2];
   HEAP32[$$byval_copy1 + 16 >> 2] = HEAP32[$32 + 16 >> 2];
   HEAP32[$pixels >> 2] = _GetImageData($$byval_copy1) | 0;
   $conv55 = ~~Math_fround(HEAPF32[$crop + 8 >> 2]);
   HEAP32[$cropPixels >> 2] = _malloc((Math_imul($conv55, ~~Math_fround(HEAPF32[$crop + 12 >> 2])) | 0) << 2) | 0;
   HEAP32[$j >> 2] = ~~Math_fround(HEAPF32[$crop + 4 >> 2]);
   while (1) {
    $37 = Math_fround(HEAPF32[$crop + 4 >> 2]);
    if ((HEAP32[$j >> 2] | 0) >= (~~Math_fround($37 + Math_fround(HEAPF32[$crop + 12 >> 2])) | 0)) break;
    HEAP32[$i >> 2] = ~~Math_fround(HEAPF32[$crop >> 2]);
    while (1) {
     $41 = Math_fround(HEAPF32[$crop >> 2]);
     if ((HEAP32[$i >> 2] | 0) >= (~~Math_fround($41 + Math_fround(HEAPF32[$crop + 8 >> 2])) | 0)) break;
     $sub80 = (HEAP32[$j >> 2] | 0) - ~~Math_fround(HEAPF32[$crop + 4 >> 2]) | 0;
     $mul83 = Math_imul($sub80, ~~Math_fround(HEAPF32[$crop + 8 >> 2])) | 0;
     $arrayidx = (HEAP32[$cropPixels >> 2] | 0) + ($mul83 + ((HEAP32[$i >> 2] | 0) - ~~Math_fround(HEAPF32[$crop >> 2])) << 2) | 0;
     $mul89 = Math_imul(HEAP32[$j >> 2] | 0, HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0) | 0;
     $arrayidx91 = (HEAP32[$pixels >> 2] | 0) + ($mul89 + (HEAP32[$i >> 2] | 0) << 2) | 0;
     HEAP8[$arrayidx >> 0] = HEAP8[$arrayidx91 >> 0] | 0;
     HEAP8[$arrayidx + 1 >> 0] = HEAP8[$arrayidx91 + 1 >> 0] | 0;
     HEAP8[$arrayidx + 2 >> 0] = HEAP8[$arrayidx91 + 2 >> 0] | 0;
     HEAP8[$arrayidx + 3 >> 0] = HEAP8[$arrayidx91 + 3 >> 0] | 0;
     HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
    }
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
   _free(HEAP32[$pixels >> 2] | 0);
   HEAP32[$format >> 2] = HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2];
   $59 = HEAP32[$image$addr >> 2] | 0;
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$59 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$59 + 4 >> 2];
   HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$59 + 8 >> 2];
   HEAP32[$$byval_copy1 + 12 >> 2] = HEAP32[$59 + 12 >> 2];
   HEAP32[$$byval_copy1 + 16 >> 2] = HEAP32[$59 + 16 >> 2];
   _UnloadImage($$byval_copy1);
   $60 = HEAP32[$image$addr >> 2] | 0;
   $conv97 = ~~Math_fround(HEAPF32[$crop + 8 >> 2]);
   _LoadImageEx($tmp, HEAP32[$cropPixels >> 2] | 0, $conv97, ~~Math_fround(HEAPF32[$crop + 12 >> 2]));
   HEAP32[$60 >> 2] = HEAP32[$tmp >> 2];
   HEAP32[$60 + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
   HEAP32[$60 + 8 >> 2] = HEAP32[$tmp + 8 >> 2];
   HEAP32[$60 + 12 >> 2] = HEAP32[$tmp + 12 >> 2];
   HEAP32[$60 + 16 >> 2] = HEAP32[$tmp + 16 >> 2];
   _free(HEAP32[$cropPixels >> 2] | 0);
   _ImageFormat(HEAP32[$image$addr >> 2] | 0, HEAP32[$format >> 2] | 0);
   STACKTOP = sp;
   return;
  }
 }
 _TraceLog(4, 15266, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function _stbir__calculate_filters($contributors, $coefficients, $filter, $scale_ratio, $shift, $input_size, $output_size) {
 $contributors = $contributors | 0;
 $coefficients = $coefficients | 0;
 $filter = $filter | 0;
 $scale_ratio = Math_fround($scale_ratio);
 $shift = Math_fround($shift);
 $input_size = $input_size | 0;
 $output_size = $output_size | 0;
 var $0 = f0, $12 = f0, $13 = f0, $15 = 0, $16 = f0, $17 = 0, $18 = 0, $19 = f0, $24 = f0, $30 = 0, $34 = f0, $35 = f0, $37 = 0, $38 = f0, $39 = 0, $40 = 0, $41 = f0, $46 = f0, $52 = f0, $6 = 0, $7 = f0, $call13 = 0, $call2 = f0, $call3 = 0, $call7 = f0, $coefficients$addr = 0, $contributors$addr = 0, $div = f0, $filter$addr = 0, $in_center_of_out = 0, $in_first_pixel = 0, $in_last_pixel = 0, $in_pixels_radius = 0, $input_size$addr = 0, $n = 0, $n_adjusted = 0, $out_center_of_in = 0, $out_first_pixel = 0, $out_last_pixel = 0, $out_pixels_radius = 0, $output_size$addr = 0, $scale_ratio$addr = 0, $shift$addr = 0, $tobool = 0, $total_contributors = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $contributors$addr = sp + 68 | 0;
 $coefficients$addr = sp + 64 | 0;
 $filter$addr = sp + 60 | 0;
 $scale_ratio$addr = sp + 56 | 0;
 $shift$addr = sp + 52 | 0;
 $input_size$addr = sp + 48 | 0;
 $output_size$addr = sp + 44 | 0;
 $n = sp + 40 | 0;
 $total_contributors = sp + 36 | 0;
 $out_pixels_radius = sp + 32 | 0;
 $in_center_of_out = sp + 28 | 0;
 $in_first_pixel = sp + 24 | 0;
 $in_last_pixel = sp + 20 | 0;
 $in_pixels_radius = sp + 16 | 0;
 $out_center_of_in = sp + 12 | 0;
 $out_first_pixel = sp + 8 | 0;
 $out_last_pixel = sp + 4 | 0;
 $n_adjusted = sp;
 HEAP32[$contributors$addr >> 2] = $contributors;
 HEAP32[$coefficients$addr >> 2] = $coefficients;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale_ratio$addr >> 2] = $scale_ratio;
 HEAPF32[$shift$addr >> 2] = $shift;
 HEAP32[$input_size$addr >> 2] = $input_size;
 HEAP32[$output_size$addr >> 2] = $output_size;
 $0 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
 HEAP32[$total_contributors >> 2] = _stbir__get_contributors($0, HEAP32[$filter$addr >> 2] | 0, HEAP32[$input_size$addr >> 2] | 0, HEAP32[$output_size$addr >> 2] | 0) | 0;
 $tobool = (_stbir__use_upsampling(Math_fround(HEAPF32[$scale_ratio$addr >> 2])) | 0) != 0;
 $6 = HEAP32[5280 + (HEAP32[$filter$addr >> 2] << 3) + 4 >> 2] | 0;
 $7 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
 if ($tobool) {
  $div = Math_fround(Math_fround(1.0) / $7);
  $call2 = Math_fround(FUNCTION_TABLE_ff[$6 & 7]($div));
  HEAPF32[$out_pixels_radius >> 2] = Math_fround($call2 * Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
  HEAP32[$n >> 2] = 0;
  while (1) {
   if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$total_contributors >> 2] | 0)) break;
   $12 = Math_fround(HEAPF32[$out_pixels_radius >> 2]);
   $13 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
   _stbir__calculate_sample_range_upsample(HEAP32[$n >> 2] | 0, $12, $13, Math_fround(HEAPF32[$shift$addr >> 2]), $in_first_pixel, $in_last_pixel, $in_center_of_out);
   $15 = HEAP32[$filter$addr >> 2] | 0;
   $16 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
   $17 = HEAP32[$in_first_pixel >> 2] | 0;
   $18 = HEAP32[$in_last_pixel >> 2] | 0;
   $19 = Math_fround(HEAPF32[$in_center_of_out >> 2]);
   $call3 = _stbir__get_contributor(HEAP32[$contributors$addr >> 2] | 0, HEAP32[$n >> 2] | 0) | 0;
   $24 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
   _stbir__calculate_coefficients_upsample($15, $16, $17, $18, $19, $call3, _stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $24, HEAP32[$n >> 2] | 0, 0) | 0);
   HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
  }
  STACKTOP = sp;
  return;
 }
 $call7 = Math_fround(FUNCTION_TABLE_ff[$6 & 7]($7));
 HEAPF32[$in_pixels_radius >> 2] = Math_fround($call7 / Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 HEAP32[$n >> 2] = 0;
 while (1) {
  if ((HEAP32[$n >> 2] | 0) >= (HEAP32[$total_contributors >> 2] | 0)) break;
  $30 = HEAP32[$n >> 2] | 0;
  HEAP32[$n_adjusted >> 2] = $30 - (_stbir__get_filter_pixel_margin(HEAP32[$filter$addr >> 2] | 0, Math_fround(HEAPF32[$scale_ratio$addr >> 2])) | 0);
  $34 = Math_fround(HEAPF32[$in_pixels_radius >> 2]);
  $35 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
  _stbir__calculate_sample_range_downsample(HEAP32[$n_adjusted >> 2] | 0, $34, $35, Math_fround(HEAPF32[$shift$addr >> 2]), $out_first_pixel, $out_last_pixel, $out_center_of_in);
  $37 = HEAP32[$filter$addr >> 2] | 0;
  $38 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
  $39 = HEAP32[$out_first_pixel >> 2] | 0;
  $40 = HEAP32[$out_last_pixel >> 2] | 0;
  $41 = Math_fround(HEAPF32[$out_center_of_in >> 2]);
  $call13 = _stbir__get_contributor(HEAP32[$contributors$addr >> 2] | 0, HEAP32[$n >> 2] | 0) | 0;
  $46 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
  _stbir__calculate_coefficients_downsample($37, $38, $39, $40, $41, $call13, _stbir__get_coefficient(HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $46, HEAP32[$n >> 2] | 0, 0) | 0);
  HEAP32[$n >> 2] = (HEAP32[$n >> 2] | 0) + 1;
 }
 $52 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
 _stbir__normalize_downsample_coefficients(HEAP32[$contributors$addr >> 2] | 0, HEAP32[$coefficients$addr >> 2] | 0, HEAP32[$filter$addr >> 2] | 0, $52, HEAP32[$input_size$addr >> 2] | 0, HEAP32[$output_size$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _LoadBuffersDefault() {
 var $call = 0, $call1 = 0, $call3 = 0, $call5 = 0, $i = 0, $i83 = 0, $j = 0, $j13 = 0, $j23 = 0, $j33 = 0, $k = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $i = sp + 36 | 0;
 $j = sp + 32 | 0;
 $j13 = sp + 28 | 0;
 $j23 = sp + 24 | 0;
 $k = sp + 20 | 0;
 $j33 = sp + 16 | 0;
 $i83 = sp + 12 | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 1) break;
  $call = _malloc(98304) | 0;
  HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 12 >> 2] = $call;
  $call1 = _malloc(65536) | 0;
  HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 16 >> 2] = $call1;
  $call3 = _malloc(32768) | 0;
  HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 20 >> 2] = $call3;
  $call5 = _malloc(24576) | 0;
  HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] = $call5;
  HEAP32[$j >> 2] = 0;
  while (1) {
   if ((HEAP32[$j >> 2] | 0) >= 24576) break;
   HEAPF32[(HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 12 >> 2] | 0) + (HEAP32[$j >> 2] << 2) >> 2] = Math_fround(0.0);
   HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
  }
  HEAP32[$j13 >> 2] = 0;
  while (1) {
   if ((HEAP32[$j13 >> 2] | 0) >= 16384) break;
   HEAPF32[(HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 16 >> 2] | 0) + (HEAP32[$j13 >> 2] << 2) >> 2] = Math_fround(0.0);
   HEAP32[$j13 >> 2] = (HEAP32[$j13 >> 2] | 0) + 1;
  }
  HEAP32[$j23 >> 2] = 0;
  while (1) {
   if ((HEAP32[$j23 >> 2] | 0) >= 32768) break;
   HEAP8[(HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 20 >> 2] | 0) + (HEAP32[$j23 >> 2] | 0) >> 0] = 0;
   HEAP32[$j23 >> 2] = (HEAP32[$j23 >> 2] | 0) + 1;
  }
  HEAP32[$k >> 2] = 0;
  HEAP32[$j33 >> 2] = 0;
  while (1) {
   if ((HEAP32[$j33 >> 2] | 0) >= 12288) break;
   HEAP16[(HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + (HEAP32[$j33 >> 2] << 1) >> 1] = HEAP32[$k >> 2] << 2;
   HEAP16[(HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[$j33 >> 2] | 0) + 1 << 1) >> 1] = (HEAP32[$k >> 2] << 2) + 1;
   HEAP16[(HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[$j33 >> 2] | 0) + 2 << 1) >> 1] = (HEAP32[$k >> 2] << 2) + 2;
   HEAP16[(HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[$j33 >> 2] | 0) + 3 << 1) >> 1] = HEAP32[$k >> 2] << 2;
   HEAP16[(HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[$j33 >> 2] | 0) + 4 << 1) >> 1] = (HEAP32[$k >> 2] << 2) + 2;
   HEAP16[(HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 24 >> 2] | 0) + ((HEAP32[$j33 >> 2] | 0) + 5 << 1) >> 1] = (HEAP32[$k >> 2] << 2) + 3;
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
   HEAP32[$j33 >> 2] = (HEAP32[$j33 >> 2] | 0) + 6;
  }
  HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) >> 2] = 0;
  HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 4 >> 2] = 0;
  HEAP32[20928 + ((HEAP32[$i >> 2] | 0) * 48 | 0) + 8 >> 2] = 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _TraceLog(3, 9353, $vararg_buffer);
 HEAP32[$i83 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i83 >> 2] | 0) >= 1) break;
  if (HEAP8[30881] & 1) {
   FUNCTION_TABLE_vii[HEAP32[7498] & 63](1, 20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 28 | 0);
   FUNCTION_TABLE_vi[HEAP32[7419] & 31](HEAP32[20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 28 >> 2] | 0);
  }
  _glGenBuffers(1, 20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 | 0);
  _glBindBuffer(34962, HEAP32[20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 >> 2] | 0);
  _glBufferData(34962, 98304, HEAP32[20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 12 >> 2] | 0, 35048);
  _glEnableVertexAttribArray(HEAP32[HEAP32[7418] >> 2] | 0);
  _glVertexAttribPointer(HEAP32[HEAP32[7418] >> 2] | 0, 3, 5126, 0, 0, 0);
  _glGenBuffers(1, 20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 + 4 | 0);
  _glBindBuffer(34962, HEAP32[20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 + 4 >> 2] | 0);
  _glBufferData(34962, 65536, HEAP32[20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 16 >> 2] | 0, 35048);
  _glEnableVertexAttribArray(HEAP32[(HEAP32[7418] | 0) + 4 >> 2] | 0);
  _glVertexAttribPointer(HEAP32[(HEAP32[7418] | 0) + 4 >> 2] | 0, 2, 5126, 0, 0, 0);
  _glGenBuffers(1, 20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 + 8 | 0);
  _glBindBuffer(34962, HEAP32[20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 + 8 >> 2] | 0);
  _glBufferData(34962, 32768, HEAP32[20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 20 >> 2] | 0, 35048);
  _glEnableVertexAttribArray(HEAP32[(HEAP32[7418] | 0) + 20 >> 2] | 0);
  _glVertexAttribPointer(HEAP32[(HEAP32[7418] | 0) + 20 >> 2] | 0, 4, 5121, 1, 0, 0);
  _glGenBuffers(1, 20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 + 12 | 0);
  _glBindBuffer(34963, HEAP32[20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 32 + 12 >> 2] | 0);
  _glBufferData(34963, 24576, HEAP32[20928 + ((HEAP32[$i83 >> 2] | 0) * 48 | 0) + 24 >> 2] | 0, 35044);
  HEAP32[$i83 >> 2] = (HEAP32[$i83 >> 2] | 0) + 1;
 }
 _TraceLog(3, 9401, $vararg_buffer1);
 if (!(HEAP8[30881] & 1)) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[7419] & 31](0);
 STACKTOP = sp;
 return;
}

function _DrawTexturePro($texture, $sourceRec, $destRec, $origin, $rotation, $tint) {
 $texture = $texture | 0;
 $sourceRec = $sourceRec | 0;
 $destRec = $destRec | 0;
 $origin = $origin | 0;
 $rotation = Math_fround($rotation);
 $tint = $tint | 0;
 var $19 = f0, $22 = f0, $25 = f0, $28 = f0, $31 = f0, $35 = f0, $40 = f0, $42 = f0, $47 = f0, $50 = f0, $53 = f0, $55 = f0, $59 = f0, $6 = f0, $9 = f0, $add = f0, $add35 = f0, $add39 = f0, $add46 = f0, $add56 = f0, $add61 = f0, $add65 = f0, $add79 = f0, $div = f0, $div27 = f0, $div36 = f0, $div43 = f0, $div53 = f0, $div62 = f0, $div73 = f0, $div80 = f0, $flipX = 0, $height = 0, $rotation$addr = 0, $sub18 = f0, $width = 0, $width8 = 0, $y = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $rotation$addr = sp + 8 | 0;
 $width = sp + 4 | 0;
 $height = sp;
 $flipX = sp + 12 | 0;
 HEAPF32[$rotation$addr >> 2] = $rotation;
 if ((HEAP32[$texture >> 2] | 0) >>> 0 <= 0) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[$width >> 2] = Math_fround(HEAP32[$texture + 4 >> 2] | 0);
 HEAPF32[$height >> 2] = Math_fround(HEAP32[$texture + 8 >> 2] | 0);
 HEAP8[$flipX >> 0] = 0;
 if (Math_fround(HEAPF32[$sourceRec + 8 >> 2]) < Math_fround(0.0)) {
  HEAP8[$flipX >> 0] = 1;
  $width8 = $sourceRec + 8 | 0;
  HEAPF32[$width8 >> 2] = Math_fround(Math_fround(HEAPF32[$width8 >> 2]) * Math_fround(-1.0));
 }
 if (Math_fround(HEAPF32[$sourceRec + 12 >> 2]) < Math_fround(0.0)) {
  $6 = Math_fround(HEAPF32[$sourceRec + 12 >> 2]);
  $y = $sourceRec + 4 | 0;
  HEAPF32[$y >> 2] = Math_fround(Math_fround(HEAPF32[$y >> 2]) - $6);
 }
 _rlEnableTexture(HEAP32[$texture >> 2] | 0);
 _rlPushMatrix();
 $9 = Math_fround(HEAPF32[$destRec >> 2]);
 _rlTranslatef($9, Math_fround(HEAPF32[$destRec + 4 >> 2]), Math_fround(0.0));
 _rlRotatef(Math_fround(HEAPF32[$rotation$addr >> 2]), Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
 $sub18 = Math_fround(-Math_fround(HEAPF32[$origin >> 2]));
 _rlTranslatef($sub18, Math_fround(-Math_fround(HEAPF32[$origin + 4 >> 2])), Math_fround(0.0));
 _rlBegin(7);
 _rlColor4ub(HEAP8[$tint >> 0] | 0, HEAP8[$tint + 1 >> 0] | 0, HEAP8[$tint + 2 >> 0] | 0, HEAP8[$tint + 3 >> 0] | 0);
 _rlNormal3f(Math_fround(0.0), Math_fround(0.0), Math_fround(1.0));
 $19 = Math_fround(HEAPF32[$sourceRec >> 2]);
 if (HEAP8[$flipX >> 0] & 1) {
  $add = Math_fround($19 + Math_fround(HEAPF32[$sourceRec + 8 >> 2]));
  $div = Math_fround($add / Math_fround(HEAPF32[$width >> 2]));
  $22 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  _rlTexCoord2f($div, Math_fround($22 / Math_fround(HEAPF32[$height >> 2])));
 } else {
  $div27 = Math_fround($19 / Math_fround(HEAPF32[$width >> 2]));
  $25 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  _rlTexCoord2f($div27, Math_fround($25 / Math_fround(HEAPF32[$height >> 2])));
 }
 _rlVertex2f(Math_fround(0.0), Math_fround(0.0));
 $28 = Math_fround(HEAPF32[$sourceRec >> 2]);
 if (HEAP8[$flipX >> 0] & 1) {
  $add35 = Math_fround($28 + Math_fround(HEAPF32[$sourceRec + 8 >> 2]));
  $div36 = Math_fround($add35 / Math_fround(HEAPF32[$width >> 2]));
  $31 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  $add39 = Math_fround($31 + Math_fround(HEAPF32[$sourceRec + 12 >> 2]));
  _rlTexCoord2f($div36, Math_fround($add39 / Math_fround(HEAPF32[$height >> 2])));
 } else {
  $div43 = Math_fround($28 / Math_fround(HEAPF32[$width >> 2]));
  $35 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  $add46 = Math_fround($35 + Math_fround(HEAPF32[$sourceRec + 12 >> 2]));
  _rlTexCoord2f($div43, Math_fround($add46 / Math_fround(HEAPF32[$height >> 2])));
 }
 _rlVertex2f(Math_fround(0.0), Math_fround(HEAPF32[$destRec + 12 >> 2]));
 $40 = Math_fround(HEAPF32[$sourceRec >> 2]);
 if (HEAP8[$flipX >> 0] & 1) {
  $div53 = Math_fround($40 / Math_fround(HEAPF32[$width >> 2]));
  $42 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  $add56 = Math_fround($42 + Math_fround(HEAPF32[$sourceRec + 12 >> 2]));
  _rlTexCoord2f($div53, Math_fround($add56 / Math_fround(HEAPF32[$height >> 2])));
 } else {
  $add61 = Math_fround($40 + Math_fround(HEAPF32[$sourceRec + 8 >> 2]));
  $div62 = Math_fround($add61 / Math_fround(HEAPF32[$width >> 2]));
  $47 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  $add65 = Math_fround($47 + Math_fround(HEAPF32[$sourceRec + 12 >> 2]));
  _rlTexCoord2f($div62, Math_fround($add65 / Math_fround(HEAPF32[$height >> 2])));
 }
 $50 = Math_fround(HEAPF32[$destRec + 8 >> 2]);
 _rlVertex2f($50, Math_fround(HEAPF32[$destRec + 12 >> 2]));
 $53 = Math_fround(HEAPF32[$sourceRec >> 2]);
 if (HEAP8[$flipX >> 0] & 1) {
  $div73 = Math_fround($53 / Math_fround(HEAPF32[$width >> 2]));
  $55 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  _rlTexCoord2f($div73, Math_fround($55 / Math_fround(HEAPF32[$height >> 2])));
 } else {
  $add79 = Math_fround($53 + Math_fround(HEAPF32[$sourceRec + 8 >> 2]));
  $div80 = Math_fround($add79 / Math_fround(HEAPF32[$width >> 2]));
  $59 = Math_fround(HEAPF32[$sourceRec + 4 >> 2]);
  _rlTexCoord2f($div80, Math_fround($59 / Math_fround(HEAPF32[$height >> 2])));
 }
 _rlVertex2f(Math_fround(HEAPF32[$destRec + 8 >> 2]), Math_fround(0.0));
 _rlEnd();
 _rlPopMatrix();
 _rlDisableTexture();
 STACKTOP = sp;
 return;
}

function _stbir__resize_arbitrary($alloc_context, $input_data, $input_w, $input_h, $input_stride_in_bytes, $output_data, $output_w, $output_h, $output_stride_in_bytes, $s0, $t0, $s1, $t1, $transform, $channels, $alpha_channel, $flags, $type, $h_filter, $v_filter, $edge_horizontal, $edge_vertical, $colorspace) {
 $alloc_context = $alloc_context | 0;
 $input_data = $input_data | 0;
 $input_w = $input_w | 0;
 $input_h = $input_h | 0;
 $input_stride_in_bytes = $input_stride_in_bytes | 0;
 $output_data = $output_data | 0;
 $output_w = $output_w | 0;
 $output_h = $output_h | 0;
 $output_stride_in_bytes = $output_stride_in_bytes | 0;
 $s0 = Math_fround($s0);
 $t0 = Math_fround($t0);
 $s1 = Math_fround($s1);
 $t1 = Math_fround($t1);
 $transform = $transform | 0;
 $channels = $channels | 0;
 $alpha_channel = $alpha_channel | 0;
 $flags = $flags | 0;
 $type = $type | 0;
 $h_filter = $h_filter | 0;
 $v_filter = $v_filter | 0;
 $edge_horizontal = $edge_horizontal | 0;
 $edge_vertical = $edge_vertical | 0;
 $colorspace = $colorspace | 0;
 var $28 = 0, $5 = f0, $6 = f0, $7 = f0, $8 = f0, $alpha_channel$addr = 0, $channels$addr = 0, $colorspace$addr = 0, $edge_horizontal$addr = 0, $edge_vertical$addr = 0, $extra_memory = 0, $flags$addr = 0, $h_filter$addr = 0, $info = 0, $input_data$addr = 0, $input_h$addr = 0, $input_stride_in_bytes$addr = 0, $input_w$addr = 0, $memory_required = 0, $output_data$addr = 0, $output_h$addr = 0, $output_stride_in_bytes$addr = 0, $output_w$addr = 0, $result = 0, $retval = 0, $s0$addr = 0, $s1$addr = 0, $t0$addr = 0, $t1$addr = 0, $transform$addr = 0, $type$addr = 0, $v_filter$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $retval = sp + 324 | 0;
 $input_data$addr = sp + 316 | 0;
 $input_w$addr = sp + 312 | 0;
 $input_h$addr = sp + 308 | 0;
 $input_stride_in_bytes$addr = sp + 304 | 0;
 $output_data$addr = sp + 300 | 0;
 $output_w$addr = sp + 296 | 0;
 $output_h$addr = sp + 292 | 0;
 $output_stride_in_bytes$addr = sp + 288 | 0;
 $s0$addr = sp + 284 | 0;
 $t0$addr = sp + 280 | 0;
 $s1$addr = sp + 276 | 0;
 $t1$addr = sp + 272 | 0;
 $transform$addr = sp + 268 | 0;
 $channels$addr = sp + 264 | 0;
 $alpha_channel$addr = sp + 260 | 0;
 $flags$addr = sp + 256 | 0;
 $type$addr = sp + 252 | 0;
 $h_filter$addr = sp + 248 | 0;
 $v_filter$addr = sp + 244 | 0;
 $edge_horizontal$addr = sp + 240 | 0;
 $edge_vertical$addr = sp + 236 | 0;
 $colorspace$addr = sp + 232 | 0;
 $info = sp + 12 | 0;
 $result = sp + 8 | 0;
 $memory_required = sp + 4 | 0;
 $extra_memory = sp;
 HEAP32[sp + 320 >> 2] = $alloc_context;
 HEAP32[$input_data$addr >> 2] = $input_data;
 HEAP32[$input_w$addr >> 2] = $input_w;
 HEAP32[$input_h$addr >> 2] = $input_h;
 HEAP32[$input_stride_in_bytes$addr >> 2] = $input_stride_in_bytes;
 HEAP32[$output_data$addr >> 2] = $output_data;
 HEAP32[$output_w$addr >> 2] = $output_w;
 HEAP32[$output_h$addr >> 2] = $output_h;
 HEAP32[$output_stride_in_bytes$addr >> 2] = $output_stride_in_bytes;
 HEAPF32[$s0$addr >> 2] = $s0;
 HEAPF32[$t0$addr >> 2] = $t0;
 HEAPF32[$s1$addr >> 2] = $s1;
 HEAPF32[$t1$addr >> 2] = $t1;
 HEAP32[$transform$addr >> 2] = $transform;
 HEAP32[$channels$addr >> 2] = $channels;
 HEAP32[$alpha_channel$addr >> 2] = $alpha_channel;
 HEAP32[$flags$addr >> 2] = $flags;
 HEAP32[$type$addr >> 2] = $type;
 HEAP32[$h_filter$addr >> 2] = $h_filter;
 HEAP32[$v_filter$addr >> 2] = $v_filter;
 HEAP32[$edge_horizontal$addr >> 2] = $edge_horizontal;
 HEAP32[$edge_vertical$addr >> 2] = $edge_vertical;
 HEAP32[$colorspace$addr >> 2] = $colorspace;
 _stbir__setup($info, HEAP32[$input_w$addr >> 2] | 0, HEAP32[$input_h$addr >> 2] | 0, HEAP32[$output_w$addr >> 2] | 0, HEAP32[$output_h$addr >> 2] | 0, HEAP32[$channels$addr >> 2] | 0);
 $5 = Math_fround(HEAPF32[$s0$addr >> 2]);
 $6 = Math_fround(HEAPF32[$t0$addr >> 2]);
 $7 = Math_fround(HEAPF32[$s1$addr >> 2]);
 $8 = Math_fround(HEAPF32[$t1$addr >> 2]);
 _stbir__calculate_transform($info, $5, $6, $7, $8, HEAP32[$transform$addr >> 2] | 0);
 _stbir__choose_filter($info, HEAP32[$h_filter$addr >> 2] | 0, HEAP32[$v_filter$addr >> 2] | 0);
 HEAP32[$memory_required >> 2] = _stbir__calculate_memory($info) | 0;
 HEAP32[$extra_memory >> 2] = _malloc(HEAP32[$memory_required >> 2] | 0) | 0;
 if (HEAP32[$extra_memory >> 2] | 0) {
  HEAP32[$result >> 2] = _stbir__resize_allocated($info, HEAP32[$input_data$addr >> 2] | 0, HEAP32[$input_stride_in_bytes$addr >> 2] | 0, HEAP32[$output_data$addr >> 2] | 0, HEAP32[$output_stride_in_bytes$addr >> 2] | 0, HEAP32[$alpha_channel$addr >> 2] | 0, HEAP32[$flags$addr >> 2] | 0, HEAP32[$type$addr >> 2] | 0, HEAP32[$edge_horizontal$addr >> 2] | 0, HEAP32[$edge_vertical$addr >> 2] | 0, HEAP32[$colorspace$addr >> 2] | 0, HEAP32[$extra_memory >> 2] | 0, HEAP32[$memory_required >> 2] | 0) | 0;
  _free(HEAP32[$extra_memory >> 2] | 0);
  HEAP32[$retval >> 2] = HEAP32[$result >> 2];
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 } else {
  HEAP32[$retval >> 2] = 0;
  $28 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 return 0;
}

function _SetupFramebuffer($width, $height) {
 $width = $width | 0;
 $height = $height | 0;
 var $12 = f0, $28 = f0, $33 = 0, $39 = 0, $40 = 0, $41 = 0, $46 = f0, $5 = 0, $6 = 0, $7 = 0, $conv = f0, $conv12 = f0, $conv17 = f0, $conv27 = f0, $conv3 = f0, $conv30 = f0, $conv36 = f0, $conv42 = f0, $conv9 = f0, $displayRatio = 0, $heightRatio = 0, $scaleRatio = 0, $screenRatio = 0, $tmp = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $widthRatio = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $vararg_buffer8 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer = sp;
 $widthRatio = sp + 120 | 0;
 $heightRatio = sp + 116 | 0;
 $scaleRatio = sp + 112 | 0;
 $tmp = sp + 48 | 0;
 $displayRatio = sp + 44 | 0;
 $screenRatio = sp + 40 | 0;
 HEAP32[sp + 128 >> 2] = $width;
 HEAP32[sp + 124 >> 2] = $height;
 if ((HEAP32[7525] | 0) <= (HEAP32[7543] | 0)) if ((HEAP32[7526] | 0) <= (HEAP32[7544] | 0)) {
  if ((HEAP32[7525] | 0) >= (HEAP32[7543] | 0)) if ((HEAP32[7526] | 0) >= (HEAP32[7544] | 0)) {
   HEAP32[7547] = HEAP32[7525];
   HEAP32[7548] = HEAP32[7526];
   HEAP32[7549] = 0;
   HEAP32[7550] = 0;
   STACKTOP = sp;
   return;
  }
  $39 = HEAP32[7526] | 0;
  $40 = HEAP32[7543] | 0;
  $41 = HEAP32[7544] | 0;
  HEAP32[$vararg_buffer8 >> 2] = HEAP32[7525];
  HEAP32[$vararg_buffer8 + 4 >> 2] = $39;
  HEAP32[$vararg_buffer8 + 8 >> 2] = $40;
  HEAP32[$vararg_buffer8 + 12 >> 2] = $41;
  _TraceLog(3, 12015, $vararg_buffer8);
  $conv27 = Math_fround(HEAP32[7543] | 0);
  HEAPF32[$displayRatio >> 2] = Math_fround($conv27 / Math_fround(HEAP32[7544] | 0));
  $conv30 = Math_fround(HEAP32[7525] | 0);
  HEAPF32[$screenRatio >> 2] = Math_fround($conv30 / Math_fround(HEAP32[7526] | 0));
  $46 = Math_fround(HEAPF32[$displayRatio >> 2]);
  if ($46 <= Math_fround(HEAPF32[$screenRatio >> 2])) {
   HEAP32[7547] = HEAP32[7525];
   $conv36 = Math_fround(HEAP32[7525] | 0);
   HEAP32[7548] = ~~+_llvm_round_f64(+(+Math_fround($conv36 / Math_fround(HEAPF32[$displayRatio >> 2]))));
   HEAP32[7549] = 0;
   HEAP32[7550] = (HEAP32[7548] | 0) - (HEAP32[7526] | 0);
   STACKTOP = sp;
   return;
  } else {
   $conv42 = Math_fround(HEAP32[7526] | 0);
   HEAP32[7547] = ~~+_llvm_round_f64(+(+Math_fround($conv42 * Math_fround(HEAPF32[$displayRatio >> 2]))));
   HEAP32[7548] = HEAP32[7526];
   HEAP32[7549] = (HEAP32[7547] | 0) - (HEAP32[7525] | 0);
   HEAP32[7550] = 0;
   STACKTOP = sp;
   return;
  }
 }
 $5 = HEAP32[7526] | 0;
 $6 = HEAP32[7543] | 0;
 $7 = HEAP32[7544] | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[7525];
 HEAP32[$vararg_buffer + 4 >> 2] = $5;
 HEAP32[$vararg_buffer + 8 >> 2] = $6;
 HEAP32[$vararg_buffer + 12 >> 2] = $7;
 _TraceLog(4, 11872, $vararg_buffer);
 $conv = Math_fround(HEAP32[7543] | 0);
 HEAPF32[$widthRatio >> 2] = Math_fround($conv / Math_fround(HEAP32[7525] | 0));
 $conv3 = Math_fround(HEAP32[7544] | 0);
 HEAPF32[$heightRatio >> 2] = Math_fround($conv3 / Math_fround(HEAP32[7526] | 0));
 $12 = Math_fround(HEAPF32[$widthRatio >> 2]);
 if ($12 <= Math_fround(HEAPF32[$heightRatio >> 2])) {
  HEAP32[7547] = HEAP32[7543];
  $conv9 = Math_fround(HEAP32[7526] | 0);
  HEAP32[7548] = ~~+_llvm_round_f64(+(+Math_fround($conv9 * Math_fround(HEAPF32[$widthRatio >> 2]))));
  HEAP32[7549] = 0;
  HEAP32[7550] = (HEAP32[7544] | 0) - (HEAP32[7548] | 0);
 } else {
  $conv12 = Math_fround(HEAP32[7525] | 0);
  HEAP32[7547] = ~~+_llvm_round_f64(+(+Math_fround($conv12 * Math_fround(HEAPF32[$heightRatio >> 2]))));
  HEAP32[7548] = HEAP32[7544];
  HEAP32[7549] = (HEAP32[7543] | 0) - (HEAP32[7547] | 0);
  HEAP32[7550] = 0;
 }
 $conv17 = Math_fround(HEAP32[7547] | 0);
 HEAPF32[$scaleRatio >> 2] = Math_fround($conv17 / Math_fround(HEAP32[7525] | 0));
 $28 = Math_fround(HEAPF32[$scaleRatio >> 2]);
 _MatrixScale($tmp, $28, Math_fround(HEAPF32[$scaleRatio >> 2]), Math_fround(1.0));
 dest = 30108;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[7547] = HEAP32[7543];
 HEAP32[7548] = HEAP32[7544];
 $33 = HEAP32[7548] | 0;
 HEAP32[$vararg_buffer4 >> 2] = HEAP32[7547];
 HEAP32[$vararg_buffer4 + 4 >> 2] = $33;
 _TraceLog(4, 11950, $vararg_buffer4);
 STACKTOP = sp;
 return;
}

function _GifGetClosestPaletteColor($pPal, $r, $g, $b, $bestInd, $bestDiff, $treeRoot) {
 $pPal = $pPal | 0;
 $r = $r | 0;
 $g = $g | 0;
 $b = $b | 0;
 $bestInd = $bestInd | 0;
 $bestDiff = $bestDiff | 0;
 $treeRoot = $treeRoot | 0;
 var $20 = 0, $22 = 0, $24 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $b$addr = 0, $b_err = 0, $bestDiff$addr = 0, $bestInd$addr = 0, $comps = 0, $diff = 0, $g$addr = 0, $g_err = 0, $ind = 0, $mul = 0, $pPal$addr = 0, $r$addr = 0, $r_err = 0, $splitComp = 0, $splitPos = 0, $treeRoot$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $pPal$addr = sp + 64 | 0;
 $r$addr = sp + 60 | 0;
 $g$addr = sp + 56 | 0;
 $b$addr = sp + 52 | 0;
 $bestInd$addr = sp + 48 | 0;
 $bestDiff$addr = sp + 44 | 0;
 $treeRoot$addr = sp + 40 | 0;
 $ind = sp + 36 | 0;
 $r_err = sp + 32 | 0;
 $g_err = sp + 28 | 0;
 $b_err = sp + 24 | 0;
 $diff = sp + 20 | 0;
 $comps = sp + 8 | 0;
 $splitComp = sp + 4 | 0;
 $splitPos = sp;
 HEAP32[$pPal$addr >> 2] = $pPal;
 HEAP32[$r$addr >> 2] = $r;
 HEAP32[$g$addr >> 2] = $g;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$bestInd$addr >> 2] = $bestInd;
 HEAP32[$bestDiff$addr >> 2] = $bestDiff;
 HEAP32[$treeRoot$addr >> 2] = $treeRoot;
 if ((HEAP32[$treeRoot$addr >> 2] | 0) > ((1 << HEAP32[HEAP32[$pPal$addr >> 2] >> 2]) - 1 | 0)) {
  HEAP32[$ind >> 2] = (HEAP32[$treeRoot$addr >> 2] | 0) - (1 << HEAP32[HEAP32[$pPal$addr >> 2] >> 2]);
  if (!(HEAP32[$ind >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$r_err >> 2] = (HEAP32[$r$addr >> 2] | 0) - (HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 4 + (HEAP32[$ind >> 2] | 0) >> 0] | 0);
  HEAP32[$g_err >> 2] = (HEAP32[$g$addr >> 2] | 0) - (HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 260 + (HEAP32[$ind >> 2] | 0) >> 0] | 0);
  HEAP32[$b_err >> 2] = (HEAP32[$b$addr >> 2] | 0) - (HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 516 + (HEAP32[$ind >> 2] | 0) >> 0] | 0);
  $20 = HEAP32[$r_err >> 2] | 0;
  $22 = HEAP32[$g_err >> 2] | 0;
  $24 = HEAP32[$b_err >> 2] | 0;
  HEAP32[$diff >> 2] = ((HEAP32[$r_err >> 2] | 0) < 0 ? 0 - $20 | 0 : $20) + ((HEAP32[$g_err >> 2] | 0) < 0 ? 0 - $22 | 0 : $22) + ((HEAP32[$b_err >> 2] | 0) < 0 ? 0 - $24 | 0 : $24);
  if ((HEAP32[$diff >> 2] | 0) >= (HEAP32[HEAP32[$bestDiff$addr >> 2] >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[HEAP32[$bestInd$addr >> 2] >> 2] = HEAP32[$ind >> 2];
  HEAP32[HEAP32[$bestDiff$addr >> 2] >> 2] = HEAP32[$diff >> 2];
  STACKTOP = sp;
  return;
 }
 HEAP32[$comps >> 2] = HEAP32[$r$addr >> 2];
 HEAP32[$comps + 4 >> 2] = HEAP32[$g$addr >> 2];
 HEAP32[$comps + 8 >> 2] = HEAP32[$b$addr >> 2];
 HEAP32[$splitComp >> 2] = HEAP32[$comps + ((HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 772 + (HEAP32[$treeRoot$addr >> 2] | 0) >> 0] | 0) << 2) >> 2];
 HEAP32[$splitPos >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 1027 + (HEAP32[$treeRoot$addr >> 2] | 0) >> 0];
 $44 = HEAP32[$pPal$addr >> 2] | 0;
 $45 = HEAP32[$r$addr >> 2] | 0;
 $46 = HEAP32[$g$addr >> 2] | 0;
 $47 = HEAP32[$b$addr >> 2] | 0;
 $48 = HEAP32[$bestInd$addr >> 2] | 0;
 $49 = HEAP32[$bestDiff$addr >> 2] | 0;
 $mul = HEAP32[$treeRoot$addr >> 2] << 1;
 if ((HEAP32[$splitPos >> 2] | 0) > (HEAP32[$splitComp >> 2] | 0)) {
  _GifGetClosestPaletteColor($44, $45, $46, $47, $48, $49, $mul);
  if ((HEAP32[HEAP32[$bestDiff$addr >> 2] >> 2] | 0) <= ((HEAP32[$splitPos >> 2] | 0) - (HEAP32[$splitComp >> 2] | 0) | 0)) {
   STACKTOP = sp;
   return;
  }
  _GifGetClosestPaletteColor(HEAP32[$pPal$addr >> 2] | 0, HEAP32[$r$addr >> 2] | 0, HEAP32[$g$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0, HEAP32[$bestInd$addr >> 2] | 0, HEAP32[$bestDiff$addr >> 2] | 0, (HEAP32[$treeRoot$addr >> 2] << 1) + 1 | 0);
  STACKTOP = sp;
  return;
 } else {
  _GifGetClosestPaletteColor($44, $45, $46, $47, $48, $49, $mul + 1 | 0);
  if ((HEAP32[HEAP32[$bestDiff$addr >> 2] >> 2] | 0) <= ((HEAP32[$splitComp >> 2] | 0) - (HEAP32[$splitPos >> 2] | 0) | 0)) {
   STACKTOP = sp;
   return;
  }
  _GifGetClosestPaletteColor(HEAP32[$pPal$addr >> 2] | 0, HEAP32[$r$addr >> 2] | 0, HEAP32[$g$addr >> 2] | 0, HEAP32[$b$addr >> 2] | 0, HEAP32[$bestInd$addr >> 2] | 0, HEAP32[$bestDiff$addr >> 2] | 0, HEAP32[$treeRoot$addr >> 2] << 1);
  STACKTOP = sp;
  return;
 }
}

function _stbir__calculate_coefficients_downsample($filter, $scale_ratio, $out_first_pixel, $out_last_pixel, $out_center_of_in, $contributor, $coefficient_group) {
 $filter = $filter | 0;
 $scale_ratio = Math_fround($scale_ratio);
 $out_first_pixel = $out_first_pixel | 0;
 $out_last_pixel = $out_last_pixel | 0;
 $out_center_of_in = Math_fround($out_center_of_in);
 $contributor = $contributor | 0;
 $coefficient_group = $coefficient_group | 0;
 var $19 = f0, $23 = f0, $24 = f0, $33 = f0, $4 = f0, $add24 = f0, $call17 = f0, $coefficient_group$addr = 0, $contributor$addr = 0, $filter$addr = 0, $i = 0, $mul18 = f0, $out_center_of_in$addr = 0, $out_first_pixel$addr = 0, $out_last_pixel$addr = 0, $out_pixel_center = 0, $scale_ratio$addr = 0, $sub = 0, $sub25 = f0, $x = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $filter$addr = sp + 36 | 0;
 $scale_ratio$addr = sp + 32 | 0;
 $out_first_pixel$addr = sp + 28 | 0;
 $out_last_pixel$addr = sp + 24 | 0;
 $out_center_of_in$addr = sp + 20 | 0;
 $contributor$addr = sp + 16 | 0;
 $coefficient_group$addr = sp + 12 | 0;
 $i = sp + 8 | 0;
 $out_pixel_center = sp + 4 | 0;
 $x = sp;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale_ratio$addr >> 2] = $scale_ratio;
 HEAP32[$out_first_pixel$addr >> 2] = $out_first_pixel;
 HEAP32[$out_last_pixel$addr >> 2] = $out_last_pixel;
 HEAPF32[$out_center_of_in$addr >> 2] = $out_center_of_in;
 HEAP32[$contributor$addr >> 2] = $contributor;
 HEAP32[$coefficient_group$addr >> 2] = $coefficient_group;
 $sub = (HEAP32[$out_last_pixel$addr >> 2] | 0) - (HEAP32[$out_first_pixel$addr >> 2] | 0) | 0;
 $4 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
 if (($sub | 0) > (~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[HEAP32[5280 + (HEAP32[$filter$addr >> 2] << 3) + 4 >> 2] & 7]($4)) * Math_fround(2.0)))) | 0)) ___assert_fail(14157, 12378, 1091, 14262);
 HEAP32[HEAP32[$contributor$addr >> 2] >> 2] = HEAP32[$out_first_pixel$addr >> 2];
 HEAP32[(HEAP32[$contributor$addr >> 2] | 0) + 4 >> 2] = HEAP32[$out_last_pixel$addr >> 2];
 if ((HEAP32[(HEAP32[$contributor$addr >> 2] | 0) + 4 >> 2] | 0) < (HEAP32[HEAP32[$contributor$addr >> 2] >> 2] | 0)) ___assert_fail(14303, 12378, 1096, 14262);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) > ((HEAP32[$out_last_pixel$addr >> 2] | 0) - (HEAP32[$out_first_pixel$addr >> 2] | 0) | 0)) break;
  HEAPF32[$out_pixel_center >> 2] = Math_fround(Math_fround((HEAP32[$i >> 2] | 0) + (HEAP32[$out_first_pixel$addr >> 2] | 0) | 0) + Math_fround(.5));
  $19 = Math_fround(HEAPF32[$out_pixel_center >> 2]);
  HEAPF32[$x >> 2] = Math_fround($19 - Math_fround(HEAPF32[$out_center_of_in$addr >> 2]));
  $23 = Math_fround(HEAPF32[$x >> 2]);
  $24 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
  $call17 = Math_fround(FUNCTION_TABLE_fff[HEAP32[5280 + (HEAP32[$filter$addr >> 2] << 3) >> 2] & 7]($23, $24));
  $mul18 = Math_fround($call17 * Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
  HEAPF32[(HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = $mul18;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 $add24 = Math_fround(Math_fround((HEAP32[$out_last_pixel$addr >> 2] | 0) + 1 | 0) + Math_fround(.5));
 $sub25 = Math_fround($add24 - Math_fround(HEAPF32[$out_center_of_in$addr >> 2]));
 $33 = Math_fround(HEAPF32[$scale_ratio$addr >> 2]);
 if (!(Math_fround(FUNCTION_TABLE_fff[HEAP32[5280 + (HEAP32[$filter$addr >> 2] << 3) >> 2] & 7]($sub25, $33)) == Math_fround(0.0))) ___assert_fail(14338, 12378, 1105, 14262);
 HEAP32[$i >> 2] = (HEAP32[$out_last_pixel$addr >> 2] | 0) - (HEAP32[$out_first_pixel$addr >> 2] | 0);
 while (1) {
  if ((HEAP32[$i >> 2] | 0) < 0) {
   label = 14;
   break;
  }
  if (Math_fround(HEAPF32[(HEAP32[$coefficient_group$addr >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2]) != Math_fround(0.0)) {
   label = 14;
   break;
  }
  HEAP32[(HEAP32[$contributor$addr >> 2] | 0) + 4 >> 2] = (HEAP32[HEAP32[$contributor$addr >> 2] >> 2] | 0) + (HEAP32[$i >> 2] | 0) - 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + -1;
 }
 if ((label | 0) == 14) {
  STACKTOP = sp;
  return;
 }
}

function _rlGetGlTextureFormats($format, $glInternalFormat, $glFormat, $glType) {
 $format = $format | 0;
 $glInternalFormat = $glInternalFormat | 0;
 $glFormat = $glFormat | 0;
 $glType = $glType | 0;
 var $format$addr = 0, $glFormat$addr = 0, $glInternalFormat$addr = 0, $glType$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $format$addr = sp + 16 | 0;
 $glInternalFormat$addr = sp + 12 | 0;
 $glFormat$addr = sp + 8 | 0;
 $glType$addr = sp + 4 | 0;
 HEAP32[$format$addr >> 2] = $format;
 HEAP32[$glInternalFormat$addr >> 2] = $glInternalFormat;
 HEAP32[$glFormat$addr >> 2] = $glFormat;
 HEAP32[$glType$addr >> 2] = $glType;
 HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = -1;
 HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = -1;
 HEAP32[HEAP32[$glType$addr >> 2] >> 2] = -1;
 do switch (HEAP32[$format$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6409;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6409;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5121;
   break;
  }
 case 2:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6410;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6410;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5121;
   break;
  }
 case 3:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6407;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6407;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 33635;
   break;
  }
 case 4:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6407;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6407;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5121;
   break;
  }
 case 5:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 32820;
   break;
  }
 case 6:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 32819;
   break;
  }
 case 7:
  {
   HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5121;
   break;
  }
 case 8:
  {
   if (HEAP8[30884] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6409;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6409;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5126;
   break;
  }
 case 9:
  {
   if (HEAP8[30884] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6407;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6407;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5126;
   break;
  }
 case 10:
  {
   if (HEAP8[30884] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glFormat$addr >> 2] >> 2] = 6408;
   HEAP32[HEAP32[$glType$addr >> 2] >> 2] = 5126;
   break;
  }
 case 11:
  {
   if (HEAP8[30885] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 33776;
   break;
  }
 case 12:
  {
   if (HEAP8[30885] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 33777;
   break;
  }
 case 13:
  {
   if (HEAP8[30885] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 33778;
   break;
  }
 case 14:
  {
   if (HEAP8[30885] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 33779;
   break;
  }
 case 15:
  {
   if (HEAP8[30886] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 36196;
   break;
  }
 case 16:
  {
   if (HEAP8[30887] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 37492;
   break;
  }
 case 17:
  {
   if (HEAP8[30887] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 37496;
   break;
  }
 case 18:
  {
   if (HEAP8[30888] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 35840;
   break;
  }
 case 19:
  {
   if (HEAP8[30888] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 35842;
   break;
  }
 case 20:
  {
   if (HEAP8[30889] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 37808;
   break;
  }
 case 21:
  {
   if (HEAP8[30889] & 1) HEAP32[HEAP32[$glInternalFormat$addr >> 2] >> 2] = 37815;
   break;
  }
 default:
  _TraceLog(4, 11167, sp);
 } while (0);
 STACKTOP = sp;
 return;
}

function _EmscriptenTouchCallback($eventType, $touchEvent, $userData) {
 $eventType = $eventType | 0;
 $touchEvent = $touchEvent | 0;
 $userData = $userData | 0;
 var $$compoundliteral = 0, $$compoundliteral24 = 0, $arrayidx23 = 0, $arrayidx54 = 0, $arrayidx68 = 0, $canvasHeight = 0, $canvasWidth = 0, $conv36 = f0, $conv42 = f0, $conv50 = f0, $conv58 = f0, $div = f0, $div44 = f0, $div52 = f0, $div60 = f0, $eventType$addr = 0, $gestureEvent = 0, $gestureEvent$byval_copy = 0, $position = 0, $position38 = 0, $position65 = 0, $touchEvent$addr = 0, $y47 = 0, $y63 = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $gestureEvent$byval_copy = sp + 104 | 0;
 $eventType$addr = sp + 96 | 0;
 $touchEvent$addr = sp + 92 | 0;
 $gestureEvent = sp + 32 | 0;
 $$compoundliteral = sp + 24 | 0;
 $$compoundliteral24 = sp + 16 | 0;
 $canvasWidth = sp + 8 | 0;
 $canvasHeight = sp;
 HEAP32[$eventType$addr >> 2] = $eventType;
 HEAP32[$touchEvent$addr >> 2] = $touchEvent;
 HEAP32[sp + 88 >> 2] = $userData;
 do if ((HEAP32[$eventType$addr >> 2] | 0) == 22) HEAP32[$gestureEvent >> 2] = 1; else {
  if ((HEAP32[$eventType$addr >> 2] | 0) == 23) {
   HEAP32[$gestureEvent >> 2] = 0;
   break;
  }
  if ((HEAP32[$eventType$addr >> 2] | 0) == 24) HEAP32[$gestureEvent >> 2] = 2;
 } while (0);
 HEAP32[$gestureEvent + 4 >> 2] = HEAP32[HEAP32[$touchEvent$addr >> 2] >> 2];
 HEAP32[$gestureEvent + 8 >> 2] = HEAP32[(HEAP32[$touchEvent$addr >> 2] | 0) + 20 >> 2];
 HEAP32[$gestureEvent + 8 + 4 >> 2] = HEAP32[(HEAP32[$touchEvent$addr >> 2] | 0) + 20 + 52 >> 2];
 $position = $gestureEvent + 24 | 0;
 HEAPF32[$$compoundliteral >> 2] = Math_fround(HEAP32[(HEAP32[$touchEvent$addr >> 2] | 0) + 20 + 36 >> 2] | 0);
 HEAPF32[$$compoundliteral + 4 >> 2] = Math_fround(HEAP32[(HEAP32[$touchEvent$addr >> 2] | 0) + 20 + 40 >> 2] | 0);
 HEAP32[$position >> 2] = HEAP32[$$compoundliteral >> 2];
 HEAP32[$position + 4 >> 2] = HEAP32[$$compoundliteral + 4 >> 2];
 CSE$0 = $gestureEvent + 24 + 8 | 0;
 CSE$1 = $gestureEvent + 24 + 8 | 0;
 $arrayidx23 = CSE$0 | 0;
 HEAPF32[$$compoundliteral24 >> 2] = Math_fround(HEAP32[(HEAP32[$touchEvent$addr >> 2] | 0) + 20 + 52 + 36 >> 2] | 0);
 HEAPF32[$$compoundliteral24 + 4 >> 2] = Math_fround(HEAP32[(HEAP32[$touchEvent$addr >> 2] | 0) + 20 + 52 + 40 >> 2] | 0);
 HEAP32[$arrayidx23 >> 2] = HEAP32[$$compoundliteral24 >> 2];
 HEAP32[$arrayidx23 + 4 >> 2] = HEAP32[$$compoundliteral24 + 4 >> 2];
 _emscripten_get_element_css_size(11303, $canvasWidth | 0, $canvasHeight | 0) | 0;
 $conv36 = Math_fround(_GetScreenWidth() | 0);
 $div = Math_fround($conv36 / Math_fround(+HEAPF64[$canvasWidth >> 3]));
 $position38 = $gestureEvent + 24 | 0;
 HEAPF32[$position38 >> 2] = Math_fround(Math_fround(HEAPF32[$position38 >> 2]) * $div);
 $conv42 = Math_fround(_GetScreenHeight() | 0);
 $div44 = Math_fround($conv42 / Math_fround(+HEAPF64[$canvasHeight >> 3]));
 $y47 = $gestureEvent + 24 + 4 | 0;
 HEAPF32[$y47 >> 2] = Math_fround(Math_fround(HEAPF32[$y47 >> 2]) * $div44);
 $conv50 = Math_fround(_GetScreenWidth() | 0);
 $div52 = Math_fround($conv50 / Math_fround(+HEAPF64[$canvasWidth >> 3]));
 $arrayidx54 = CSE$0 | 0;
 HEAPF32[$arrayidx54 >> 2] = Math_fround(Math_fround(HEAPF32[$arrayidx54 >> 2]) * $div52);
 $conv58 = Math_fround(_GetScreenHeight() | 0);
 $div60 = Math_fround($conv58 / Math_fround(+HEAPF64[$canvasHeight >> 3]));
 $y63 = CSE$1 + 4 | 0;
 HEAPF32[$y63 >> 2] = Math_fround(Math_fround(HEAPF32[$y63 >> 2]) * $div60);
 $position65 = $gestureEvent + 24 | 0;
 HEAP32[5244] = HEAP32[$position65 >> 2];
 HEAP32[5245] = HEAP32[$position65 + 4 >> 2];
 $arrayidx68 = CSE$0 | 0;
 HEAP32[5246] = HEAP32[$arrayidx68 >> 2];
 HEAP32[5247] = HEAP32[$arrayidx68 + 4 >> 2];
 dest = $gestureEvent$byval_copy;
 src = $gestureEvent;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _ProcessGestureEvent($gestureEvent$byval_copy);
 STACKTOP = sp;
 return 1;
}

function _stbir__empty_ring_buffer($stbir_info, $first_necessary_scanline) {
 $stbir_info = $stbir_info | 0;
 $first_necessary_scanline = $first_necessary_scanline | 0;
 var $50 = 0, $alpha_channel = 0, $channels = 0, $colorspace = 0, $decode = 0, $first_necessary_scanline$addr = 0, $output_data = 0, $output_row_start = 0, $output_stride_bytes = 0, $output_w = 0, $ring_buffer = 0, $ring_buffer_entry = 0, $ring_buffer_first_scanline24 = 0, $ring_buffer_length = 0, $stbir_info$addr = 0, $type = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $stbir_info$addr = sp + 52 | 0;
 $first_necessary_scanline$addr = sp + 48 | 0;
 $output_stride_bytes = sp + 44 | 0;
 $channels = sp + 40 | 0;
 $alpha_channel = sp + 36 | 0;
 $type = sp + 32 | 0;
 $colorspace = sp + 28 | 0;
 $output_w = sp + 24 | 0;
 $output_data = sp + 20 | 0;
 $decode = sp + 16 | 0;
 $ring_buffer = sp + 12 | 0;
 $ring_buffer_length = sp + 8 | 0;
 $output_row_start = sp + 4 | 0;
 $ring_buffer_entry = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$first_necessary_scanline$addr >> 2] = $first_necessary_scanline;
 HEAP32[$output_stride_bytes >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 28 >> 2];
 HEAP32[$channels >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 64 >> 2];
 HEAP32[$alpha_channel >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 68 >> 2];
 HEAP32[$type >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 76 >> 2];
 HEAP32[$colorspace >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 96 >> 2];
 HEAP32[$output_w >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 20 >> 2];
 HEAP32[$output_data >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 16 >> 2];
 HEAP32[$decode >> 2] = (HEAP32[$type >> 2] << 1) + (HEAP32[$colorspace >> 2] | 0);
 HEAP32[$ring_buffer >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 180 >> 2];
 HEAP32[$ring_buffer_length >> 2] = ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 160 >> 2] | 0) >>> 0) / 4 | 0;
 if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0) < 0) {
  STACKTOP = sp;
  return;
 }
 while (1) {
  if ((HEAP32[$first_necessary_scanline$addr >> 2] | 0) <= (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0)) {
   label = 10;
   break;
  }
  if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0) >= 0) if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0) < (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 24 >> 2] | 0)) {
   HEAP32[$output_row_start >> 2] = Math_imul(HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0, HEAP32[$output_stride_bytes >> 2] | 0) | 0;
   HEAP32[$ring_buffer_entry >> 2] = _stbir__get_ring_buffer_entry(HEAP32[$ring_buffer >> 2] | 0, HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0, HEAP32[$ring_buffer_length >> 2] | 0) | 0;
   _stbir__encode_scanline(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$output_w >> 2] | 0, (HEAP32[$output_data >> 2] | 0) + (HEAP32[$output_row_start >> 2] | 0) | 0, HEAP32[$ring_buffer_entry >> 2] | 0, HEAP32[$channels >> 2] | 0, HEAP32[$alpha_channel >> 2] | 0, HEAP32[$decode >> 2] | 0);
  }
  $50 = HEAP32[$stbir_info$addr >> 2] | 0;
  if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0) == (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] | 0)) break;
  $ring_buffer_first_scanline24 = $50 + 168 | 0;
  HEAP32[$ring_buffer_first_scanline24 >> 2] = (HEAP32[$ring_buffer_first_scanline24 >> 2] | 0) + 1;
  CSE$0 = (HEAP32[$stbir_info$addr >> 2] | 0) + 176 | 0;
  CSE$1 = HEAP32[$stbir_info$addr >> 2] | 0;
  HEAP32[CSE$0 >> 2] = ((HEAP32[CSE$0 >> 2] | 0) + 1 | 0) % (HEAP32[CSE$1 + 164 >> 2] | 0) | 0;
 }
 if ((label | 0) == 10) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$50 + 176 >> 2] = -1;
 HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] = 0;
 HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _stbir__buffer_loop_upsample($stbir_info) {
 $stbir_info = $stbir_info | 0;
 var $12 = f0, $13 = f0, $29 = 0, $45 = 0, $call = f0, $div = f0, $in_center_of_out = 0, $in_first_scanline = 0, $in_last_scanline = 0, $out_scanlines_radius = 0, $ring_buffer_first_scanline14 = 0, $scale_ratio = 0, $stbir_info$addr = 0, $y = 0, label = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $stbir_info$addr = sp + 24 | 0;
 $y = sp + 20 | 0;
 $scale_ratio = sp + 16 | 0;
 $out_scanlines_radius = sp + 12 | 0;
 $in_center_of_out = sp + 8 | 0;
 $in_first_scanline = sp + 4 | 0;
 $in_last_scanline = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAPF32[$scale_ratio >> 2] = Math_fround(HEAPF32[(HEAP32[$stbir_info$addr >> 2] | 0) + 60 >> 2]);
 $div = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$scale_ratio >> 2]));
 $call = Math_fround(FUNCTION_TABLE_ff[HEAP32[5280 + (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 84 >> 2] << 3) + 4 >> 2] & 7]($div));
 HEAPF32[$out_scanlines_radius >> 2] = Math_fround($call * Math_fround(HEAPF32[$scale_ratio >> 2]));
 if (!(_stbir__use_height_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0)) ___assert_fail(13907, 12378, 2069, 13948);
 HEAP32[$y >> 2] = 0;
 while (1) {
  if ((HEAP32[$y >> 2] | 0) >= (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 24 >> 2] | 0)) {
   label = 19;
   break;
  }
  HEAPF32[$in_center_of_out >> 2] = Math_fround(0.0);
  HEAP32[$in_first_scanline >> 2] = 0;
  HEAP32[$in_last_scanline >> 2] = 0;
  $12 = Math_fround(HEAPF32[$out_scanlines_radius >> 2]);
  $13 = Math_fround(HEAPF32[$scale_ratio >> 2]);
  _stbir__calculate_sample_range_upsample(HEAP32[$y >> 2] | 0, $12, $13, Math_fround(HEAPF32[(HEAP32[$stbir_info$addr >> 2] | 0) + 52 >> 2]), $in_first_scanline, $in_last_scanline, $in_center_of_out);
  if (((HEAP32[$in_last_scanline >> 2] | 0) - (HEAP32[$in_first_scanline >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 164 >> 2] | 0)) {
   label = 6;
   break;
  }
  L8 : do if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0) >= 0) {
   while (1) {
    if ((HEAP32[$in_first_scanline >> 2] | 0) <= (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0)) break L8;
    $29 = HEAP32[$stbir_info$addr >> 2] | 0;
    if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] | 0) == (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] | 0)) break;
    $ring_buffer_first_scanline14 = $29 + 168 | 0;
    HEAP32[$ring_buffer_first_scanline14 >> 2] = (HEAP32[$ring_buffer_first_scanline14 >> 2] | 0) + 1;
    CSE$0 = (HEAP32[$stbir_info$addr >> 2] | 0) + 176 | 0;
    CSE$1 = HEAP32[$stbir_info$addr >> 2] | 0;
    HEAP32[CSE$0 >> 2] = ((HEAP32[CSE$0 >> 2] | 0) + 1 | 0) % (HEAP32[CSE$1 + 164 >> 2] | 0) | 0;
   }
   HEAP32[$29 + 176 >> 2] = -1;
   HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] = 0;
   HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] = 0;
  } while (0);
  if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0) < 0) _stbir__decode_and_resample_upsample(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$in_first_scanline >> 2] | 0);
  while (1) {
   $45 = HEAP32[$stbir_info$addr >> 2] | 0;
   if ((HEAP32[$in_last_scanline >> 2] | 0) <= (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] | 0)) break;
   _stbir__decode_and_resample_upsample($45, (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] | 0) + 1 | 0);
  }
  _stbir__resample_vertical_upsample($45, HEAP32[$y >> 2] | 0);
  HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + 1;
 }
 if ((label | 0) == 6) ___assert_fail(13976, 12378, 2078, 13948); else if ((label | 0) == 19) {
  STACKTOP = sp;
  return;
 }
}
function ___stpncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $0 = 0, $4 = 0, $6 = 0, $7 = 0, $d$addr$0$lcssa = 0, $d$addr$051 = 0, $d$addr$1 = 0, $d$addr$231 = 0, $d$addr$3 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $incdec$ptr21 = 0, $incdec$ptr34 = 0, $incdec$ptr5 = 0, $n$addr$0$lcssa = 0, $n$addr$053 = 0, $n$addr$1$lcssa = 0, $n$addr$138 = 0, $n$addr$2 = 0, $n$addr$333 = 0, $n$addr$4 = 0, $s$addr$0$lcssa = 0, $s$addr$052 = 0, $s$addr$1 = 0, $s$addr$232 = 0, $sub19 = 0, $tobool3 = 0, $tobool3$lcssa = 0, $tobool349 = 0, $wd$0$lcssa = 0, $wd$039 = 0, $ws$0$lcssa = 0, $ws$040 = 0, label = 0;
 label = 0;
 $0 = $s;
 L1 : do if (!(($0 ^ $d) & 3)) {
  $tobool349 = ($n | 0) != 0;
  if ($tobool349 & ($0 & 3 | 0) != 0) {
   $d$addr$051 = $d;
   $n$addr$053 = $n;
   $s$addr$052 = $s;
   while (1) {
    $4 = HEAP8[$s$addr$052 >> 0] | 0;
    HEAP8[$d$addr$051 >> 0] = $4;
    if (!($4 << 24 >> 24)) {
     $d$addr$3 = $d$addr$051;
     $n$addr$4 = $n$addr$053;
     break L1;
    }
    $dec = $n$addr$053 + -1 | 0;
    $incdec$ptr = $s$addr$052 + 1 | 0;
    $incdec$ptr5 = $d$addr$051 + 1 | 0;
    $tobool3 = ($dec | 0) != 0;
    if ($tobool3 & ($incdec$ptr & 3 | 0) != 0) {
     $d$addr$051 = $incdec$ptr5;
     $n$addr$053 = $dec;
     $s$addr$052 = $incdec$ptr;
    } else {
     $d$addr$0$lcssa = $incdec$ptr5;
     $n$addr$0$lcssa = $dec;
     $s$addr$0$lcssa = $incdec$ptr;
     $tobool3$lcssa = $tobool3;
     break;
    }
   }
  } else {
   $d$addr$0$lcssa = $d;
   $n$addr$0$lcssa = $n;
   $s$addr$0$lcssa = $s;
   $tobool3$lcssa = $tobool349;
  }
  if ($tobool3$lcssa) if (!(HEAP8[$s$addr$0$lcssa >> 0] | 0)) {
   $d$addr$3 = $d$addr$0$lcssa;
   $n$addr$4 = $n$addr$0$lcssa;
  } else {
   L11 : do if ($n$addr$0$lcssa >>> 0 > 3) {
    $n$addr$138 = $n$addr$0$lcssa;
    $wd$039 = $d$addr$0$lcssa;
    $ws$040 = $s$addr$0$lcssa;
    while (1) {
     $6 = HEAP32[$ws$040 >> 2] | 0;
     if (($6 & -2139062144 ^ -2139062144) & $6 + -16843009 | 0) {
      $n$addr$1$lcssa = $n$addr$138;
      $wd$0$lcssa = $wd$039;
      $ws$0$lcssa = $ws$040;
      break L11;
     }
     HEAP32[$wd$039 >> 2] = $6;
     $sub19 = $n$addr$138 + -4 | 0;
     $incdec$ptr20 = $ws$040 + 4 | 0;
     $incdec$ptr21 = $wd$039 + 4 | 0;
     if ($sub19 >>> 0 > 3) {
      $n$addr$138 = $sub19;
      $wd$039 = $incdec$ptr21;
      $ws$040 = $incdec$ptr20;
     } else {
      $n$addr$1$lcssa = $sub19;
      $wd$0$lcssa = $incdec$ptr21;
      $ws$0$lcssa = $incdec$ptr20;
      break;
     }
    }
   } else {
    $n$addr$1$lcssa = $n$addr$0$lcssa;
    $wd$0$lcssa = $d$addr$0$lcssa;
    $ws$0$lcssa = $s$addr$0$lcssa;
   } while (0);
   $d$addr$1 = $wd$0$lcssa;
   $n$addr$2 = $n$addr$1$lcssa;
   $s$addr$1 = $ws$0$lcssa;
   label = 13;
  } else {
   $d$addr$3 = $d$addr$0$lcssa;
   $n$addr$4 = 0;
  }
 } else {
  $d$addr$1 = $d;
  $n$addr$2 = $n;
  $s$addr$1 = $s;
  label = 13;
 } while (0);
 L17 : do if ((label | 0) == 13) if (!$n$addr$2) {
  $d$addr$3 = $d$addr$1;
  $n$addr$4 = 0;
 } else {
  $d$addr$231 = $d$addr$1;
  $n$addr$333 = $n$addr$2;
  $s$addr$232 = $s$addr$1;
  while (1) {
   $7 = HEAP8[$s$addr$232 >> 0] | 0;
   HEAP8[$d$addr$231 >> 0] = $7;
   if (!($7 << 24 >> 24)) {
    $d$addr$3 = $d$addr$231;
    $n$addr$4 = $n$addr$333;
    break L17;
   }
   $n$addr$333 = $n$addr$333 + -1 | 0;
   $incdec$ptr34 = $d$addr$231 + 1 | 0;
   if (!$n$addr$333) {
    $d$addr$3 = $incdec$ptr34;
    $n$addr$4 = 0;
    break;
   } else {
    $d$addr$231 = $incdec$ptr34;
    $s$addr$232 = $s$addr$232 + 1 | 0;
   }
  }
 } while (0);
 _memset($d$addr$3 | 0, 0, $n$addr$4 | 0) | 0;
 return $d$addr$3 | 0;
}

function _rlEnd() {
 var $addColors = 0, $addTexCoords = 0, $cCounter60 = 0, $i = 0, $i100 = 0, $i72 = 0, $tcCounter89 = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0, CSE$4 = 0, CSE$5 = 0, CSE$6 = 0, CSE$7 = 0, CSE$8 = 0, CSE$9 = 0, CSE$10 = 0, CSE$11 = 0, CSE$12 = 0, CSE$13 = 0, CSE$14 = 0, CSE$15 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $addColors = sp + 16 | 0;
 $i = sp + 12 | 0;
 $addTexCoords = sp + 8 | 0;
 $i72 = sp + 4 | 0;
 $i100 = sp;
 L1 : do if ((HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) >> 2] | 0) != (HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 8 >> 2] | 0)) {
  CSE$0 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
  HEAP32[$addColors >> 2] = (HEAP32[CSE$0 >> 2] | 0) - (HEAP32[CSE$0 + 8 >> 2] | 0);
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$addColors >> 2] | 0)) break L1;
   CSE$1 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
   CSE$2 = HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 20 >> 2] | 0;
   CSE$3 = HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 8 >> 2] << 2 | 0;
   HEAP8[CSE$2 + CSE$3 >> 0] = HEAP8[CSE$2 + (CSE$3 - 4) >> 0] | 0;
   CSE$4 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
   CSE$5 = HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 20 >> 2] | 0;
   CSE$6 = HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 8 >> 2] << 2 | 0;
   HEAP8[CSE$5 + (CSE$6 + 1) >> 0] = HEAP8[CSE$5 + (CSE$6 - 3) >> 0] | 0;
   CSE$7 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
   CSE$8 = HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 20 >> 2] | 0;
   CSE$9 = HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 8 >> 2] << 2 | 0;
   HEAP8[CSE$8 + (CSE$9 + 2) >> 0] = HEAP8[CSE$8 + (CSE$9 - 2) >> 0] | 0;
   CSE$10 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
   CSE$11 = HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 20 >> 2] | 0;
   CSE$12 = HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 8 >> 2] << 2 | 0;
   HEAP8[CSE$11 + (CSE$12 + 3) >> 0] = HEAP8[CSE$11 + (CSE$12 - 1) >> 0] | 0;
   $cCounter60 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) + 8 | 0;
   HEAP32[$cCounter60 >> 2] = (HEAP32[$cCounter60 >> 2] | 0) + 1;
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 } while (0);
 L7 : do if ((HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) >> 2] | 0) != (HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 4 >> 2] | 0)) {
  CSE$13 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
  HEAP32[$addTexCoords >> 2] = (HEAP32[CSE$13 >> 2] | 0) - (HEAP32[CSE$13 + 4 >> 2] | 0);
  HEAP32[$i72 >> 2] = 0;
  while (1) {
   if ((HEAP32[$i72 >> 2] | 0) >= (HEAP32[$addTexCoords >> 2] | 0)) break L7;
   CSE$14 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
   HEAPF32[(HEAP32[CSE$14 + 16 >> 2] | 0) + (HEAP32[CSE$14 + 4 >> 2] << 1 << 2) >> 2] = Math_fround(0.0);
   CSE$15 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
   HEAPF32[(HEAP32[CSE$15 + 16 >> 2] | 0) + ((HEAP32[CSE$15 + 4 >> 2] << 1) + 1 << 2) >> 2] = Math_fround(0.0);
   $tcCounter89 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) + 4 | 0;
   HEAP32[$tcCounter89 >> 2] = (HEAP32[$tcCounter89 >> 2] | 0) + 1;
   HEAP32[$i72 >> 2] = (HEAP32[$i72 >> 2] | 0) + 1;
  }
 } while (0);
 HEAPF32[1893] = Math_fround(Math_fround(HEAPF32[1893]) + Math_fround(.0000499999987));
 if ((HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) >> 2] | 0) < 8188) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$i100 >> 2] = HEAP32[7396];
 while (1) {
  if ((HEAP32[$i100 >> 2] | 0) < 0) break;
  _rlPopMatrix();
  HEAP32[$i100 >> 2] = (HEAP32[$i100 >> 2] | 0) + -1;
 }
 _rlglDraw();
 STACKTOP = sp;
 return;
}

function _stbir__calculate_transform($info, $s0, $t0, $s1, $t1, $transform) {
 $info = $info | 0;
 $s0 = Math_fround($s0);
 $t0 = Math_fround($t0);
 $s1 = Math_fround($s1);
 $t1 = Math_fround($t1);
 $transform = $transform | 0;
 var $0 = f0, $10 = f0, $13 = f0, $16 = f0, $19 = f0, $2 = f0, $25 = f0, $32 = f0, $35 = f0, $38 = f0, $4 = f0, $41 = f0, $44 = f0, $6 = f0, $conv = f0, $conv11 = f0, $div = f0, $div13 = f0, $div15 = f0, $div20 = f0, $div26 = f0, $div9 = f0, $info$addr = 0, $mul = f0, $mul24 = f0, $s0$addr = 0, $s1$addr = 0, $t0$addr = 0, $t1$addr = 0, $transform$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $info$addr = sp + 20 | 0;
 $s0$addr = sp + 16 | 0;
 $t0$addr = sp + 12 | 0;
 $s1$addr = sp + 8 | 0;
 $t1$addr = sp + 4 | 0;
 $transform$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAPF32[$s0$addr >> 2] = $s0;
 HEAPF32[$t0$addr >> 2] = $t0;
 HEAPF32[$s1$addr >> 2] = $s1;
 HEAPF32[$t1$addr >> 2] = $t1;
 HEAP32[$transform$addr >> 2] = $transform;
 $0 = Math_fround(HEAPF32[$s0$addr >> 2]);
 HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 32 >> 2] = $0;
 $2 = Math_fround(HEAPF32[$t0$addr >> 2]);
 HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 36 >> 2] = $2;
 $4 = Math_fround(HEAPF32[$s1$addr >> 2]);
 HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 40 >> 2] = $4;
 $6 = Math_fround(HEAPF32[$t1$addr >> 2]);
 HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 44 >> 2] = $6;
 if (HEAP32[$transform$addr >> 2] | 0) {
  $10 = Math_fround(HEAPF32[HEAP32[$transform$addr >> 2] >> 2]);
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 56 >> 2] = $10;
  $13 = Math_fround(HEAPF32[(HEAP32[$transform$addr >> 2] | 0) + 4 >> 2]);
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 60 >> 2] = $13;
  $16 = Math_fround(HEAPF32[(HEAP32[$transform$addr >> 2] | 0) + 8 >> 2]);
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 48 >> 2] = $16;
  $19 = Math_fround(HEAPF32[(HEAP32[$transform$addr >> 2] | 0) + 12 >> 2]);
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 52 >> 2] = $19;
  STACKTOP = sp;
  return;
 } else {
  $conv = Math_fround(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] | 0);
  $div = Math_fround($conv / Math_fround(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] | 0));
  $25 = Math_fround(HEAPF32[$s1$addr >> 2]);
  $div9 = Math_fround($div / Math_fround($25 - Math_fround(HEAPF32[$s0$addr >> 2])));
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 56 >> 2] = $div9;
  $conv11 = Math_fround(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] | 0);
  $div13 = Math_fround($conv11 / Math_fround(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 8 >> 2] | 0));
  $32 = Math_fround(HEAPF32[$t1$addr >> 2]);
  $div15 = Math_fround($div13 / Math_fround($32 - Math_fround(HEAPF32[$t0$addr >> 2])));
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 60 >> 2] = $div15;
  $35 = Math_fround(HEAPF32[$s0$addr >> 2]);
  $mul = Math_fround($35 * Math_fround(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] | 0));
  $38 = Math_fround(HEAPF32[$s1$addr >> 2]);
  $div20 = Math_fround($mul / Math_fround($38 - Math_fround(HEAPF32[$s0$addr >> 2])));
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 48 >> 2] = $div20;
  $41 = Math_fround(HEAPF32[$t0$addr >> 2]);
  $mul24 = Math_fround($41 * Math_fround(HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] | 0));
  $44 = Math_fround(HEAPF32[$t1$addr >> 2]);
  $div26 = Math_fround($mul24 / Math_fround($44 - Math_fround(HEAPF32[$t0$addr >> 2])));
  HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 52 >> 2] = $div26;
  STACKTOP = sp;
  return;
 }
}

function _stbir__buffer_loop_downsample($stbir_info) {
 $stbir_info = $stbir_info | 0;
 var $19 = f0, $20 = f0, $41 = 0, $7 = f0, $call = f0, $in_pixels_radius = 0, $max_y = 0, $out_center_of_in = 0, $out_first_scanline = 0, $out_last_scanline = 0, $output_h = 0, $pixel_margin = 0, $scale_ratio = 0, $stbir_info$addr = 0, $y = 0, label = 0, sp = 0, CSE$0 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $stbir_info$addr = sp + 36 | 0;
 $y = sp + 32 | 0;
 $scale_ratio = sp + 28 | 0;
 $output_h = sp + 24 | 0;
 $in_pixels_radius = sp + 20 | 0;
 $pixel_margin = sp + 16 | 0;
 $max_y = sp + 12 | 0;
 $out_center_of_in = sp + 8 | 0;
 $out_first_scanline = sp + 4 | 0;
 $out_last_scanline = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAPF32[$scale_ratio >> 2] = Math_fround(HEAPF32[(HEAP32[$stbir_info$addr >> 2] | 0) + 60 >> 2]);
 HEAP32[$output_h >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 24 >> 2];
 $7 = Math_fround(HEAPF32[$scale_ratio >> 2]);
 $call = Math_fround(FUNCTION_TABLE_ff[HEAP32[5280 + (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 84 >> 2] << 3) + 4 >> 2] & 7]($7));
 HEAPF32[$in_pixels_radius >> 2] = Math_fround($call / Math_fround(HEAPF32[$scale_ratio >> 2]));
 HEAP32[$pixel_margin >> 2] = HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 148 >> 2];
 HEAP32[$max_y >> 2] = (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$pixel_margin >> 2] | 0);
 if (_stbir__use_height_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0) ___assert_fail(13040, 12378, 2170, 13082);
 HEAP32[$y >> 2] = 0 - (HEAP32[$pixel_margin >> 2] | 0);
 while (1) {
  if ((HEAP32[$y >> 2] | 0) >= (HEAP32[$max_y >> 2] | 0)) {
   label = 16;
   break;
  }
  $19 = Math_fround(HEAPF32[$in_pixels_radius >> 2]);
  $20 = Math_fround(HEAPF32[$scale_ratio >> 2]);
  _stbir__calculate_sample_range_downsample(HEAP32[$y >> 2] | 0, $19, $20, Math_fround(HEAPF32[(HEAP32[$stbir_info$addr >> 2] | 0) + 52 >> 2]), $out_first_scanline, $out_last_scanline, $out_center_of_in);
  if (((HEAP32[$out_last_scanline >> 2] | 0) - (HEAP32[$out_first_scanline >> 2] | 0) + 1 | 0) > (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 164 >> 2] | 0)) {
   label = 6;
   break;
  }
  if ((HEAP32[$out_last_scanline >> 2] | 0) >= 0) if ((HEAP32[$out_first_scanline >> 2] | 0) < (HEAP32[$output_h >> 2] | 0)) {
   _stbir__empty_ring_buffer(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$out_first_scanline >> 2] | 0);
   _stbir__decode_and_resample_downsample(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$y >> 2] | 0);
   if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0) < 0) _stbir__add_empty_ring_buffer_entry(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$out_first_scanline >> 2] | 0) | 0;
   while (1) {
    $41 = HEAP32[$stbir_info$addr >> 2] | 0;
    if ((HEAP32[$out_last_scanline >> 2] | 0) <= (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] | 0)) break;
    _stbir__add_empty_ring_buffer_entry($41, (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] | 0) + 1 | 0) | 0;
   }
   _stbir__resample_vertical_downsample($41, HEAP32[$y >> 2] | 0);
  }
  HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + 1;
 }
 if ((label | 0) == 6) ___assert_fail(13112, 12378, 2179, 13082); else if ((label | 0) == 16) {
  CSE$0 = HEAP32[$stbir_info$addr >> 2] | 0;
  _stbir__empty_ring_buffer(CSE$0 | 0, HEAP32[CSE$0 + 24 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function _stbir__calculate_sample_range_upsample($n, $out_filter_radius, $scale_ratio, $out_shift, $in_first_pixel, $in_last_pixel, $in_center_of_out) {
 $n = $n | 0;
 $out_filter_radius = Math_fround($out_filter_radius);
 $scale_ratio = Math_fround($scale_ratio);
 $out_shift = Math_fround($out_shift);
 $in_first_pixel = $in_first_pixel | 0;
 $in_last_pixel = $in_last_pixel | 0;
 $in_center_of_out = $in_center_of_out | 0;
 var $1 = f0, $11 = f0, $3 = f0, $5 = f0, $8 = f0, $add2 = f0, $add3 = f0, $add5 = f0, $conv12 = 0, $conv9 = 0, $div6 = f0, $in_center_of_out$addr = 0, $in_first_pixel$addr = 0, $in_last_pixel$addr = 0, $in_pixel_influence_lowerbound = 0, $in_pixel_influence_upperbound = 0, $n$addr = 0, $out_filter_radius$addr = 0, $out_pixel_center = 0, $out_pixel_influence_lowerbound = 0, $out_pixel_influence_upperbound = 0, $out_shift$addr = 0, $scale_ratio$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $n$addr = sp + 44 | 0;
 $out_filter_radius$addr = sp + 40 | 0;
 $scale_ratio$addr = sp + 36 | 0;
 $out_shift$addr = sp + 32 | 0;
 $in_first_pixel$addr = sp + 28 | 0;
 $in_last_pixel$addr = sp + 24 | 0;
 $in_center_of_out$addr = sp + 20 | 0;
 $out_pixel_center = sp + 16 | 0;
 $out_pixel_influence_lowerbound = sp + 12 | 0;
 $out_pixel_influence_upperbound = sp + 8 | 0;
 $in_pixel_influence_lowerbound = sp + 4 | 0;
 $in_pixel_influence_upperbound = sp;
 HEAP32[$n$addr >> 2] = $n;
 HEAPF32[$out_filter_radius$addr >> 2] = $out_filter_radius;
 HEAPF32[$scale_ratio$addr >> 2] = $scale_ratio;
 HEAPF32[$out_shift$addr >> 2] = $out_shift;
 HEAP32[$in_first_pixel$addr >> 2] = $in_first_pixel;
 HEAP32[$in_last_pixel$addr >> 2] = $in_last_pixel;
 HEAP32[$in_center_of_out$addr >> 2] = $in_center_of_out;
 HEAPF32[$out_pixel_center >> 2] = Math_fround(Math_fround(HEAP32[$n$addr >> 2] | 0) + Math_fround(.5));
 $1 = Math_fround(HEAPF32[$out_pixel_center >> 2]);
 HEAPF32[$out_pixel_influence_lowerbound >> 2] = Math_fround($1 - Math_fround(HEAPF32[$out_filter_radius$addr >> 2]));
 $3 = Math_fround(HEAPF32[$out_pixel_center >> 2]);
 HEAPF32[$out_pixel_influence_upperbound >> 2] = Math_fround($3 + Math_fround(HEAPF32[$out_filter_radius$addr >> 2]));
 $5 = Math_fround(HEAPF32[$out_pixel_influence_lowerbound >> 2]);
 $add2 = Math_fround($5 + Math_fround(HEAPF32[$out_shift$addr >> 2]));
 HEAPF32[$in_pixel_influence_lowerbound >> 2] = Math_fround($add2 / Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 $8 = Math_fround(HEAPF32[$out_pixel_influence_upperbound >> 2]);
 $add3 = Math_fround($8 + Math_fround(HEAPF32[$out_shift$addr >> 2]));
 HEAPF32[$in_pixel_influence_upperbound >> 2] = Math_fround($add3 / Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 $11 = Math_fround(HEAPF32[$out_pixel_center >> 2]);
 $add5 = Math_fround($11 + Math_fround(HEAPF32[$out_shift$addr >> 2]));
 $div6 = Math_fround($add5 / Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 HEAPF32[HEAP32[$in_center_of_out$addr >> 2] >> 2] = $div6;
 $conv9 = ~~+Math_floor(+(+Math_fround(HEAPF32[$in_pixel_influence_lowerbound >> 2]) + .5));
 HEAP32[HEAP32[$in_first_pixel$addr >> 2] >> 2] = $conv9;
 $conv12 = ~~+Math_floor(+(+Math_fround(HEAPF32[$in_pixel_influence_upperbound >> 2]) - .5));
 HEAP32[HEAP32[$in_last_pixel$addr >> 2] >> 2] = $conv12;
 STACKTOP = sp;
 return;
}

function _stbir__calculate_sample_range_downsample($n, $in_pixels_radius, $scale_ratio, $out_shift, $out_first_pixel, $out_last_pixel, $out_center_of_in) {
 $n = $n | 0;
 $in_pixels_radius = Math_fround($in_pixels_radius);
 $scale_ratio = Math_fround($scale_ratio);
 $out_shift = Math_fround($out_shift);
 $out_first_pixel = $out_first_pixel | 0;
 $out_last_pixel = $out_last_pixel | 0;
 $out_center_of_in = $out_center_of_in | 0;
 var $1 = f0, $11 = f0, $3 = f0, $5 = f0, $8 = f0, $conv12 = 0, $conv9 = 0, $in_pixel_center = 0, $in_pixel_influence_lowerbound = 0, $in_pixel_influence_upperbound = 0, $in_pixels_radius$addr = 0, $mul = f0, $mul3 = f0, $mul5 = f0, $n$addr = 0, $out_center_of_in$addr = 0, $out_first_pixel$addr = 0, $out_last_pixel$addr = 0, $out_pixel_influence_lowerbound = 0, $out_pixel_influence_upperbound = 0, $out_shift$addr = 0, $scale_ratio$addr = 0, $sub6 = f0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $n$addr = sp + 44 | 0;
 $in_pixels_radius$addr = sp + 40 | 0;
 $scale_ratio$addr = sp + 36 | 0;
 $out_shift$addr = sp + 32 | 0;
 $out_first_pixel$addr = sp + 28 | 0;
 $out_last_pixel$addr = sp + 24 | 0;
 $out_center_of_in$addr = sp + 20 | 0;
 $in_pixel_center = sp + 16 | 0;
 $in_pixel_influence_lowerbound = sp + 12 | 0;
 $in_pixel_influence_upperbound = sp + 8 | 0;
 $out_pixel_influence_lowerbound = sp + 4 | 0;
 $out_pixel_influence_upperbound = sp;
 HEAP32[$n$addr >> 2] = $n;
 HEAPF32[$in_pixels_radius$addr >> 2] = $in_pixels_radius;
 HEAPF32[$scale_ratio$addr >> 2] = $scale_ratio;
 HEAPF32[$out_shift$addr >> 2] = $out_shift;
 HEAP32[$out_first_pixel$addr >> 2] = $out_first_pixel;
 HEAP32[$out_last_pixel$addr >> 2] = $out_last_pixel;
 HEAP32[$out_center_of_in$addr >> 2] = $out_center_of_in;
 HEAPF32[$in_pixel_center >> 2] = Math_fround(Math_fround(HEAP32[$n$addr >> 2] | 0) + Math_fround(.5));
 $1 = Math_fround(HEAPF32[$in_pixel_center >> 2]);
 HEAPF32[$in_pixel_influence_lowerbound >> 2] = Math_fround($1 - Math_fround(HEAPF32[$in_pixels_radius$addr >> 2]));
 $3 = Math_fround(HEAPF32[$in_pixel_center >> 2]);
 HEAPF32[$in_pixel_influence_upperbound >> 2] = Math_fround($3 + Math_fround(HEAPF32[$in_pixels_radius$addr >> 2]));
 $5 = Math_fround(HEAPF32[$in_pixel_influence_lowerbound >> 2]);
 $mul = Math_fround($5 * Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 HEAPF32[$out_pixel_influence_lowerbound >> 2] = Math_fround($mul - Math_fround(HEAPF32[$out_shift$addr >> 2]));
 $8 = Math_fround(HEAPF32[$in_pixel_influence_upperbound >> 2]);
 $mul3 = Math_fround($8 * Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 HEAPF32[$out_pixel_influence_upperbound >> 2] = Math_fround($mul3 - Math_fround(HEAPF32[$out_shift$addr >> 2]));
 $11 = Math_fround(HEAPF32[$in_pixel_center >> 2]);
 $mul5 = Math_fround($11 * Math_fround(HEAPF32[$scale_ratio$addr >> 2]));
 $sub6 = Math_fround($mul5 - Math_fround(HEAPF32[$out_shift$addr >> 2]));
 HEAPF32[HEAP32[$out_center_of_in$addr >> 2] >> 2] = $sub6;
 $conv9 = ~~+Math_floor(+(+Math_fround(HEAPF32[$out_pixel_influence_lowerbound >> 2]) + .5));
 HEAP32[HEAP32[$out_first_pixel$addr >> 2] >> 2] = $conv9;
 $conv12 = ~~+Math_floor(+(+Math_fround(HEAPF32[$out_pixel_influence_upperbound >> 2]) - .5));
 HEAP32[HEAP32[$out_last_pixel$addr >> 2] >> 2] = $conv12;
 STACKTOP = sp;
 return;
}

function _atan2f($y, $x) {
 $y = Math_fround($y);
 $x = Math_fround($x);
 var $0 = 0, $and = 0, $and13 = 0, $or = 0, $retval$0 = f0, $shr = 0, $trunc35 = 0, $trunc41 = 0, $trunc41$clear = 0, $z$0 = f0, label = 0;
 label = 0;
 $trunc41 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $and = $trunc41 & 2147483647;
 L1 : do if ($and >>> 0 > 2139095040) label = 3; else {
  $0 = (HEAPF32[tempDoublePtr >> 2] = $y, HEAP32[tempDoublePtr >> 2] | 0);
  $and13 = $0 & 2147483647;
  if ($and13 >>> 0 > 2139095040) label = 3; else {
   if (($trunc41 | 0) == 1065353216) {
    $retval$0 = Math_fround(_atanf($y));
    break;
   }
   $shr = $0 >>> 31;
   $or = $trunc41 >>> 30 & 2 | $shr;
   if (!$and13) switch ($or & 3) {
   case 1:
   case 0:
    {
     $retval$0 = $y;
     break L1;
     break;
    }
   case 2:
    {
     $retval$0 = Math_fround(3.14159274);
     break L1;
     break;
    }
   case 3:
    {
     $retval$0 = Math_fround(-3.14159274);
     break L1;
     break;
    }
   default:
    {}
   }
   $trunc41$clear = $trunc41 & 2147483647;
   L14 : do if (($trunc41$clear | 0) < 2139095040) {
    switch ($trunc41$clear | 0) {
    case 0:
     break;
    default:
     break L14;
    }
    $retval$0 = ($shr | 0) == 0 ? Math_fround(1.57079637) : Math_fround(-1.57079637);
    break L1;
   } else {
    switch ($trunc41$clear | 0) {
    case 2139095040:
     break;
    default:
     break L14;
    }
    $trunc35 = $or & 255;
    if (($and13 | 0) == 2139095040) switch ($trunc35 & 3) {
    case 0:
     {
      $retval$0 = Math_fround(.785398185);
      break L1;
      break;
     }
    case 1:
     {
      $retval$0 = Math_fround(-.785398185);
      break L1;
      break;
     }
    case 2:
     {
      $retval$0 = Math_fround(2.3561945);
      break L1;
      break;
     }
    case 3:
     {
      $retval$0 = Math_fround(-2.3561945);
      break L1;
      break;
     }
    default:
     {}
    } else switch ($trunc35 & 3) {
    case 0:
     {
      $retval$0 = Math_fround(0.0);
      break L1;
      break;
     }
    case 1:
     {
      $retval$0 = Math_fround(-0.0);
      break L1;
      break;
     }
    case 2:
     {
      $retval$0 = Math_fround(3.14159274);
      break L1;
      break;
     }
    case 3:
     {
      $retval$0 = Math_fround(-3.14159274);
      break L1;
      break;
     }
    default:
     {}
    }
   } while (0);
   if (($and13 | 0) == 2139095040 | ($and + 218103808 | 0) >>> 0 < $and13 >>> 0) {
    $retval$0 = ($shr | 0) == 0 ? Math_fround(1.57079637) : Math_fround(-1.57079637);
    break;
   }
   if (($trunc41 | 0) < 0 & ($and13 + 218103808 | 0) >>> 0 < $and >>> 0) $z$0 = Math_fround(0.0); else $z$0 = Math_fround(_atanf(Math_fround(Math_abs(Math_fround($y / $x)))));
   switch ($or & 3) {
   case 0:
    {
     $retval$0 = $z$0;
     break L1;
     break;
    }
   case 1:
    {
     $retval$0 = Math_fround(-$z$0);
     break L1;
     break;
    }
   case 2:
    {
     $retval$0 = Math_fround(Math_fround(3.14159274) - Math_fround($z$0 + Math_fround(8.74227765e-08)));
     break L1;
     break;
    }
   default:
    {
     $retval$0 = Math_fround(Math_fround($z$0 + Math_fround(8.74227765e-08)) + Math_fround(-3.14159274));
     break L1;
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) $retval$0 = Math_fround($y + $x);
 return Math_fround($retval$0);
}

function _GifThresholdImage($lastFrame, $nextFrame, $outFrame, $width, $height, $pPal) {
 $lastFrame = $lastFrame | 0;
 $nextFrame = $nextFrame | 0;
 $outFrame = $outFrame | 0;
 $width = $width | 0;
 $height = $height | 0;
 $pPal = $pPal | 0;
 var $bestDiff = 0, $bestInd = 0, $height$addr = 0, $ii = 0, $lastFrame$addr = 0, $nextFrame$addr = 0, $numPixels = 0, $outFrame$addr = 0, $pPal$addr = 0, $width$addr = 0, label = 0, sp = 0, CSE$0 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $lastFrame$addr = sp + 36 | 0;
 $nextFrame$addr = sp + 32 | 0;
 $outFrame$addr = sp + 28 | 0;
 $width$addr = sp + 24 | 0;
 $height$addr = sp + 20 | 0;
 $pPal$addr = sp + 16 | 0;
 $numPixels = sp + 12 | 0;
 $ii = sp + 8 | 0;
 $bestDiff = sp + 4 | 0;
 $bestInd = sp;
 HEAP32[$lastFrame$addr >> 2] = $lastFrame;
 HEAP32[$nextFrame$addr >> 2] = $nextFrame;
 HEAP32[$outFrame$addr >> 2] = $outFrame;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$pPal$addr >> 2] = $pPal;
 HEAP32[$numPixels >> 2] = Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0;
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >>> 0 >= (HEAP32[$numPixels >> 2] | 0) >>> 0) break;
  if (HEAP32[$lastFrame$addr >> 2] | 0) if ((HEAPU8[HEAP32[$lastFrame$addr >> 2] >> 0] | 0) == (HEAPU8[HEAP32[$nextFrame$addr >> 2] >> 0] | 0)) if ((HEAPU8[(HEAP32[$lastFrame$addr >> 2] | 0) + 1 >> 0] | 0) == (HEAPU8[(HEAP32[$nextFrame$addr >> 2] | 0) + 1 >> 0] | 0)) if ((HEAPU8[(HEAP32[$lastFrame$addr >> 2] | 0) + 2 >> 0] | 0) == (HEAPU8[(HEAP32[$nextFrame$addr >> 2] | 0) + 2 >> 0] | 0)) {
   HEAP8[HEAP32[$outFrame$addr >> 2] >> 0] = HEAP8[HEAP32[$lastFrame$addr >> 2] >> 0] | 0;
   HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$lastFrame$addr >> 2] | 0) + 1 >> 0] | 0;
   HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$lastFrame$addr >> 2] | 0) + 2 >> 0] | 0;
   HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + 3 >> 0] = 0;
  } else label = 8; else label = 8; else label = 8; else label = 8;
  if ((label | 0) == 8) {
   label = 0;
   HEAP32[$bestDiff >> 2] = 1e6;
   HEAP32[$bestInd >> 2] = 1;
   CSE$0 = HEAP32[$nextFrame$addr >> 2] | 0;
   _GifGetClosestPaletteColor(HEAP32[$pPal$addr >> 2] | 0, HEAPU8[HEAP32[$nextFrame$addr >> 2] >> 0] | 0, HEAPU8[CSE$0 + 1 >> 0] | 0, HEAPU8[CSE$0 + 2 >> 0] | 0, $bestInd, $bestDiff, 1);
   HEAP8[HEAP32[$outFrame$addr >> 2] >> 0] = HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 4 + (HEAP32[$bestInd >> 2] | 0) >> 0] | 0;
   HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 260 + (HEAP32[$bestInd >> 2] | 0) >> 0] | 0;
   HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 516 + (HEAP32[$bestInd >> 2] | 0) >> 0] | 0;
   HEAP8[(HEAP32[$outFrame$addr >> 2] | 0) + 3 >> 0] = HEAP32[$bestInd >> 2];
  }
  if (HEAP32[$lastFrame$addr >> 2] | 0) HEAP32[$lastFrame$addr >> 2] = (HEAP32[$lastFrame$addr >> 2] | 0) + 4;
  HEAP32[$outFrame$addr >> 2] = (HEAP32[$outFrame$addr >> 2] | 0) + 4;
  HEAP32[$nextFrame$addr >> 2] = (HEAP32[$nextFrame$addr >> 2] | 0) + 4;
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _MatrixOrtho($agg$result, $left, $right, $bottom, $top, $near, $far) {
 $agg$result = $agg$result | 0;
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $near = +$near;
 $far = +$far;
 var $bottom$addr = 0, $conv11 = f0, $conv16 = f0, $conv7 = f0, $far$addr = 0, $fn = 0, $left$addr = 0, $near$addr = 0, $result = 0, $right$addr = 0, $rl = 0, $sub14 = f0, $sub19 = f0, $sub9 = f0, $tb = 0, $top$addr = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $left$addr = sp + 40 | 0;
 $right$addr = sp + 32 | 0;
 $bottom$addr = sp + 24 | 0;
 $top$addr = sp + 16 | 0;
 $near$addr = sp + 8 | 0;
 $far$addr = sp;
 $result = sp + 64 | 0;
 $rl = sp + 56 | 0;
 $tb = sp + 52 | 0;
 $fn = sp + 48 | 0;
 HEAPF64[$left$addr >> 3] = $left;
 HEAPF64[$right$addr >> 3] = $right;
 HEAPF64[$bottom$addr >> 3] = $bottom;
 HEAPF64[$top$addr >> 3] = $top;
 HEAPF64[$near$addr >> 3] = $near;
 HEAPF64[$far$addr >> 3] = $far;
 dest = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$rl >> 2] = Math_fround(+HEAPF64[$right$addr >> 3] - +HEAPF64[$left$addr >> 3]);
 HEAPF32[$tb >> 2] = Math_fround(+HEAPF64[$top$addr >> 3] - +HEAPF64[$bottom$addr >> 3]);
 HEAPF32[$fn >> 2] = Math_fround(+HEAPF64[$far$addr >> 3] - +HEAPF64[$near$addr >> 3]);
 HEAPF32[$result >> 2] = Math_fround(Math_fround(2.0) / Math_fround(HEAPF32[$rl >> 2]));
 HEAPF32[$result + 16 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 32 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 48 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 4 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 20 >> 2] = Math_fround(Math_fround(2.0) / Math_fround(HEAPF32[$tb >> 2]));
 HEAPF32[$result + 36 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 52 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 8 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 24 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 40 >> 2] = Math_fround(Math_fround(-2.0) / Math_fround(HEAPF32[$fn >> 2]));
 HEAPF32[$result + 56 >> 2] = Math_fround(0.0);
 $conv7 = Math_fround(+HEAPF64[$left$addr >> 3]);
 $sub9 = Math_fround(-Math_fround($conv7 + Math_fround(+HEAPF64[$right$addr >> 3])));
 HEAPF32[$result + 12 >> 2] = Math_fround($sub9 / Math_fround(HEAPF32[$rl >> 2]));
 $conv11 = Math_fround(+HEAPF64[$top$addr >> 3]);
 $sub14 = Math_fround(-Math_fround($conv11 + Math_fround(+HEAPF64[$bottom$addr >> 3])));
 HEAPF32[$result + 28 >> 2] = Math_fround($sub14 / Math_fround(HEAPF32[$tb >> 2]));
 $conv16 = Math_fround(+HEAPF64[$far$addr >> 3]);
 $sub19 = Math_fround(-Math_fround($conv16 + Math_fround(+HEAPF64[$near$addr >> 3])));
 HEAPF32[$result + 44 >> 2] = Math_fround($sub19 / Math_fround(HEAPF32[$fn >> 2]));
 HEAPF32[$result + 60 >> 2] = Math_fround(1.0);
 dest = $agg$result;
 src = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _SaveKTX($image, $fileName) {
 $image = $image | 0;
 $fileName = $fileName | 0;
 var $28 = 0, $dataOffset = 0, $dataSize = 0, $fileName$addr = 0, $height16 = 0, $i = 0, $ktxFile = 0, $ktxHeader = 0, $success = 0, $vararg_buffer = 0, $width14 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $vararg_buffer = sp;
 $fileName$addr = sp + 104 | 0;
 $success = sp + 100 | 0;
 $ktxFile = sp + 96 | 0;
 $ktxHeader = sp + 32 | 0;
 $width14 = sp + 28 | 0;
 $height16 = sp + 24 | 0;
 $dataOffset = sp + 20 | 0;
 $i = sp + 16 | 0;
 $dataSize = sp + 12 | 0;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$success >> 2] = 0;
 HEAP32[$ktxFile >> 2] = _fopen(HEAP32[$fileName$addr >> 2] | 0, 12224) | 0;
 if (!(HEAP32[$ktxFile >> 2] | 0)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$fileName$addr >> 2];
  _TraceLog(4, 15170, $vararg_buffer);
  $28 = HEAP32[$success >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 _strncpy($ktxHeader, 15211, 12) | 0;
 HEAP32[$ktxHeader + 12 >> 2] = 0;
 HEAP32[$ktxHeader + 16 >> 2] = 0;
 HEAP32[$ktxHeader + 20 >> 2] = 1;
 HEAP32[$ktxHeader + 24 >> 2] = 0;
 HEAP32[$ktxHeader + 28 >> 2] = 0;
 HEAP32[$ktxHeader + 32 >> 2] = 0;
 HEAP32[$ktxHeader + 36 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$ktxHeader + 40 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$ktxHeader + 44 >> 2] = 0;
 HEAP32[$ktxHeader + 48 >> 2] = 0;
 HEAP32[$ktxHeader + 52 >> 2] = 1;
 HEAP32[$ktxHeader + 56 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$ktxHeader + 60 >> 2] = 0;
 _rlGetGlTextureFormats(HEAP32[$image + 16 >> 2] | 0, $ktxHeader + 28 | 0, $ktxHeader + 24 | 0, $ktxHeader + 16 | 0);
 HEAP32[$ktxHeader + 32 >> 2] = HEAP32[$ktxHeader + 24 >> 2];
 L5 : do if ((HEAP32[$ktxHeader + 24 >> 2] | 0) == -1) _TraceLog(4, 15223, sp + 8 | 0); else {
  HEAP32[$success >> 2] = _fwrite($ktxHeader, 64, 1, HEAP32[$ktxFile >> 2] | 0) | 0;
  HEAP32[$width14 >> 2] = HEAP32[$image + 4 >> 2];
  HEAP32[$height16 >> 2] = HEAP32[$image + 8 >> 2];
  HEAP32[$dataOffset >> 2] = 0;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$image + 12 >> 2] | 0)) break L5;
   HEAP32[$dataSize >> 2] = _GetPixelDataSize(HEAP32[$width14 >> 2] | 0, HEAP32[$height16 >> 2] | 0, HEAP32[$image + 16 >> 2] | 0) | 0;
   HEAP32[$success >> 2] = _fwrite($dataSize, 4, 1, HEAP32[$ktxFile >> 2] | 0) | 0;
   HEAP32[$success >> 2] = _fwrite((HEAP32[$image >> 2] | 0) + (HEAP32[$dataOffset >> 2] | 0) | 0, HEAP32[$dataSize >> 2] | 0, 1, HEAP32[$ktxFile >> 2] | 0) | 0;
   HEAP32[$width14 >> 2] = (HEAP32[$width14 >> 2] | 0) / 2 | 0;
   HEAP32[$height16 >> 2] = (HEAP32[$height16 >> 2] | 0) / 2 | 0;
   HEAP32[$dataOffset >> 2] = (HEAP32[$dataOffset >> 2] | 0) + (HEAP32[$dataSize >> 2] | 0);
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 } while (0);
 _fclose(HEAP32[$ktxFile >> 2] | 0) | 0;
 $28 = HEAP32[$success >> 2] | 0;
 STACKTOP = sp;
 return $28 | 0;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$in = 0, $1 = 0, $5 = 0, $8 = 0, $conv1 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$1$lcssa55 = 0, $n$addr$133 = 0, $n$addr$227 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0, $sub22 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0;
 label = 0;
 $conv1 = $c & 255;
 $tobool241 = ($n | 0) != 0;
 L1 : do if ($tobool241 & ($src & 3 | 0) != 0) {
  $1 = $c & 255;
  $n$addr$043 = $n;
  $s$044 = $src;
  while (1) {
   if ((HEAP8[$s$044 >> 0] | 0) == $1 << 24 >> 24) {
    $n$addr$0$lcssa52 = $n$addr$043;
    $s$0$lcssa53 = $s$044;
    label = 6;
    break L1;
   }
   $incdec$ptr = $s$044 + 1 | 0;
   $dec = $n$addr$043 + -1 | 0;
   $tobool2 = ($dec | 0) != 0;
   if ($tobool2 & ($incdec$ptr & 3 | 0) != 0) {
    $n$addr$043 = $dec;
    $s$044 = $incdec$ptr;
   } else {
    $n$addr$0$lcssa = $dec;
    $s$0$lcssa = $incdec$ptr;
    $tobool2$lcssa = $tobool2;
    label = 5;
    break;
   }
  }
 } else {
  $n$addr$0$lcssa = $n;
  $s$0$lcssa = $src;
  $tobool2$lcssa = $tobool241;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($tobool2$lcssa) {
  $n$addr$0$lcssa52 = $n$addr$0$lcssa;
  $s$0$lcssa53 = $s$0$lcssa;
  label = 6;
 } else label = 16;
 L8 : do if ((label | 0) == 6) {
  $5 = $c & 255;
  if ((HEAP8[$s$0$lcssa53 >> 0] | 0) == $5 << 24 >> 24) if (!$n$addr$0$lcssa52) {
   label = 16;
   break;
  } else {
   $8 = $s$0$lcssa53;
   break;
  }
  $mul = Math_imul($conv1, 16843009) | 0;
  L13 : do if ($n$addr$0$lcssa52 >>> 0 > 3) {
   $n$addr$133 = $n$addr$0$lcssa52;
   $w$034 = $s$0$lcssa53;
   while (1) {
    $xor = HEAP32[$w$034 >> 2] ^ $mul;
    if (($xor & -2139062144 ^ -2139062144) & $xor + -16843009 | 0) {
     $$in = $w$034;
     $n$addr$1$lcssa55 = $n$addr$133;
     break L13;
    }
    $incdec$ptr21 = $w$034 + 4 | 0;
    $sub22 = $n$addr$133 + -4 | 0;
    if ($sub22 >>> 0 > 3) {
     $n$addr$133 = $sub22;
     $w$034 = $incdec$ptr21;
    } else {
     $n$addr$1$lcssa = $sub22;
     $w$0$lcssa = $incdec$ptr21;
     label = 11;
     break;
    }
   }
  } else {
   $n$addr$1$lcssa = $n$addr$0$lcssa52;
   $w$0$lcssa = $s$0$lcssa53;
   label = 11;
  } while (0);
  if ((label | 0) == 11) if (!$n$addr$1$lcssa) {
   label = 16;
   break;
  } else {
   $$in = $w$0$lcssa;
   $n$addr$1$lcssa55 = $n$addr$1$lcssa;
  }
  $n$addr$227 = $n$addr$1$lcssa55;
  $s$128 = $$in;
  while (1) {
   if ((HEAP8[$s$128 >> 0] | 0) == $5 << 24 >> 24) {
    $8 = $s$128;
    break L8;
   }
   $n$addr$227 = $n$addr$227 + -1 | 0;
   if (!$n$addr$227) {
    label = 16;
    break;
   } else $s$128 = $s$128 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 16) $8 = 0;
 return $8 | 0;
}

function _GifMakePalette($lastFrame, $nextFrame, $width, $height, $bitDepth, $buildForDither, $pPal) {
 $lastFrame = $lastFrame | 0;
 $nextFrame = $nextFrame | 0;
 $width = $width | 0;
 $height = $height | 0;
 $bitDepth = $bitDepth | 0;
 $buildForDither = $buildForDither | 0;
 $pPal = $pPal | 0;
 var $bitDepth$addr = 0, $buildForDither$addr = 0, $destroyableImage = 0, $height$addr = 0, $imageSize = 0, $lastElt = 0, $lastFrame$addr = 0, $nextFrame$addr = 0, $numPixels = 0, $pPal$addr = 0, $splitDist = 0, $splitElt = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $lastFrame$addr = sp + 44 | 0;
 $nextFrame$addr = sp + 40 | 0;
 $width$addr = sp + 36 | 0;
 $height$addr = sp + 32 | 0;
 $bitDepth$addr = sp + 28 | 0;
 $buildForDither$addr = sp + 48 | 0;
 $pPal$addr = sp + 24 | 0;
 $imageSize = sp + 20 | 0;
 $destroyableImage = sp + 16 | 0;
 $numPixels = sp + 12 | 0;
 $lastElt = sp + 8 | 0;
 $splitElt = sp + 4 | 0;
 $splitDist = sp;
 HEAP32[$lastFrame$addr >> 2] = $lastFrame;
 HEAP32[$nextFrame$addr >> 2] = $nextFrame;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$bitDepth$addr >> 2] = $bitDepth;
 HEAP8[$buildForDither$addr >> 0] = $buildForDither & 1;
 HEAP32[$pPal$addr >> 2] = $pPal;
 HEAP32[HEAP32[$pPal$addr >> 2] >> 2] = HEAP32[$bitDepth$addr >> 2];
 HEAP32[$imageSize >> 2] = (Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0) << 2;
 HEAP32[$destroyableImage >> 2] = _malloc(HEAP32[$imageSize >> 2] | 0) | 0;
 _memcpy(HEAP32[$destroyableImage >> 2] | 0, HEAP32[$nextFrame$addr >> 2] | 0, HEAP32[$imageSize >> 2] | 0) | 0;
 HEAP32[$numPixels >> 2] = Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0;
 if (HEAP32[$lastFrame$addr >> 2] | 0) HEAP32[$numPixels >> 2] = _GifPickChangedPixels(HEAP32[$lastFrame$addr >> 2] | 0, HEAP32[$destroyableImage >> 2] | 0, HEAP32[$numPixels >> 2] | 0) | 0;
 HEAP32[$lastElt >> 2] = 1 << HEAP32[$bitDepth$addr >> 2];
 HEAP32[$splitElt >> 2] = (HEAP32[$lastElt >> 2] | 0) / 2 | 0;
 HEAP32[$splitDist >> 2] = (HEAP32[$splitElt >> 2] | 0) / 2 | 0;
 _GifSplitPalette(HEAP32[$destroyableImage >> 2] | 0, HEAP32[$numPixels >> 2] | 0, 1, HEAP32[$lastElt >> 2] | 0, HEAP32[$splitElt >> 2] | 0, HEAP32[$splitDist >> 2] | 0, 1, HEAP8[$buildForDither$addr >> 0] & 1, HEAP32[$pPal$addr >> 2] | 0);
 _free(HEAP32[$destroyableImage >> 2] | 0);
 HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 1027 + (1 << (HEAP32[$bitDepth$addr >> 2] | 0) - 1) >> 0] = 0;
 HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 772 + (1 << (HEAP32[$bitDepth$addr >> 2] | 0) - 1) >> 0] = 0;
 HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 516 >> 0] = 0;
 HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 260 >> 0] = 0;
 HEAP8[(HEAP32[$pPal$addr >> 2] | 0) + 4 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function _pop_arg($arg, $type, $ap, $pop_arg_long_double) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $102 = 0, $103 = 0.0, $12 = 0, $13 = 0, $16 = 0, $25 = 0, $26 = 0, $27 = 0, $36 = 0, $37 = 0, $39 = 0, $42 = 0, $43 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $6 = 0, $66 = 0, $67 = 0, $68 = 0, $77 = 0, $78 = 0, $79 = 0, $82 = 0, $91 = 0, $92 = 0, $93 = 0;
 L1 : do if ($type >>> 0 <= 20) do switch ($type | 0) {
 case 9:
  {
   $5 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $6 = HEAP32[$5 >> 2] | 0;
   HEAP32[$ap >> 2] = $5 + 4;
   HEAP32[$arg >> 2] = $6;
   break L1;
   break;
  }
 case 10:
  {
   $12 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $13 = HEAP32[$12 >> 2] | 0;
   HEAP32[$ap >> 2] = $12 + 4;
   $16 = $arg;
   HEAP32[$16 >> 2] = $13;
   HEAP32[$16 + 4 >> 2] = (($13 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $25 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $26 = HEAP32[$25 >> 2] | 0;
   HEAP32[$ap >> 2] = $25 + 4;
   $27 = $arg;
   HEAP32[$27 >> 2] = $26;
   HEAP32[$27 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $36 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $37 = $36;
   $39 = HEAP32[$37 >> 2] | 0;
   $42 = HEAP32[$37 + 4 >> 2] | 0;
   HEAP32[$ap >> 2] = $36 + 8;
   $43 = $arg;
   HEAP32[$43 >> 2] = $39;
   HEAP32[$43 + 4 >> 2] = $42;
   break L1;
   break;
  }
 case 13:
  {
   $52 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $53 = HEAP32[$52 >> 2] | 0;
   HEAP32[$ap >> 2] = $52 + 4;
   $54 = ($53 & 65535) << 16 >> 16;
   $57 = $arg;
   HEAP32[$57 >> 2] = $54;
   HEAP32[$57 + 4 >> 2] = (($54 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $66 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $67 = HEAP32[$66 >> 2] | 0;
   HEAP32[$ap >> 2] = $66 + 4;
   $68 = $arg;
   HEAP32[$68 >> 2] = $67 & 65535;
   HEAP32[$68 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $77 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $78 = HEAP32[$77 >> 2] | 0;
   HEAP32[$ap >> 2] = $77 + 4;
   $79 = ($78 & 255) << 24 >> 24;
   $82 = $arg;
   HEAP32[$82 >> 2] = $79;
   HEAP32[$82 + 4 >> 2] = (($79 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $91 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $92 = HEAP32[$91 >> 2] | 0;
   HEAP32[$ap >> 2] = $91 + 4;
   $93 = $arg;
   HEAP32[$93 >> 2] = $92 & 255;
   HEAP32[$93 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $102 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $103 = +HEAPF64[$102 >> 3];
   HEAP32[$ap >> 2] = $102 + 8;
   HEAPF64[$arg >> 3] = $103;
   break L1;
   break;
  }
 case 18:
  {
   FUNCTION_TABLE_vii[$pop_arg_long_double & 63]($arg, $ap);
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _KeyCallback($window, $key, $scancode, $action, $mods) {
 $window = $window | 0;
 $key = $key | 0;
 $scancode = $scancode | 0;
 $action = $action | 0;
 $mods = $mods | 0;
 var $10 = 0, $11 = 0, $action$addr = 0, $call11 = 0, $call9 = 0, $key$addr = 0, $mods$addr = 0, $path = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer5 = 0, $window$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(592);
 $vararg_buffer20 = sp + 568 | 0;
 $vararg_buffer17 = sp + 560 | 0;
 $vararg_buffer14 = sp + 552 | 0;
 $vararg_buffer11 = sp + 544 | 0;
 $vararg_buffer5 = sp + 528 | 0;
 $vararg_buffer2 = sp + 520 | 0;
 $vararg_buffer = sp + 512 | 0;
 $window$addr = sp + 588 | 0;
 $key$addr = sp + 584 | 0;
 $action$addr = sp + 576 | 0;
 $mods$addr = sp + 572 | 0;
 $path = sp;
 HEAP32[$window$addr >> 2] = $window;
 HEAP32[$key$addr >> 2] = $key;
 HEAP32[sp + 580 >> 2] = $scancode;
 HEAP32[$action$addr >> 2] = $action;
 HEAP32[$mods$addr >> 2] = $mods;
 if ((HEAP32[$key$addr >> 2] | 0) == 256 & (HEAP32[$action$addr >> 2] | 0) == 1) {
  _glfwSetWindowShouldClose(HEAP32[$window$addr >> 2] | 0, 1);
  STACKTOP = sp;
  return;
 }
 if (!((HEAP32[$key$addr >> 2] | 0) == 301 & (HEAP32[$action$addr >> 2] | 0) == 1)) {
  HEAP8[21056 + (HEAP32[$key$addr >> 2] | 0) >> 0] = HEAP32[$action$addr >> 2];
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$mods$addr >> 2] | 0) != 2) {
  HEAP32[$vararg_buffer20 >> 2] = HEAP32[7555];
  _TakeScreenshot(_TextFormat(11829, $vararg_buffer20) | 0);
  HEAP32[7555] = (HEAP32[7555] | 0) + 1;
  STACKTOP = sp;
  return;
 }
 if (HEAP8[30901] & 1) {
  _GifEnd() | 0;
  HEAP8[30901] = 0;
  HEAP32[$vararg_buffer >> 2] = (HEAP32[7555] | 0) - 1;
  $call9 = _TextFormat(11696, $vararg_buffer) | 0;
  HEAP32[$vararg_buffer2 >> 2] = (HEAP32[7555] | 0) - 1;
  $call11 = _TextFormat(11696, $vararg_buffer2) | 0;
  HEAP32[$vararg_buffer5 >> 2] = $call9;
  HEAP32[$vararg_buffer5 + 4 >> 2] = $call11;
  _emscripten_run_script(_TextFormat(11714, $vararg_buffer5) | 0);
  _TraceLog(3, 11749, sp + 536 | 0);
  STACKTOP = sp;
  return;
 } else {
  HEAP8[30901] = 1;
  HEAP32[7556] = 0;
  _memset($path | 0, 0, 512) | 0;
  HEAP32[$vararg_buffer11 >> 2] = HEAP32[7555];
  _strcpy($path, _TextFormat(11776, $vararg_buffer11) | 0) | 0;
  $10 = HEAP32[7525] | 0;
  $11 = HEAP32[7526] | 0;
  _GifBegin($path, $10, $11, ~~Math_fround(Math_fround(_GetFrameTime()) * Math_fround(10.0)), 8, 0) | 0;
  HEAP32[7555] = (HEAP32[7555] | 0) + 1;
  HEAP32[$vararg_buffer14 >> 2] = HEAP32[7555];
  HEAP32[$vararg_buffer17 >> 2] = _TextFormat(11696, $vararg_buffer14) | 0;
  _TraceLog(3, 11796, $vararg_buffer17);
  STACKTOP = sp;
  return;
 }
}

function _ImageResize($image, $newWidth, $newHeight) {
 $image = $image | 0;
 $newWidth = $newWidth | 0;
 $newHeight = $newHeight | 0;
 var $$byval_copy1 = 0, $19 = 0, $20 = 0, $6 = 0, $format = 0, $image$addr = 0, $newHeight$addr = 0, $newWidth$addr = 0, $output = 0, $pixels = 0, $tmp = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $$byval_copy1 = sp + 44 | 0;
 $image$addr = sp + 40 | 0;
 $newWidth$addr = sp + 36 | 0;
 $newHeight$addr = sp + 32 | 0;
 $pixels = sp + 28 | 0;
 $output = sp + 24 | 0;
 $format = sp + 20 | 0;
 $tmp = sp;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$newWidth$addr >> 2] = $newWidth;
 HEAP32[$newHeight$addr >> 2] = $newHeight;
 if (!(HEAP32[HEAP32[$image$addr >> 2] >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$image$addr >> 2] | 0) + 8 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $6 = HEAP32[$image$addr >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
 HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
 HEAP32[$$byval_copy1 + 12 >> 2] = HEAP32[$6 + 12 >> 2];
 HEAP32[$$byval_copy1 + 16 >> 2] = HEAP32[$6 + 16 >> 2];
 HEAP32[$pixels >> 2] = _GetImageData($$byval_copy1) | 0;
 HEAP32[$output >> 2] = _malloc((Math_imul(HEAP32[$newWidth$addr >> 2] | 0, HEAP32[$newHeight$addr >> 2] | 0) | 0) << 2) | 0;
 CSE$0 = HEAP32[$image$addr >> 2] | 0;
 _stbir_resize_uint8(HEAP32[$pixels >> 2] | 0, HEAP32[CSE$0 + 4 >> 2] | 0, HEAP32[CSE$0 + 8 >> 2] | 0, 0, HEAP32[$output >> 2] | 0, HEAP32[$newWidth$addr >> 2] | 0, HEAP32[$newHeight$addr >> 2] | 0, 0, 4) | 0;
 HEAP32[$format >> 2] = HEAP32[(HEAP32[$image$addr >> 2] | 0) + 16 >> 2];
 $19 = HEAP32[$image$addr >> 2] | 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
 HEAP32[$$byval_copy1 + 8 >> 2] = HEAP32[$19 + 8 >> 2];
 HEAP32[$$byval_copy1 + 12 >> 2] = HEAP32[$19 + 12 >> 2];
 HEAP32[$$byval_copy1 + 16 >> 2] = HEAP32[$19 + 16 >> 2];
 _UnloadImage($$byval_copy1);
 $20 = HEAP32[$image$addr >> 2] | 0;
 _LoadImageEx($tmp, HEAP32[$output >> 2] | 0, HEAP32[$newWidth$addr >> 2] | 0, HEAP32[$newHeight$addr >> 2] | 0);
 HEAP32[$20 >> 2] = HEAP32[$tmp >> 2];
 HEAP32[$20 + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
 HEAP32[$20 + 8 >> 2] = HEAP32[$tmp + 8 >> 2];
 HEAP32[$20 + 12 >> 2] = HEAP32[$tmp + 12 >> 2];
 HEAP32[$20 + 16 >> 2] = HEAP32[$tmp + 16 >> 2];
 _ImageFormat(HEAP32[$image$addr >> 2] | 0, HEAP32[$format >> 2] | 0);
 _free(HEAP32[$output >> 2] | 0);
 _free(HEAP32[$pixels >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _SetStereoView($eye, $matProjection, $matModelView) {
 $eye = $eye | 0;
 $matProjection = $matProjection | 0;
 $matModelView = $matModelView | 0;
 var $arrayidx = 0, $div = 0, $eye$addr = 0, $eyeModelView = 0, $eyeProjection = 0, $eyeProjection$byval_copy = 0, $matModelView$byval_copy = 0, $tmp = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 $eyeProjection$byval_copy = sp + 264 | 0;
 $matModelView$byval_copy = sp + 128 | 0;
 $eye$addr = sp + 256 | 0;
 $eyeProjection = sp + 192 | 0;
 $eyeModelView = sp + 64 | 0;
 $tmp = sp;
 HEAP32[$eye$addr >> 2] = $eye;
 dest = $eyeProjection;
 src = $matProjection;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $eyeModelView;
 src = $matModelView;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $div = (Math_imul(HEAP32[$eye$addr >> 2] | 0, HEAP32[7420] | 0) | 0) / 2 | 0;
 _rlViewport($div, 0, (HEAP32[7420] | 0) / 2 | 0, HEAP32[7421] | 0);
 $arrayidx = 29824 + (HEAP32[$eye$addr >> 2] << 6) | 0;
 dest = $matModelView$byval_copy;
 src = $matModelView;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $eyeProjection$byval_copy;
 src = $arrayidx;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixMultiply($tmp, $matModelView$byval_copy, $eyeProjection$byval_copy);
 dest = $eyeModelView;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $eyeProjection;
 src = 29696 + (HEAP32[$eye$addr >> 2] << 6) | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $eyeProjection$byval_copy;
 src = $eyeModelView;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _SetMatrixModelview($eyeProjection$byval_copy);
 dest = $eyeProjection$byval_copy;
 src = $eyeProjection;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _SetMatrixProjection($eyeProjection$byval_copy);
 STACKTOP = sp;
 return;
}

function _EndDrawing() {
 var $$compoundliteral = 0, $$compoundliteral7 = 0, $$compoundliteral7$byval_copy = 0, $screenData = 0, $sub = 0, $sub6 = 0, $waitTime = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $$compoundliteral7$byval_copy = sp + 20 | 0;
 $screenData = sp + 8 | 0;
 $$compoundliteral = sp + 16 | 0;
 $$compoundliteral7 = sp + 12 | 0;
 $waitTime = sp;
 _rlglDraw();
 if (HEAP8[30901] & 1) {
  HEAP32[7556] = (HEAP32[7556] | 0) + 1;
  if (!((HEAP32[7556] | 0) % 10 | 0)) {
   HEAP32[$screenData >> 2] = _rlReadScreenPixels(HEAP32[7525] | 0, HEAP32[7526] | 0) | 0;
   _GifWriteFrame(HEAP32[$screenData >> 2] | 0, HEAP32[7525] | 0, HEAP32[7526] | 0, 10, 8, 0) | 0;
   _free(HEAP32[$screenData >> 2] | 0);
  }
  if ((((HEAP32[7556] | 0) / 15 | 0 | 0) % 2 | 0 | 0) == 1) {
   $sub = (HEAP32[7526] | 0) - 20 | 0;
   HEAP8[$$compoundliteral >> 0] = -26;
   HEAP8[$$compoundliteral + 1 >> 0] = 41;
   HEAP8[$$compoundliteral + 2 >> 0] = 55;
   HEAP8[$$compoundliteral + 3 >> 0] = -1;
   HEAP8[$$compoundliteral7$byval_copy >> 0] = HEAP8[$$compoundliteral >> 0] | 0;
   HEAP8[$$compoundliteral7$byval_copy + 1 >> 0] = HEAP8[$$compoundliteral + 1 >> 0] | 0;
   HEAP8[$$compoundliteral7$byval_copy + 2 >> 0] = HEAP8[$$compoundliteral + 2 >> 0] | 0;
   HEAP8[$$compoundliteral7$byval_copy + 3 >> 0] = HEAP8[$$compoundliteral + 3 >> 0] | 0;
   _DrawCircle(30, $sub, Math_fround(10.0), $$compoundliteral7$byval_copy);
   $sub6 = (HEAP32[7526] | 0) - 25 | 0;
   HEAP8[$$compoundliteral7 >> 0] = -66;
   HEAP8[$$compoundliteral7 + 1 >> 0] = 33;
   HEAP8[$$compoundliteral7 + 2 >> 0] = 55;
   HEAP8[$$compoundliteral7 + 3 >> 0] = -1;
   HEAP8[$$compoundliteral7$byval_copy >> 0] = HEAP8[$$compoundliteral7 >> 0] | 0;
   HEAP8[$$compoundliteral7$byval_copy + 1 >> 0] = HEAP8[$$compoundliteral7 + 1 >> 0] | 0;
   HEAP8[$$compoundliteral7$byval_copy + 2 >> 0] = HEAP8[$$compoundliteral7 + 2 >> 0] | 0;
   HEAP8[$$compoundliteral7$byval_copy + 3 >> 0] = HEAP8[$$compoundliteral7 + 3 >> 0] | 0;
   _DrawText(12119, 50, $sub6, 10, $$compoundliteral7$byval_copy);
  }
  _rlglDraw();
 }
 _SwapBuffers();
 _PollInputEvents();
 HEAPF64[3678] = +_GetTime();
 HEAPF64[3680] = +HEAPF64[3678] - +HEAPF64[3676];
 HEAPF64[3676] = +HEAPF64[3678];
 HEAPF64[3677] = +HEAPF64[3679] + +HEAPF64[3680];
 if (!(+HEAPF64[3677] < 0.0)) {
  STACKTOP = sp;
  return;
 }
 _Wait(Math_fround(Math_fround(0.0 - +HEAPF64[3677]) * Math_fround(1.0e3)));
 HEAPF64[3678] = +_GetTime();
 HEAPF64[$waitTime >> 3] = +HEAPF64[3678] - +HEAPF64[3676];
 HEAPF64[3676] = +HEAPF64[3678];
 HEAPF64[3677] = +HEAPF64[3677] + +HEAPF64[$waitTime >> 3];
 STACKTOP = sp;
 return;
}

function _LoadShaderProgram($vShaderId, $fShaderId) {
 $vShaderId = $vShaderId | 0;
 $fShaderId = $fShaderId | 0;
 var $13 = 0, $15 = 0, $21 = 0, $fShaderId$addr = 0, $length = 0, $maxLength = 0, $program = 0, $saved_stack = 0, $success = 0, $vShaderId$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vla = 0, $vla$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $vShaderId$addr = sp + 44 | 0;
 $fShaderId$addr = sp + 40 | 0;
 $program = sp + 36 | 0;
 $success = sp + 32 | 0;
 $maxLength = sp + 28 | 0;
 $length = sp + 24 | 0;
 $saved_stack = sp + 20 | 0;
 HEAP32[$vShaderId$addr >> 2] = $vShaderId;
 HEAP32[$fShaderId$addr >> 2] = $fShaderId;
 HEAP32[$program >> 2] = 0;
 HEAP32[$success >> 2] = 0;
 HEAP32[$program >> 2] = _glCreateProgram() | 0;
 _glAttachShader(HEAP32[$program >> 2] | 0, HEAP32[$vShaderId$addr >> 2] | 0);
 _glAttachShader(HEAP32[$program >> 2] | 0, HEAP32[$fShaderId$addr >> 2] | 0);
 _glBindAttribLocation(HEAP32[$program >> 2] | 0, 0, 10418);
 _glBindAttribLocation(HEAP32[$program >> 2] | 0, 1, 10433);
 _glBindAttribLocation(HEAP32[$program >> 2] | 0, 2, 10532);
 _glBindAttribLocation(HEAP32[$program >> 2] | 0, 3, 10448);
 _glBindAttribLocation(HEAP32[$program >> 2] | 0, 4, 10545);
 _glBindAttribLocation(HEAP32[$program >> 2] | 0, 5, 10559);
 _glLinkProgram(HEAP32[$program >> 2] | 0);
 _glGetProgramiv(HEAP32[$program >> 2] | 0, 35714, $success | 0);
 $13 = HEAP32[$program >> 2] | 0;
 if (!(HEAP32[$success >> 2] | 0)) {
  HEAP32[$vararg_buffer >> 2] = $13;
  _TraceLog(4, 10575, $vararg_buffer);
  HEAP32[$maxLength >> 2] = 0;
  _glGetProgramiv(HEAP32[$program >> 2] | 0, 35716, $maxLength | 0);
  $15 = HEAP32[$maxLength >> 2] | 0;
  HEAP32[$saved_stack >> 2] = _llvm_stacksave() | 0;
  $vla$alloca_mul = $15;
  $vla = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
  _glGetProgramInfoLog(HEAP32[$program >> 2] | 0, HEAP32[$maxLength >> 2] | 0, $length | 0, $vla | 0);
  HEAP32[$vararg_buffer1 >> 2] = $vla;
  _TraceLog(3, 10621, $vararg_buffer1);
  _glDeleteProgram(HEAP32[$program >> 2] | 0);
  HEAP32[$program >> 2] = 0;
  _llvm_stackrestore(HEAP32[$saved_stack >> 2] | 0);
  $21 = HEAP32[$program >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 } else {
  HEAP32[$vararg_buffer4 >> 2] = $13;
  _TraceLog(3, 10624, $vararg_buffer4);
  $21 = HEAP32[$program >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 return 0;
}

function _rlVertex3f($x, $y, $z) {
 $x = Math_fround($x);
 $y = Math_fround($y);
 $z = Math_fround($z);
 var $11 = f0, $16 = f0, $6 = f0, $arrayidx25 = 0, $tmp = 0, $transformMatrix$byval_copy = 0, $vararg_buffer = 0, $vec = 0, $vec$byval_copy = 0, $vertexCount = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $transformMatrix$byval_copy = sp + 56 | 0;
 $vec$byval_copy = sp + 40 | 0;
 $vararg_buffer = sp;
 $x$addr = sp + 36 | 0;
 $y$addr = sp + 32 | 0;
 $z$addr = sp + 28 | 0;
 $vec = sp + 16 | 0;
 $tmp = sp + 4 | 0;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAPF32[$z$addr >> 2] = $z;
 HEAPF32[$vec >> 2] = Math_fround(HEAPF32[$x$addr >> 2]);
 HEAPF32[$vec + 4 >> 2] = Math_fround(HEAPF32[$y$addr >> 2]);
 HEAPF32[$vec + 8 >> 2] = Math_fround(HEAPF32[$z$addr >> 2]);
 if (HEAP8[30880] & 1) {
  HEAP32[$vec$byval_copy >> 2] = HEAP32[$vec >> 2];
  HEAP32[$vec$byval_copy + 4 >> 2] = HEAP32[$vec + 4 >> 2];
  HEAP32[$vec$byval_copy + 8 >> 2] = HEAP32[$vec + 8 >> 2];
  dest = $transformMatrix$byval_copy;
  src = 29588;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  _Vector3Transform($tmp, $vec$byval_copy, $transformMatrix$byval_copy);
  HEAP32[$vec >> 2] = HEAP32[$tmp >> 2];
  HEAP32[$vec + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
  HEAP32[$vec + 8 >> 2] = HEAP32[$tmp + 8 >> 2];
 }
 if ((HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) >> 2] | 0) < 8192) {
  $6 = Math_fround(HEAPF32[$vec >> 2]);
  CSE$0 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
  HEAPF32[(HEAP32[CSE$0 + 12 >> 2] | 0) + ((HEAP32[CSE$0 >> 2] | 0) * 3 << 2) >> 2] = $6;
  $11 = Math_fround(HEAPF32[$vec + 4 >> 2]);
  CSE$1 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
  HEAPF32[(HEAP32[CSE$1 + 12 >> 2] | 0) + (((HEAP32[CSE$1 >> 2] | 0) * 3 | 0) + 1 << 2) >> 2] = $11;
  $16 = Math_fround(HEAPF32[$vec + 8 >> 2]);
  CSE$2 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
  HEAPF32[(HEAP32[CSE$2 + 12 >> 2] | 0) + (((HEAP32[CSE$2 >> 2] | 0) * 3 | 0) + 2 << 2) >> 2] = $16;
  $arrayidx25 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
  HEAP32[$arrayidx25 >> 2] = (HEAP32[$arrayidx25 >> 2] | 0) + 1;
  $vertexCount = (HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 4 | 0;
  HEAP32[$vertexCount >> 2] = (HEAP32[$vertexCount >> 2] | 0) + 1;
  STACKTOP = sp;
  return;
 } else {
  _TraceLog(5, 7913, $vararg_buffer);
  STACKTOP = sp;
  return;
 }
}

function _acosf($x) {
 $x = Math_fround($x);
 var $0 = 0, $2 = f0, $and = 0, $call20 = f0, $call30 = f0, $mul = f0, $mul19 = f0, $mul29 = f0, $retval$0 = f0;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $and = $0 & 2147483647;
 if ($and >>> 0 > 1065353215) if (($and | 0) == 1065353216) {
  $retval$0 = ($0 | 0) < 0 ? Math_fround(3.1415925) : Math_fround(0.0);
  return Math_fround($retval$0);
 } else {
  $retval$0 = Math_fround(Math_fround(0.0) / Math_fround($x - $x));
  return Math_fround($retval$0);
 }
 if ($and >>> 0 < 1056964608) {
  if ($and >>> 0 < 847249409) {
   $retval$0 = Math_fround(1.57079625);
   return Math_fround($retval$0);
  }
  $mul = Math_fround($x * $x);
  $retval$0 = Math_fround(Math_fround(1.57079625) - Math_fround($x - Math_fround(Math_fround(7.54978942e-08) - Math_fround(Math_fround(Math_fround($mul * Math_fround(Math_fround($mul * Math_fround(Math_fround(-.0427434221) - Math_fround($mul * Math_fround(.008656363)))) + Math_fround(.166665867))) / Math_fround(Math_fround(1.0) - Math_fround($mul * Math_fround(.706629634)))) * $x))));
  return Math_fround($retval$0);
 }
 if (($0 | 0) < 0) {
  $mul19 = Math_fround(Math_fround($x + Math_fround(1.0)) * Math_fround(.5));
  $call20 = Math_fround(Math_sqrt(Math_fround($mul19)));
  $retval$0 = Math_fround(Math_fround(Math_fround(1.57079625) - Math_fround($call20 + Math_fround(Math_fround(Math_fround(Math_fround($mul19 * Math_fround(Math_fround($mul19 * Math_fround(Math_fround(-.0427434221) - Math_fround($mul19 * Math_fround(.008656363)))) + Math_fround(.166665867))) / Math_fround(Math_fround(1.0) - Math_fround($mul19 * Math_fround(.706629634)))) * $call20) + Math_fround(-7.54978942e-08)))) * Math_fround(2.0));
  return Math_fround($retval$0);
 } else {
  $mul29 = Math_fround(Math_fround(Math_fround(1.0) - $x) * Math_fround(.5));
  $call30 = Math_fround(Math_sqrt(Math_fround($mul29)));
  $2 = (HEAP32[tempDoublePtr >> 2] = (HEAPF32[tempDoublePtr >> 2] = $call30, HEAP32[tempDoublePtr >> 2] | 0) & -4096, Math_fround(HEAPF32[tempDoublePtr >> 2]));
  $retval$0 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($mul29 * Math_fround(Math_fround($mul29 * Math_fround(Math_fround(-.0427434221) - Math_fround($mul29 * Math_fround(.008656363)))) + Math_fround(.166665867))) / Math_fround(Math_fround(1.0) - Math_fround($mul29 * Math_fround(.706629634)))) * $call30) + Math_fround(Math_fround($mul29 - Math_fround($2 * $2)) / Math_fround($call30 + $2))) + $2) * Math_fround(2.0));
  return Math_fround($retval$0);
 }
 return Math_fround(0.0);
}

function _rlRotatef($angleDeg, $x, $y, $z) {
 $angleDeg = Math_fround($angleDeg);
 $x = Math_fround($x);
 $y = Math_fround($y);
 $z = Math_fround($z);
 var $$byval_copy = 0, $4 = 0, $5 = 0, $agg$tmp = 0, $angleDeg$addr = 0, $axis = 0, $matRotation = 0, $matRotation$byval_copy = 0, $mul = f0, $tmp = 0, $tmp4 = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(368);
 $$byval_copy = sp + 296 | 0;
 $matRotation$byval_copy = sp + 232 | 0;
 $angleDeg$addr = sp + 228 | 0;
 $x$addr = sp + 224 | 0;
 $y$addr = sp + 220 | 0;
 $z$addr = sp + 216 | 0;
 $matRotation = sp + 152 | 0;
 $axis = sp + 140 | 0;
 $agg$tmp = sp + 128 | 0;
 $tmp = sp + 64 | 0;
 $tmp4 = sp;
 HEAPF32[$angleDeg$addr >> 2] = $angleDeg;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAPF32[$z$addr >> 2] = $z;
 _MatrixIdentity($matRotation);
 HEAPF32[$axis >> 2] = Math_fround(HEAPF32[$x$addr >> 2]);
 HEAPF32[$axis + 4 >> 2] = Math_fround(HEAPF32[$y$addr >> 2]);
 HEAPF32[$axis + 8 >> 2] = Math_fround(HEAPF32[$z$addr >> 2]);
 HEAP32[$$byval_copy >> 2] = HEAP32[$axis >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$axis + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$axis + 8 >> 2];
 _Vector3Normalize($agg$tmp, $$byval_copy);
 $mul = Math_fround(Math_fround(HEAPF32[$angleDeg$addr >> 2]) * Math_fround(.0174532924));
 HEAP32[$$byval_copy >> 2] = HEAP32[$agg$tmp >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$agg$tmp + 4 >> 2];
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$agg$tmp + 8 >> 2];
 _MatrixRotate($tmp, $$byval_copy, $mul);
 dest = $matRotation;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 CSE$0 = HEAP32[7379] | 0;
 $4 = CSE$0 | 0;
 $5 = CSE$0 | 0;
 dest = $matRotation$byval_copy;
 src = $matRotation;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$byval_copy;
 src = $5;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixMultiply($tmp4, $matRotation$byval_copy, $$byval_copy);
 dest = $4;
 src = $tmp4;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _rlMultMatrixf($matf) {
 $matf = $matf | 0;
 var $$byval_copy = 0, $32 = 0, $mat = 0, $mat$byval_copy = 0, $matf$addr = 0, $tmp = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 $mat$byval_copy = sp + 200 | 0;
 $$byval_copy = sp + 136 | 0;
 $matf$addr = sp + 128 | 0;
 $mat = sp + 64 | 0;
 $tmp = sp;
 HEAP32[$matf$addr >> 2] = $matf;
 HEAPF32[$mat >> 2] = Math_fround(HEAPF32[HEAP32[$matf$addr >> 2] >> 2]);
 HEAPF32[$mat + 4 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 16 >> 2]);
 HEAPF32[$mat + 8 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 32 >> 2]);
 HEAPF32[$mat + 12 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 48 >> 2]);
 HEAPF32[$mat + 16 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 4 >> 2]);
 HEAPF32[$mat + 20 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 20 >> 2]);
 HEAPF32[$mat + 24 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 36 >> 2]);
 HEAPF32[$mat + 28 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 52 >> 2]);
 HEAPF32[$mat + 32 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 8 >> 2]);
 HEAPF32[$mat + 36 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 24 >> 2]);
 HEAPF32[$mat + 40 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 40 >> 2]);
 HEAPF32[$mat + 44 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 56 >> 2]);
 HEAPF32[$mat + 48 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 12 >> 2]);
 HEAPF32[$mat + 52 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 28 >> 2]);
 HEAPF32[$mat + 56 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 44 >> 2]);
 HEAPF32[$mat + 60 >> 2] = Math_fround(HEAPF32[(HEAP32[$matf$addr >> 2] | 0) + 60 >> 2]);
 CSE$0 = HEAP32[7379] | 0;
 $32 = CSE$0 | 0;
 dest = $$byval_copy;
 src = CSE$0 | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $mat$byval_copy;
 src = $mat;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixMultiply($tmp, $$byval_copy, $mat$byval_copy);
 dest = $32;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _ExportImage($image, $fileName) {
 $image = $image | 0;
 $fileName = $fileName | 0;
 var $1 = 0, $6 = 0, $8 = 0, $call1 = 0, $call13 = 0, $call4 = 0, $fileName$addr = 0, $image$byval_copy3 = 0, $imgData = 0, $rawFile = 0, $success = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $image$byval_copy3 = sp + 28 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $fileName$addr = sp + 24 | 0;
 $success = sp + 20 | 0;
 $imgData = sp + 16 | 0;
 $rawFile = sp + 12 | 0;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$success >> 2] = 0;
 HEAP32[$image$byval_copy3 >> 2] = HEAP32[$image >> 2];
 HEAP32[$image$byval_copy3 + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$image$byval_copy3 + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$image$byval_copy3 + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$image$byval_copy3 + 16 >> 2] = HEAP32[$image + 16 >> 2];
 HEAP32[$imgData >> 2] = _GetImageData($image$byval_copy3) | 0;
 $call1 = _IsFileExtension(HEAP32[$fileName$addr >> 2] | 0, 14942) | 0;
 $1 = HEAP32[$fileName$addr >> 2] | 0;
 do if ($call1) HEAP32[$success >> 2] = _stbi_write_png($1, HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0, 4, HEAP32[$imgData >> 2] | 0, HEAP32[$image + 4 >> 2] << 2) | 0; else {
  $call4 = _IsFileExtension($1, 14947) | 0;
  $6 = HEAP32[$fileName$addr >> 2] | 0;
  if ($call4) {
   HEAP32[$image$byval_copy3 >> 2] = HEAP32[$image >> 2];
   HEAP32[$image$byval_copy3 + 4 >> 2] = HEAP32[$image + 4 >> 2];
   HEAP32[$image$byval_copy3 + 8 >> 2] = HEAP32[$image + 8 >> 2];
   HEAP32[$image$byval_copy3 + 12 >> 2] = HEAP32[$image + 12 >> 2];
   HEAP32[$image$byval_copy3 + 16 >> 2] = HEAP32[$image + 16 >> 2];
   HEAP32[$success >> 2] = _SaveKTX($image$byval_copy3, $6) | 0;
   break;
  }
  if (_IsFileExtension($6, 15104) | 0) {
   HEAP32[$rawFile >> 2] = _fopen(HEAP32[$fileName$addr >> 2] | 0, 12224) | 0;
   $8 = HEAP32[$image >> 2] | 0;
   $call13 = _GetPixelDataSize(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0, HEAP32[$image + 16 >> 2] | 0) | 0;
   HEAP32[$success >> 2] = _fwrite($8, $call13, 1, HEAP32[$rawFile >> 2] | 0) | 0;
   _fclose(HEAP32[$rawFile >> 2] | 0) | 0;
  }
 } while (0);
 _free(HEAP32[$imgData >> 2] | 0);
 if (HEAP32[$success >> 2] | 0) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$fileName$addr >> 2];
  _TraceLog(3, 15109, $vararg_buffer);
  STACKTOP = sp;
  return;
 } else {
  _TraceLog(4, 15141, $vararg_buffer1);
  STACKTOP = sp;
  return;
 }
}

function _rlBegin($mode) {
 $mode = $mode | 0;
 var $15 = 0, $arrayidx12 = 0, $arrayidx29 = 0, $arrayidx57 = 0, $cCounter = 0, $cond40 = 0, $mode$addr = 0, $tcCounter = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $mode$addr = sp;
 HEAP32[$mode$addr >> 2] = $mode;
 if ((HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) >> 2] | 0) == (HEAP32[$mode$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 do if ((HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 4 >> 2] | 0) > 0) {
  $arrayidx12 = (HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) | 0;
  do if ((HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) >> 2] | 0) == 1) {
   $15 = HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 4 >> 2] | 0;
   HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 8 >> 2] = (HEAP32[$arrayidx12 + 4 >> 2] | 0) < 4 ? $15 : ($15 | 0) % 4 | 0;
  } else {
   $arrayidx29 = (HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) | 0;
   if ((HEAP32[$arrayidx12 >> 2] | 0) != 4) {
    HEAP32[$arrayidx29 + 8 >> 2] = 0;
    break;
   }
   if ((HEAP32[$arrayidx29 + 4 >> 2] | 0) < 4) $cond40 = 1; else $cond40 = 4 - ((HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 4 >> 2] | 0) % 4 | 0) | 0;
   HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 8 >> 2] = $cond40;
  } while (0);
  if (_rlCheckBufferLimit(HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 8 >> 2] | 0) | 0) {
   _rlglDraw();
   break;
  } else {
   $arrayidx57 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
   HEAP32[$arrayidx57 >> 2] = (HEAP32[$arrayidx57 >> 2] | 0) + (HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 8 >> 2] | 0);
   $cCounter = 20928 + ((HEAP32[7415] | 0) * 48 | 0) + 8 | 0;
   HEAP32[$cCounter >> 2] = (HEAP32[$cCounter >> 2] | 0) + (HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 8 >> 2] | 0);
   $tcCounter = 20928 + ((HEAP32[7415] | 0) * 48 | 0) + 4 | 0;
   HEAP32[$tcCounter >> 2] = (HEAP32[$tcCounter >> 2] | 0) + (HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 8 >> 2] | 0);
   HEAP32[7414] = (HEAP32[7414] | 0) + 1;
   break;
  }
 } while (0);
 if ((HEAP32[7414] | 0) >= 256) _rlglDraw();
 HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) >> 2] = HEAP32[$mode$addr >> 2];
 HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 4 >> 2] = 0;
 HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 12 >> 2] = HEAP32[7416];
 STACKTOP = sp;
 return;
}

function _PollInputEvents() {
 var $13 = 0, $arrayidx53 = 0, $axis = 0, $button = 0, $gamepadState = 0, $i = 0, $i17 = 0, $i4 = 0, $j = 0, $j60 = 0, $k = 0, $numGamepads = 0, $result = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1488 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1488);
 $i = sp + 1484 | 0;
 $i4 = sp + 1480 | 0;
 $numGamepads = sp + 1476 | 0;
 $i17 = sp + 1472 | 0;
 $k = sp + 1468 | 0;
 $gamepadState = sp;
 $result = sp + 1464 | 0;
 $j = sp + 1460 | 0;
 $button = sp + 1456 | 0;
 $j60 = sp + 1452 | 0;
 $axis = sp + 1448 | 0;
 _UpdateGestures();
 HEAP32[7554] = 0;
 _glfwGetCursorPos(HEAP32[7522] | 0, sp + 1440 | 0, sp + 1432 | 0);
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 512) break;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$i4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$i4 >> 2] | 0) >= 3) break;
  CSE$0 = HEAP32[$i4 >> 2] | 0;
  HEAP8[30898 + CSE$0 >> 0] = HEAP8[30895 + CSE$0 >> 0] | 0;
  HEAP32[$i4 >> 2] = (HEAP32[$i4 >> 2] | 0) + 1;
 }
 HEAP32[7553] = 0;
 HEAP32[$numGamepads >> 2] = 0;
 if (!(_emscripten_sample_gamepad_data() | 0)) HEAP32[$numGamepads >> 2] = _emscripten_get_num_gamepads() | 0;
 HEAP32[$i17 >> 2] = 0;
 while (1) {
  if (!((HEAP32[$i17 >> 2] | 0) < (HEAP32[$numGamepads >> 2] | 0) ? (HEAP32[$i17 >> 2] | 0) < 4 : 0)) break;
  HEAP32[$k >> 2] = 0;
  while (1) {
   $13 = HEAP32[$i17 >> 2] | 0;
   if ((HEAP32[$k >> 2] | 0) >= 32) break;
   HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  }
  HEAP32[$result >> 2] = _emscripten_get_gamepad_status($13 | 0, $gamepadState | 0) | 0;
  if (!(HEAP32[$result >> 2] | 0)) {
   HEAP32[$j >> 2] = 0;
   while (1) {
    if (!((HEAP32[$j >> 2] | 0) < (HEAP32[$gamepadState + 12 >> 2] | 0) ? (HEAP32[$j >> 2] | 0) < 32 : 0)) break;
    HEAP32[$button >> 2] = _GetGamepadButton(HEAP32[$j >> 2] | 0) | 0;
    $arrayidx53 = 21568 + (HEAP32[$i17 >> 2] << 5) + (HEAP32[$button >> 2] | 0) | 0;
    if ((HEAP32[$gamepadState + 1040 + (HEAP32[$j >> 2] << 2) >> 2] | 0) == 1) HEAP8[$arrayidx53 >> 0] = 1; else HEAP8[$arrayidx53 >> 0] = 0;
    HEAP32[$j >> 2] = (HEAP32[$j >> 2] | 0) + 1;
   }
   HEAP32[$j60 >> 2] = 0;
   while (1) {
    if (!((HEAP32[$j60 >> 2] | 0) < (HEAP32[$gamepadState + 8 >> 2] | 0) ? (HEAP32[$j60 >> 2] | 0) < 8 : 0)) break;
    HEAP32[$axis >> 2] = _GetGamepadAxis(HEAP32[$j60 >> 2] | 0) | 0;
    HEAP32[$j60 >> 2] = (HEAP32[$j60 >> 2] | 0) + 1;
   }
  }
  HEAP32[$i17 >> 2] = (HEAP32[$i17 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _LoadShaderDefault($agg$result) {
 $agg$result = $agg$result | 0;
 var $9 = 0, $call13 = 0, $call17 = 0, $call21 = 0, $call25 = 0, $call29 = 0, $call9 = 0, $defaultFShaderStr = 0, $defaultVShaderStr = 0, $i = 0, $shader = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $shader = sp + 24 | 0;
 $i = sp + 20 | 0;
 $defaultVShaderStr = sp + 16 | 0;
 $defaultFShaderStr = sp + 12 | 0;
 HEAP32[$shader >> 2] = 0;
 HEAP32[$shader + 4 >> 2] = 0;
 HEAP32[$shader + 4 >> 2] = _calloc(32, 4) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 32) break;
  HEAP32[(HEAP32[$shader + 4 >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = -1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$defaultVShaderStr >> 2] = 9446;
 HEAP32[$defaultFShaderStr >> 2] = 9929;
 HEAP32[7501] = _CompileShader(HEAP32[$defaultVShaderStr >> 2] | 0, 35633) | 0;
 HEAP32[7502] = _CompileShader(HEAP32[$defaultFShaderStr >> 2] | 0, 35632) | 0;
 HEAP32[$shader >> 2] = _LoadShaderProgram(HEAP32[7501] | 0, HEAP32[7502] | 0) | 0;
 $9 = HEAP32[$shader >> 2] | 0;
 if ((HEAP32[$shader >> 2] | 0) >>> 0 > 0) {
  HEAP32[$vararg_buffer >> 2] = $9;
  _TraceLog(3, 10370, $vararg_buffer);
  $call9 = _glGetAttribLocation(HEAP32[$shader >> 2] | 0, 10418) | 0;
  HEAP32[HEAP32[$shader + 4 >> 2] >> 2] = $call9;
  $call13 = _glGetAttribLocation(HEAP32[$shader >> 2] | 0, 10433) | 0;
  HEAP32[(HEAP32[$shader + 4 >> 2] | 0) + 4 >> 2] = $call13;
  $call17 = _glGetAttribLocation(HEAP32[$shader >> 2] | 0, 10448) | 0;
  HEAP32[(HEAP32[$shader + 4 >> 2] | 0) + 20 >> 2] = $call17;
  $call21 = _glGetUniformLocation(HEAP32[$shader >> 2] | 0, 10460) | 0;
  HEAP32[(HEAP32[$shader + 4 >> 2] | 0) + 24 >> 2] = $call21;
  $call25 = _glGetUniformLocation(HEAP32[$shader >> 2] | 0, 10464) | 0;
  HEAP32[(HEAP32[$shader + 4 >> 2] | 0) + 44 >> 2] = $call25;
  $call29 = _glGetUniformLocation(HEAP32[$shader >> 2] | 0, 10475) | 0;
  HEAP32[(HEAP32[$shader + 4 >> 2] | 0) + 56 >> 2] = $call29;
  HEAP32[$agg$result >> 2] = HEAP32[$shader >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$shader + 4 >> 2];
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$vararg_buffer1 >> 2] = $9;
  _TraceLog(4, 10484, $vararg_buffer1);
  HEAP32[$agg$result >> 2] = HEAP32[$shader >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$shader + 4 >> 2];
  STACKTOP = sp;
  return;
 }
}

function _rlEnableTexture($id) {
 $id = $id | 0;
 var $15 = 0, $arrayidx10 = 0, $arrayidx27 = 0, $arrayidx55 = 0, $cCounter = 0, $cond38 = 0, $id$addr = 0, $tcCounter = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $id$addr = sp;
 HEAP32[$id$addr >> 2] = $id;
 if ((HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 12 >> 2] | 0) == (HEAP32[$id$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 do if ((HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 4 >> 2] | 0) > 0) {
  $arrayidx10 = (HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) | 0;
  do if ((HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) >> 2] | 0) == 1) {
   $15 = HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 4 >> 2] | 0;
   HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 8 >> 2] = (HEAP32[$arrayidx10 + 4 >> 2] | 0) < 4 ? $15 : ($15 | 0) % 4 | 0;
  } else {
   $arrayidx27 = (HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) | 0;
   if ((HEAP32[$arrayidx10 >> 2] | 0) != 4) {
    HEAP32[$arrayidx27 + 8 >> 2] = 0;
    break;
   }
   if ((HEAP32[$arrayidx27 + 4 >> 2] | 0) < 4) $cond38 = 1; else $cond38 = 4 - ((HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 4 >> 2] | 0) % 4 | 0) | 0;
   HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 8 >> 2] = $cond38;
  } while (0);
  if (_rlCheckBufferLimit(HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 8 >> 2] | 0) | 0) {
   _rlglDraw();
   break;
  } else {
   $arrayidx55 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
   HEAP32[$arrayidx55 >> 2] = (HEAP32[$arrayidx55 >> 2] | 0) + (HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 8 >> 2] | 0);
   $cCounter = 20928 + ((HEAP32[7415] | 0) * 48 | 0) + 8 | 0;
   HEAP32[$cCounter >> 2] = (HEAP32[$cCounter >> 2] | 0) + (HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 8 >> 2] | 0);
   $tcCounter = 20928 + ((HEAP32[7415] | 0) * 48 | 0) + 4 | 0;
   HEAP32[$tcCounter >> 2] = (HEAP32[$tcCounter >> 2] | 0) + (HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 8 >> 2] | 0);
   HEAP32[7414] = (HEAP32[7414] | 0) + 1;
   break;
  }
 } while (0);
 if ((HEAP32[7414] | 0) >= 256) _rlglDraw();
 HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 12 >> 2] = HEAP32[$id$addr >> 2];
 HEAP32[(HEAP32[7413] | 0) + ((HEAP32[7414] | 0) - 1 << 4) + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _DrawText($text, $posX, $posY, $fontSize, $color) {
 $text = $text | 0;
 $posX = $posX | 0;
 $posY = $posY | 0;
 $fontSize = $fontSize | 0;
 $color = $color | 0;
 var $8 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $color$byval_copy = 0, $conv5 = f0, $conv6 = f0, $defaultFontSize = 0, $fontSize$addr = 0, $posX$addr = 0, $posY$addr = 0, $position = 0, $position$byval_copy = 0, $spacing = 0, $text$addr = 0, $tmp = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $color$byval_copy = sp + 152 | 0;
 $position$byval_copy = sp + 144 | 0;
 $agg$tmp$byval_copy = sp + 108 | 0;
 $text$addr = sp + 104 | 0;
 $posX$addr = sp + 100 | 0;
 $posY$addr = sp + 96 | 0;
 $fontSize$addr = sp + 92 | 0;
 $tmp = sp + 56 | 0;
 $position = sp + 48 | 0;
 $defaultFontSize = sp + 40 | 0;
 $spacing = sp + 36 | 0;
 $agg$tmp = sp;
 HEAP32[$text$addr >> 2] = $text;
 HEAP32[$posX$addr >> 2] = $posX;
 HEAP32[$posY$addr >> 2] = $posY;
 HEAP32[$fontSize$addr >> 2] = $fontSize;
 _GetFontDefault($tmp);
 if (!(HEAP32[$tmp + 8 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAPF32[$position >> 2] = Math_fround(HEAP32[$posX$addr >> 2] | 0);
 HEAPF32[$position + 4 >> 2] = Math_fround(HEAP32[$posY$addr >> 2] | 0);
 HEAP32[$defaultFontSize >> 2] = 10;
 if ((HEAP32[$fontSize$addr >> 2] | 0) < (HEAP32[$defaultFontSize >> 2] | 0)) HEAP32[$fontSize$addr >> 2] = HEAP32[$defaultFontSize >> 2];
 HEAP32[$spacing >> 2] = (HEAP32[$fontSize$addr >> 2] | 0) / (HEAP32[$defaultFontSize >> 2] | 0) | 0;
 _GetFontDefault($agg$tmp);
 $8 = HEAP32[$text$addr >> 2] | 0;
 $conv5 = Math_fround(HEAP32[$fontSize$addr >> 2] | 0);
 $conv6 = Math_fround(HEAP32[$spacing >> 2] | 0);
 dest = $agg$tmp$byval_copy;
 src = $agg$tmp;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$position$byval_copy >> 2] = HEAP32[$position >> 2];
 HEAP32[$position$byval_copy + 4 >> 2] = HEAP32[$position + 4 >> 2];
 HEAP8[$color$byval_copy >> 0] = HEAP8[$color >> 0] | 0;
 HEAP8[$color$byval_copy + 1 >> 0] = HEAP8[$color + 1 >> 0] | 0;
 HEAP8[$color$byval_copy + 2 >> 0] = HEAP8[$color + 2 >> 0] | 0;
 HEAP8[$color$byval_copy + 3 >> 0] = HEAP8[$color + 3 >> 0] | 0;
 _DrawTextEx($agg$tmp$byval_copy, $8, $position$byval_copy, $conv5, $conv6, $color$byval_copy);
 STACKTOP = sp;
 return;
}

function _atanf($x) {
 $x = Math_fround($x);
 var $0 = 0, $1 = f0, $and = 0, $call28 = f0, $cond = f0, $id$0 = 0, $mul55 = f0, $mul56 = f0, $mul61 = f0, $mul64 = f0, $mul73 = f0, $retval$0 = f0, $shr = 0, $sub77 = f0, $sub80 = f0, $x$addr$0 = f0;
 $0 = (HEAPF32[tempDoublePtr >> 2] = $x, HEAP32[tempDoublePtr >> 2] | 0);
 $shr = $0 >>> 31;
 $and = $0 & 2147483647;
 if ($and >>> 0 > 1283457023) {
  $cond = ($shr | 0) == 0 ? Math_fround(1.57079625) : Math_fround(-1.57079625);
  return Math_fround($and >>> 0 > 2139095040 ? $x : $cond);
 }
 do if ($and >>> 0 < 1054867456) if ($and >>> 0 < 964689920) {
  $retval$0 = $x;
  return Math_fround($retval$0);
 } else {
  $id$0 = -1;
  $x$addr$0 = $x;
 } else {
  $call28 = Math_fround(Math_abs(Math_fround($x)));
  if ($and >>> 0 < 1066926080) if ($and >>> 0 < 1060110336) {
   $id$0 = 0;
   $x$addr$0 = Math_fround(Math_fround(Math_fround($call28 * Math_fround(2.0)) + Math_fround(-1.0)) / Math_fround($call28 + Math_fround(2.0)));
   break;
  } else {
   $id$0 = 1;
   $x$addr$0 = Math_fround(Math_fround($call28 + Math_fround(-1.0)) / Math_fround($call28 + Math_fround(1.0)));
   break;
  } else if ($and >>> 0 < 1075576832) {
   $id$0 = 2;
   $x$addr$0 = Math_fround(Math_fround($call28 + Math_fround(-1.5)) / Math_fround(Math_fround($call28 * Math_fround(1.5)) + Math_fround(1.0)));
   break;
  } else {
   $id$0 = 3;
   $x$addr$0 = Math_fround(Math_fround(-1.0) / $call28);
   break;
  }
 } while (0);
 $mul55 = Math_fround($x$addr$0 * $x$addr$0);
 $mul56 = Math_fround($mul55 * $mul55);
 $mul61 = Math_fround($mul55 * Math_fround(Math_fround($mul56 * Math_fround(Math_fround($mul56 * Math_fround(.0616876073)) + Math_fround(.142536357))) + Math_fround(.333333284)));
 $mul64 = Math_fround($mul56 * Math_fround(Math_fround(-.199991584) - Math_fround($mul56 * Math_fround(.106480174))));
 if (($id$0 | 0) < 0) {
  $retval$0 = Math_fround($x$addr$0 - Math_fround($x$addr$0 * Math_fround($mul64 + $mul61)));
  return Math_fround($retval$0);
 } else {
  $1 = Math_fround(HEAPF32[7248 + ($id$0 << 2) >> 2]);
  $mul73 = Math_fround($x$addr$0 * Math_fround($mul64 + $mul61));
  $sub77 = Math_fround($1 - Math_fround(Math_fround($mul73 - Math_fround(HEAPF32[7264 + ($id$0 << 2) >> 2])) - $x$addr$0));
  $sub80 = Math_fround(-$sub77);
  $retval$0 = ($shr | 0) == 0 ? $sub77 : $sub80;
  return Math_fround($retval$0);
 }
 return Math_fround(0.0);
}

function _GifSwapPixels($image, $pixA, $pixB) {
 $image = $image | 0;
 $pixA = $pixA | 0;
 $pixB = $pixB | 0;
 var $aA = 0, $aB = 0, $bA = 0, $bB = 0, $gA = 0, $gB = 0, $image$addr = 0, $pixA$addr = 0, $pixB$addr = 0, $rA = 0, $rB = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $image$addr = sp + 8 | 0;
 $pixA$addr = sp + 4 | 0;
 $pixB$addr = sp;
 $rA = sp + 19 | 0;
 $gA = sp + 18 | 0;
 $bA = sp + 17 | 0;
 $aA = sp + 16 | 0;
 $rB = sp + 15 | 0;
 $gB = sp + 14 | 0;
 $bB = sp + 13 | 0;
 $aB = sp + 12 | 0;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$pixA$addr >> 2] = $pixA;
 HEAP32[$pixB$addr >> 2] = $pixB;
 HEAP8[$rA >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + (HEAP32[$pixA$addr >> 2] << 2) >> 0] | 0;
 HEAP8[$gA >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 1) >> 0] | 0;
 HEAP8[$bA >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 2) >> 0] | 0;
 HEAP8[$aA >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 3) >> 0] | 0;
 HEAP8[$rB >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + (HEAP32[$pixB$addr >> 2] << 2) >> 0] | 0;
 HEAP8[$gB >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixB$addr >> 2] << 2) + 1) >> 0] | 0;
 HEAP8[$bB >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixB$addr >> 2] << 2) + 2) >> 0] | 0;
 HEAP8[$aB >> 0] = HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 3) >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + (HEAP32[$pixA$addr >> 2] << 2) >> 0] = HEAP8[$rB >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 1) >> 0] = HEAP8[$gB >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 2) >> 0] = HEAP8[$bB >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixA$addr >> 2] << 2) + 3) >> 0] = HEAP8[$aB >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + (HEAP32[$pixB$addr >> 2] << 2) >> 0] = HEAP8[$rA >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixB$addr >> 2] << 2) + 1) >> 0] = HEAP8[$gA >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixB$addr >> 2] << 2) + 2) >> 0] = HEAP8[$bA >> 0] | 0;
 HEAP8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pixB$addr >> 2] << 2) + 3) >> 0] = HEAP8[$aA >> 0] | 0;
 STACKTOP = sp;
 return;
}

function ___stpcpy($d, $s) {
 $d = $d | 0;
 $s = $s | 0;
 var $0 = 0, $10 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $d$addr$0$lcssa = 0, $d$addr$037 = 0, $d$addr$1 = 0, $d$addr$224 = 0, $incdec$ptr = 0, $incdec$ptr11 = 0, $incdec$ptr12 = 0, $incdec$ptr20 = 0, $incdec$ptr5 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$038 = 0, $s$addr$1 = 0, $s$addr$225 = 0, $wd$0$lcssa = 0, $wd$031 = 0, $ws$0$lcssa = 0, $ws$032 = 0, label = 0;
 label = 0;
 $0 = $s;
 L1 : do if (!(($0 ^ $d) & 3)) {
  if (!($0 & 3)) {
   $d$addr$0$lcssa = $d;
   $s$addr$0$lcssa = $s;
  } else {
   $d$addr$037 = $d;
   $s$addr$038 = $s;
   while (1) {
    $4 = HEAP8[$s$addr$038 >> 0] | 0;
    HEAP8[$d$addr$037 >> 0] = $4;
    if (!($4 << 24 >> 24)) {
     $retval$0 = $d$addr$037;
     break L1;
    }
    $incdec$ptr = $s$addr$038 + 1 | 0;
    $incdec$ptr5 = $d$addr$037 + 1 | 0;
    if (!($incdec$ptr & 3)) {
     $d$addr$0$lcssa = $incdec$ptr5;
     $s$addr$0$lcssa = $incdec$ptr;
     break;
    } else {
     $d$addr$037 = $incdec$ptr5;
     $s$addr$038 = $incdec$ptr;
    }
   }
  }
  $6 = HEAP32[$s$addr$0$lcssa >> 2] | 0;
  if (!(($6 & -2139062144 ^ -2139062144) & $6 + -16843009)) {
   $7 = $6;
   $wd$031 = $d$addr$0$lcssa;
   $ws$032 = $s$addr$0$lcssa;
   while (1) {
    $incdec$ptr11 = $ws$032 + 4 | 0;
    $incdec$ptr12 = $wd$031 + 4 | 0;
    HEAP32[$wd$031 >> 2] = $7;
    $7 = HEAP32[$incdec$ptr11 >> 2] | 0;
    if (($7 & -2139062144 ^ -2139062144) & $7 + -16843009 | 0) {
     $wd$0$lcssa = $incdec$ptr12;
     $ws$0$lcssa = $incdec$ptr11;
     break;
    } else {
     $wd$031 = $incdec$ptr12;
     $ws$032 = $incdec$ptr11;
    }
   }
  } else {
   $wd$0$lcssa = $d$addr$0$lcssa;
   $ws$0$lcssa = $s$addr$0$lcssa;
  }
  $d$addr$1 = $wd$0$lcssa;
  $s$addr$1 = $ws$0$lcssa;
  label = 10;
 } else {
  $d$addr$1 = $d;
  $s$addr$1 = $s;
  label = 10;
 } while (0);
 if ((label | 0) == 10) {
  $9 = HEAP8[$s$addr$1 >> 0] | 0;
  HEAP8[$d$addr$1 >> 0] = $9;
  if (!($9 << 24 >> 24)) $retval$0 = $d$addr$1; else {
   $d$addr$224 = $d$addr$1;
   $s$addr$225 = $s$addr$1;
   while (1) {
    $s$addr$225 = $s$addr$225 + 1 | 0;
    $incdec$ptr20 = $d$addr$224 + 1 | 0;
    $10 = HEAP8[$s$addr$225 >> 0] | 0;
    HEAP8[$incdec$ptr20 >> 0] = $10;
    if (!($10 << 24 >> 24)) {
     $retval$0 = $incdec$ptr20;
     break;
    } else $d$addr$224 = $incdec$ptr20;
   }
  }
 }
 return $retval$0 | 0;
}

function _GifPartition($image, $left, $right, $elt, $pivotIndex) {
 $image = $image | 0;
 $left = $left | 0;
 $right = $right | 0;
 $elt = $elt | 0;
 $pivotIndex = $pivotIndex | 0;
 var $11 = 0, $arrayVal = 0, $elt$addr = 0, $ii = 0, $image$addr = 0, $left$addr = 0, $pivotIndex$addr = 0, $pivotValue = 0, $right$addr = 0, $split = 0, $storeIndex = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $image$addr = sp + 32 | 0;
 $left$addr = sp + 28 | 0;
 $right$addr = sp + 24 | 0;
 $elt$addr = sp + 20 | 0;
 $pivotIndex$addr = sp + 16 | 0;
 $pivotValue = sp + 12 | 0;
 $storeIndex = sp + 8 | 0;
 $split = sp + 36 | 0;
 $ii = sp + 4 | 0;
 $arrayVal = sp;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$left$addr >> 2] = $left;
 HEAP32[$right$addr >> 2] = $right;
 HEAP32[$elt$addr >> 2] = $elt;
 HEAP32[$pivotIndex$addr >> 2] = $pivotIndex;
 HEAP32[$pivotValue >> 2] = HEAPU8[(HEAP32[$image$addr >> 2] | 0) + ((HEAP32[$pivotIndex$addr >> 2] << 2) + (HEAP32[$elt$addr >> 2] | 0)) >> 0];
 _GifSwapPixels(HEAP32[$image$addr >> 2] | 0, HEAP32[$pivotIndex$addr >> 2] | 0, (HEAP32[$right$addr >> 2] | 0) - 1 | 0);
 HEAP32[$storeIndex >> 2] = HEAP32[$left$addr >> 2];
 HEAP8[$split >> 0] = 0;
 HEAP32[$ii >> 2] = HEAP32[$left$addr >> 2];
 while (1) {
  $11 = HEAP32[$image$addr >> 2] | 0;
  if ((HEAP32[$ii >> 2] | 0) >= ((HEAP32[$right$addr >> 2] | 0) - 1 | 0)) break;
  HEAP32[$arrayVal >> 2] = HEAPU8[$11 + ((HEAP32[$ii >> 2] << 2) + (HEAP32[$elt$addr >> 2] | 0)) >> 0];
  if ((HEAP32[$arrayVal >> 2] | 0) < (HEAP32[$pivotValue >> 2] | 0)) {
   _GifSwapPixels(HEAP32[$image$addr >> 2] | 0, HEAP32[$ii >> 2] | 0, HEAP32[$storeIndex >> 2] | 0);
   HEAP32[$storeIndex >> 2] = (HEAP32[$storeIndex >> 2] | 0) + 1;
  } else if ((HEAP32[$arrayVal >> 2] | 0) == (HEAP32[$pivotValue >> 2] | 0)) {
   if (HEAP8[$split >> 0] & 1) {
    _GifSwapPixels(HEAP32[$image$addr >> 2] | 0, HEAP32[$ii >> 2] | 0, HEAP32[$storeIndex >> 2] | 0);
    HEAP32[$storeIndex >> 2] = (HEAP32[$storeIndex >> 2] | 0) + 1;
   }
   HEAP8[$split >> 0] = (HEAP8[$split >> 0] & 1 ^ 1) & 1;
  }
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 _GifSwapPixels($11, HEAP32[$storeIndex >> 2] | 0, (HEAP32[$right$addr >> 2] | 0) - 1 | 0);
 STACKTOP = sp;
 return HEAP32[$storeIndex >> 2] | 0;
}

function _ImageCopy($agg$result, $image) {
 $agg$result = $agg$result | 0;
 $image = $image | 0;
 var $call = 0, $height = 0, $i = 0, $newImage = 0, $size = 0, $width = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $newImage = sp + 16 | 0;
 $width = sp + 12 | 0;
 $height = sp + 8 | 0;
 $size = sp + 4 | 0;
 $i = sp;
 HEAP32[$newImage >> 2] = 0;
 HEAP32[$newImage + 4 >> 2] = 0;
 HEAP32[$newImage + 8 >> 2] = 0;
 HEAP32[$newImage + 12 >> 2] = 0;
 HEAP32[$newImage + 16 >> 2] = 0;
 HEAP32[$width >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$height >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$size >> 2] = 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$image + 12 >> 2] | 0)) break;
  $call = _GetPixelDataSize(HEAP32[$width >> 2] | 0, HEAP32[$height >> 2] | 0, HEAP32[$image + 16 >> 2] | 0) | 0;
  HEAP32[$size >> 2] = (HEAP32[$size >> 2] | 0) + $call;
  HEAP32[$width >> 2] = (HEAP32[$width >> 2] | 0) / 2 | 0;
  HEAP32[$height >> 2] = (HEAP32[$height >> 2] | 0) / 2 | 0;
  if ((HEAP32[$width >> 2] | 0) < 1) HEAP32[$width >> 2] = 1;
  if ((HEAP32[$height >> 2] | 0) < 1) HEAP32[$height >> 2] = 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[$newImage >> 2] = _malloc(HEAP32[$size >> 2] | 0) | 0;
 if (!(HEAP32[$newImage >> 2] | 0)) {
  HEAP32[$agg$result >> 2] = HEAP32[$newImage >> 2];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[$newImage + 4 >> 2];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[$newImage + 8 >> 2];
  HEAP32[$agg$result + 12 >> 2] = HEAP32[$newImage + 12 >> 2];
  HEAP32[$agg$result + 16 >> 2] = HEAP32[$newImage + 16 >> 2];
  STACKTOP = sp;
  return;
 }
 _memcpy(HEAP32[$newImage >> 2] | 0, HEAP32[$image >> 2] | 0, HEAP32[$size >> 2] | 0) | 0;
 HEAP32[$newImage + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$newImage + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$newImage + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$newImage + 16 >> 2] = HEAP32[$image + 16 >> 2];
 HEAP32[$agg$result >> 2] = HEAP32[$newImage >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$newImage + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$newImage + 8 >> 2];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[$newImage + 12 >> 2];
 HEAP32[$agg$result + 16 >> 2] = HEAP32[$newImage + 16 >> 2];
 STACKTOP = sp;
 return;
}

function _Vector3Transform($agg$result, $v, $mat) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 $mat = $mat | 0;
 var $10 = f0, $12 = f0, $14 = f0, $17 = f0, $19 = f0, $21 = f0, $3 = f0, $5 = f0, $7 = f0, $add = f0, $add11 = f0, $add13 = f0, $add18 = f0, $add20 = f0, $add6 = f0, $mul = f0, $mul16 = f0, $mul9 = f0, $result = 0, $x = 0, $y = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $result = sp + 12 | 0;
 $x = sp + 8 | 0;
 $y = sp + 4 | 0;
 $z = sp;
 HEAP32[$result >> 2] = 0;
 HEAP32[$result + 4 >> 2] = 0;
 HEAP32[$result + 8 >> 2] = 0;
 HEAPF32[$x >> 2] = Math_fround(HEAPF32[$v >> 2]);
 HEAPF32[$y >> 2] = Math_fround(HEAPF32[$v + 4 >> 2]);
 HEAPF32[$z >> 2] = Math_fround(HEAPF32[$v + 8 >> 2]);
 $3 = Math_fround(HEAPF32[$mat >> 2]);
 $mul = Math_fround($3 * Math_fround(HEAPF32[$x >> 2]));
 $5 = Math_fround(HEAPF32[$mat + 4 >> 2]);
 $add = Math_fround($mul + Math_fround($5 * Math_fround(HEAPF32[$y >> 2])));
 $7 = Math_fround(HEAPF32[$mat + 8 >> 2]);
 $add6 = Math_fround($add + Math_fround($7 * Math_fround(HEAPF32[$z >> 2])));
 HEAPF32[$result >> 2] = Math_fround($add6 + Math_fround(HEAPF32[$mat + 12 >> 2]));
 $10 = Math_fround(HEAPF32[$mat + 16 >> 2]);
 $mul9 = Math_fround($10 * Math_fround(HEAPF32[$x >> 2]));
 $12 = Math_fround(HEAPF32[$mat + 20 >> 2]);
 $add11 = Math_fround($mul9 + Math_fround($12 * Math_fround(HEAPF32[$y >> 2])));
 $14 = Math_fround(HEAPF32[$mat + 24 >> 2]);
 $add13 = Math_fround($add11 + Math_fround($14 * Math_fround(HEAPF32[$z >> 2])));
 HEAPF32[$result + 4 >> 2] = Math_fround($add13 + Math_fround(HEAPF32[$mat + 28 >> 2]));
 $17 = Math_fround(HEAPF32[$mat + 32 >> 2]);
 $mul16 = Math_fround($17 * Math_fround(HEAPF32[$x >> 2]));
 $19 = Math_fround(HEAPF32[$mat + 36 >> 2]);
 $add18 = Math_fround($mul16 + Math_fround($19 * Math_fround(HEAPF32[$y >> 2])));
 $21 = Math_fround(HEAPF32[$mat + 40 >> 2]);
 $add20 = Math_fround($add18 + Math_fround($21 * Math_fround(HEAPF32[$z >> 2])));
 HEAPF32[$result + 8 >> 2] = Math_fround($add20 + Math_fround(HEAPF32[$mat + 44 >> 2]));
 HEAP32[$agg$result >> 2] = HEAP32[$result >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$result + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$result + 8 >> 2];
 STACKTOP = sp;
 return;
}

function _GifBegin($filename, $width, $height, $delay, $bitDepth, $dither) {
 $filename = $filename | 0;
 $width = $width | 0;
 $height = $height | 0;
 $delay = $delay | 0;
 $bitDepth = $bitDepth | 0;
 $dither = $dither | 0;
 var $$pre_trunc = 0, $32 = 0, $delay$addr = 0, $filename$addr = 0, $height$addr = 0, $retval = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 21 | 0;
 $filename$addr = sp + 16 | 0;
 $width$addr = sp + 12 | 0;
 $height$addr = sp + 8 | 0;
 $delay$addr = sp + 4 | 0;
 HEAP32[$filename$addr >> 2] = $filename;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$delay$addr >> 2] = $delay;
 HEAP32[sp >> 2] = $bitDepth;
 HEAP8[sp + 20 >> 0] = $dither & 1;
 HEAP32[7523] = _fopen(HEAP32[$filename$addr >> 2] | 0, 12224) | 0;
 if (!(HEAP32[7523] | 0)) {
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $32 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $32 | 0;
 }
 HEAP32[7362] = _malloc((Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0) << 2) | 0;
 _fputs(11253, HEAP32[7523] | 0) | 0;
 _fputc(HEAP32[$width$addr >> 2] & 255, HEAP32[7523] | 0) | 0;
 _fputc((HEAP32[$width$addr >> 2] | 0) >>> 8 & 255, HEAP32[7523] | 0) | 0;
 _fputc(HEAP32[$height$addr >> 2] & 255, HEAP32[7523] | 0) | 0;
 _fputc((HEAP32[$height$addr >> 2] | 0) >>> 8 & 255, HEAP32[7523] | 0) | 0;
 _fputc(240, HEAP32[7523] | 0) | 0;
 _fputc(0, HEAP32[7523] | 0) | 0;
 _fputc(0, HEAP32[7523] | 0) | 0;
 _fputc(0, HEAP32[7523] | 0) | 0;
 _fputc(0, HEAP32[7523] | 0) | 0;
 _fputc(0, HEAP32[7523] | 0) | 0;
 _fputc(0, HEAP32[7523] | 0) | 0;
 _fputc(0, HEAP32[7523] | 0) | 0;
 _fputc(0, HEAP32[7523] | 0) | 0;
 if (HEAP32[$delay$addr >> 2] | 0) {
  _fputc(33, HEAP32[7523] | 0) | 0;
  _fputc(255, HEAP32[7523] | 0) | 0;
  _fputc(11, HEAP32[7523] | 0) | 0;
  _fputs(11260, HEAP32[7523] | 0) | 0;
  _fputc(3, HEAP32[7523] | 0) | 0;
  _fputc(1, HEAP32[7523] | 0) | 0;
  _fputc(0, HEAP32[7523] | 0) | 0;
  _fputc(0, HEAP32[7523] | 0) | 0;
  _fputc(0, HEAP32[7523] | 0) | 0;
 }
 HEAP8[$retval >> 0] = 1;
 $$pre_trunc = HEAP8[$retval >> 0] | 0;
 $32 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $32 | 0;
}

function ___vfprintf_internal($f, $fmt, $ap, $fmt_fp, $pop_arg_long_double) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $fmt_fp = $fmt_fp | 0;
 $pop_arg_long_double = $pop_arg_long_double | 0;
 var $1 = 0, $4 = 0, $7 = 0, $and = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call21 = 0, $cond = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $wbase = 0, $wend = 0, $wpos = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 $ap2 = sp + 208 | 0;
 $nl_type = sp + 160 | 0;
 $nl_arg = sp + 80 | 0;
 $internal_buf = sp;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0) < 0) $retval$0 = -1; else {
  if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
  $1 = HEAP32[$f >> 2] | 0;
  $and = $1 & 32;
  if ((HEAP8[$f + 74 >> 0] | 0) < 1) HEAP32[$f >> 2] = $1 & -33;
  $buf_size = $f + 48 | 0;
  if (!(HEAP32[$buf_size >> 2] | 0)) {
   $buf = $f + 44 | 0;
   $4 = HEAP32[$buf >> 2] | 0;
   HEAP32[$buf >> 2] = $internal_buf;
   $wbase = $f + 28 | 0;
   HEAP32[$wbase >> 2] = $internal_buf;
   $wpos = $f + 20 | 0;
   HEAP32[$wpos >> 2] = $internal_buf;
   HEAP32[$buf_size >> 2] = 80;
   $wend = $f + 16 | 0;
   HEAP32[$wend >> 2] = $internal_buf + 80;
   $call21 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0;
   if (!$4) $ret$1 = $call21; else {
    FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
    $spec$select = (HEAP32[$wpos >> 2] | 0) == 0 ? -1 : $call21;
    HEAP32[$buf >> 2] = $4;
    HEAP32[$buf_size >> 2] = 0;
    HEAP32[$wend >> 2] = 0;
    HEAP32[$wbase >> 2] = 0;
    HEAP32[$wpos >> 2] = 0;
    $ret$1 = $spec$select;
   }
  } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type, $fmt_fp, $pop_arg_long_double) | 0;
  $7 = HEAP32[$f >> 2] | 0;
  HEAP32[$f >> 2] = $7 | $and;
  if ($cond | 0) ___unlockfile($f);
  $retval$0 = ($7 & 32 | 0) == 0 ? $ret$1 : -1;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _LoadImageEx($agg$result, $pixels, $width, $height) {
 $agg$result = $agg$result | 0;
 $pixels = $pixels | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $height$addr = 0, $i = 0, $image = 0, $k = 0, $pixels$addr = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $pixels$addr = sp + 36 | 0;
 $width$addr = sp + 32 | 0;
 $height$addr = sp + 28 | 0;
 $image = sp + 8 | 0;
 $k = sp + 4 | 0;
 $i = sp;
 HEAP32[$pixels$addr >> 2] = $pixels;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$image >> 2] = 0;
 HEAP32[$image + 4 >> 2] = 0;
 HEAP32[$image + 8 >> 2] = 0;
 HEAP32[$image + 12 >> 2] = 0;
 HEAP32[$image + 16 >> 2] = 0;
 HEAP32[$image >> 2] = 0;
 HEAP32[$image + 4 >> 2] = HEAP32[$width$addr >> 2];
 HEAP32[$image + 8 >> 2] = HEAP32[$height$addr >> 2];
 HEAP32[$image + 12 >> 2] = 1;
 HEAP32[$image + 16 >> 2] = 7;
 HEAP32[$k >> 2] = 0;
 HEAP32[$image >> 2] = _malloc((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 2) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= ((Math_imul(HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0) | 0) << 2 | 0)) break;
  HEAP8[(HEAP32[$image >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] = HEAP8[(HEAP32[$pixels$addr >> 2] | 0) + (HEAP32[$k >> 2] << 2) >> 0] | 0;
  HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$i >> 2] | 0) + 1) >> 0] = HEAP8[(HEAP32[$pixels$addr >> 2] | 0) + (HEAP32[$k >> 2] << 2) + 1 >> 0] | 0;
  HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$i >> 2] | 0) + 2) >> 0] = HEAP8[(HEAP32[$pixels$addr >> 2] | 0) + (HEAP32[$k >> 2] << 2) + 2 >> 0] | 0;
  HEAP8[(HEAP32[$image >> 2] | 0) + ((HEAP32[$i >> 2] | 0) + 3) >> 0] = HEAP8[(HEAP32[$pixels$addr >> 2] | 0) + (HEAP32[$k >> 2] << 2) + 3 >> 0] | 0;
  HEAP32[$k >> 2] = (HEAP32[$k >> 2] | 0) + 1;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 4;
 }
 HEAP32[$agg$result >> 2] = HEAP32[$image >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$agg$result + 16 >> 2] = HEAP32[$image + 16 >> 2];
 STACKTOP = sp;
 return;
}

function _stbir__edge_wrap_slow($edge, $n, $max) {
 $edge = $edge | 0;
 $n = $n | 0;
 $max = $max | 0;
 var $18 = 0, $7 = 0, $8 = 0, $edge$addr = 0, $m = 0, $max$addr = 0, $max2 = 0, $n$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 20 | 0;
 $edge$addr = sp + 16 | 0;
 $n$addr = sp + 12 | 0;
 $max$addr = sp + 8 | 0;
 $max2 = sp + 4 | 0;
 $m = sp;
 HEAP32[$edge$addr >> 2] = $edge;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$max$addr >> 2] = $max;
 L1 : do switch (HEAP32[$edge$addr >> 2] | 0) {
 case 4:
  {
   HEAP32[$retval >> 2] = 0;
   break;
  }
 case 1:
  {
   if ((HEAP32[$n$addr >> 2] | 0) < 0) {
    HEAP32[$retval >> 2] = 0;
    break L1;
   }
   if ((HEAP32[$n$addr >> 2] | 0) >= (HEAP32[$max$addr >> 2] | 0)) {
    HEAP32[$retval >> 2] = (HEAP32[$max$addr >> 2] | 0) - 1;
    break L1;
   } else {
    HEAP32[$retval >> 2] = HEAP32[$n$addr >> 2];
    break L1;
   }
   break;
  }
 case 2:
  {
   $7 = HEAP32[$n$addr >> 2] | 0;
   $8 = HEAP32[$max$addr >> 2] | 0;
   if ((HEAP32[$n$addr >> 2] | 0) < 0) if (($7 | 0) < ($8 | 0)) {
    HEAP32[$retval >> 2] = 0 - (HEAP32[$n$addr >> 2] | 0);
    break L1;
   } else {
    HEAP32[$retval >> 2] = (HEAP32[$max$addr >> 2] | 0) - 1;
    break L1;
   }
   if (($7 | 0) < ($8 | 0)) {
    HEAP32[$retval >> 2] = HEAP32[$n$addr >> 2];
    break L1;
   }
   HEAP32[$max2 >> 2] = HEAP32[$max$addr >> 2] << 1;
   if ((HEAP32[$n$addr >> 2] | 0) >= (HEAP32[$max2 >> 2] | 0)) {
    HEAP32[$retval >> 2] = 0;
    break L1;
   } else {
    HEAP32[$retval >> 2] = (HEAP32[$max2 >> 2] | 0) - (HEAP32[$n$addr >> 2] | 0) - 1;
    break L1;
   }
   break;
  }
 case 3:
  {
   $18 = HEAP32[$n$addr >> 2] | 0;
   if ((HEAP32[$n$addr >> 2] | 0) >= 0) {
    HEAP32[$retval >> 2] = ($18 | 0) % (HEAP32[$max$addr >> 2] | 0) | 0;
    break L1;
   }
   HEAP32[$m >> 2] = (0 - $18 | 0) % (HEAP32[$max$addr >> 2] | 0) | 0;
   if (HEAP32[$m >> 2] | 0) HEAP32[$m >> 2] = (HEAP32[$max$addr >> 2] | 0) - (HEAP32[$m >> 2] | 0);
   HEAP32[$retval >> 2] = HEAP32[$m >> 2];
   break;
  }
 default:
  ___assert_fail(13775, 12378, 994, 13802);
 } while (0);
 STACKTOP = sp;
 return HEAP32[$retval >> 2] | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
  return dest | 0;
 }
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function _stbir_resize_uint8($input_pixels, $input_w, $input_h, $input_stride_in_bytes, $output_pixels, $output_w, $output_h, $output_stride_in_bytes, $num_channels) {
 $input_pixels = $input_pixels | 0;
 $input_w = $input_w | 0;
 $input_h = $input_h | 0;
 $input_stride_in_bytes = $input_stride_in_bytes | 0;
 $output_pixels = $output_pixels | 0;
 $output_w = $output_w | 0;
 $output_h = $output_h | 0;
 $output_stride_in_bytes = $output_stride_in_bytes | 0;
 $num_channels = $num_channels | 0;
 var $call = 0, $input_h$addr = 0, $input_pixels$addr = 0, $input_stride_in_bytes$addr = 0, $input_w$addr = 0, $num_channels$addr = 0, $output_h$addr = 0, $output_pixels$addr = 0, $output_stride_in_bytes$addr = 0, $output_w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $input_pixels$addr = sp + 32 | 0;
 $input_w$addr = sp + 28 | 0;
 $input_h$addr = sp + 24 | 0;
 $input_stride_in_bytes$addr = sp + 20 | 0;
 $output_pixels$addr = sp + 16 | 0;
 $output_w$addr = sp + 12 | 0;
 $output_h$addr = sp + 8 | 0;
 $output_stride_in_bytes$addr = sp + 4 | 0;
 $num_channels$addr = sp;
 HEAP32[$input_pixels$addr >> 2] = $input_pixels;
 HEAP32[$input_w$addr >> 2] = $input_w;
 HEAP32[$input_h$addr >> 2] = $input_h;
 HEAP32[$input_stride_in_bytes$addr >> 2] = $input_stride_in_bytes;
 HEAP32[$output_pixels$addr >> 2] = $output_pixels;
 HEAP32[$output_w$addr >> 2] = $output_w;
 HEAP32[$output_h$addr >> 2] = $output_h;
 HEAP32[$output_stride_in_bytes$addr >> 2] = $output_stride_in_bytes;
 HEAP32[$num_channels$addr >> 2] = $num_channels;
 $call = _stbir__resize_arbitrary(0, HEAP32[$input_pixels$addr >> 2] | 0, HEAP32[$input_w$addr >> 2] | 0, HEAP32[$input_h$addr >> 2] | 0, HEAP32[$input_stride_in_bytes$addr >> 2] | 0, HEAP32[$output_pixels$addr >> 2] | 0, HEAP32[$output_w$addr >> 2] | 0, HEAP32[$output_h$addr >> 2] | 0, HEAP32[$output_stride_in_bytes$addr >> 2] | 0, Math_fround(0.0), Math_fround(0.0), Math_fround(1.0), Math_fround(1.0), 0, HEAP32[$num_channels$addr >> 2] | 0, -1, 0, 0, 0, 0, 1, 1, 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _CompileShader($shaderStr, $type) {
 $shaderStr = $shaderStr | 0;
 $type = $type | 0;
 var $12 = 0, $5 = 0, $7 = 0, $length = 0, $maxLength = 0, $saved_stack = 0, $shader = 0, $shaderStr$addr = 0, $success = 0, $type$addr = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vla = 0, $vla$alloca_mul = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $shaderStr$addr = sp + 44 | 0;
 $type$addr = sp + 40 | 0;
 $shader = sp + 36 | 0;
 $success = sp + 32 | 0;
 $maxLength = sp + 28 | 0;
 $length = sp + 24 | 0;
 $saved_stack = sp + 20 | 0;
 HEAP32[$shaderStr$addr >> 2] = $shaderStr;
 HEAP32[$type$addr >> 2] = $type;
 HEAP32[$shader >> 2] = _glCreateShader(HEAP32[$type$addr >> 2] | 0) | 0;
 _glShaderSource(HEAP32[$shader >> 2] | 0, 1, $shaderStr$addr | 0, 0);
 HEAP32[$success >> 2] = 0;
 _glCompileShader(HEAP32[$shader >> 2] | 0);
 _glGetShaderiv(HEAP32[$shader >> 2] | 0, 35713, $success | 0);
 $5 = HEAP32[$shader >> 2] | 0;
 if ((HEAP32[$success >> 2] | 0) != 1) {
  HEAP32[$vararg_buffer >> 2] = $5;
  _TraceLog(4, 10672, $vararg_buffer);
  HEAP32[$maxLength >> 2] = 0;
  _glGetShaderiv(HEAP32[$shader >> 2] | 0, 35716, $maxLength | 0);
  $7 = HEAP32[$maxLength >> 2] | 0;
  HEAP32[$saved_stack >> 2] = _llvm_stacksave() | 0;
  $vla$alloca_mul = $7;
  $vla = STACKTOP;
  STACKTOP = STACKTOP + ((1 * $vla$alloca_mul | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * $vla$alloca_mul | 0) + 15 & -16 | 0);
  _glGetShaderInfoLog(HEAP32[$shader >> 2] | 0, HEAP32[$maxLength >> 2] | 0, $length | 0, $vla | 0);
  HEAP32[$vararg_buffer1 >> 2] = $vla;
  _TraceLog(3, 10621, $vararg_buffer1);
  _llvm_stackrestore(HEAP32[$saved_stack >> 2] | 0);
  $12 = HEAP32[$shader >> 2] | 0;
  STACKTOP = sp;
  return $12 | 0;
 } else {
  HEAP32[$vararg_buffer4 >> 2] = $5;
  _TraceLog(3, 10713, $vararg_buffer4);
  $12 = HEAP32[$shader >> 2] | 0;
  STACKTOP = sp;
  return $12 | 0;
 }
 return 0;
}

function _GifWriteFrame($image, $width, $height, $delay, $bitDepth, $dither) {
 $image = $image | 0;
 $width = $width | 0;
 $height = $height | 0;
 $delay = $delay | 0;
 $bitDepth = $bitDepth | 0;
 $dither = $dither | 0;
 var $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $20 = 0, $bitDepth$addr = 0, $delay$addr = 0, $dither$addr = 0, $height$addr = 0, $image$addr = 0, $oldImage = 0, $pal = 0, $retval = 0, $width$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1312);
 $retval = sp + 1309 | 0;
 $image$addr = sp + 1304 | 0;
 $width$addr = sp + 1300 | 0;
 $height$addr = sp + 1296 | 0;
 $delay$addr = sp + 1292 | 0;
 $bitDepth$addr = sp + 1288 | 0;
 $dither$addr = sp + 1308 | 0;
 $oldImage = sp + 1284 | 0;
 $pal = sp;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$delay$addr >> 2] = $delay;
 HEAP32[$bitDepth$addr >> 2] = $bitDepth;
 HEAP8[$dither$addr >> 0] = $dither & 1;
 if (!(HEAP32[7523] | 0)) {
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $20 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $20 | 0;
 }
 HEAP32[$oldImage >> 2] = HEAP32[7362];
 CSE$0 = HEAP8[$dither$addr >> 0] & 1 | 0;
 _GifMakePalette(CSE$0 | 0 ? 0 : HEAP32[$oldImage >> 2] | 0, HEAP32[$image$addr >> 2] | 0, HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0, HEAP32[$bitDepth$addr >> 2] | 0, CSE$0 | 0, $pal);
 $10 = HEAP32[$oldImage >> 2] | 0;
 $11 = HEAP32[$image$addr >> 2] | 0;
 $12 = HEAP32[7362] | 0;
 $13 = HEAP32[$width$addr >> 2] | 0;
 $14 = HEAP32[$height$addr >> 2] | 0;
 if (HEAP8[$dither$addr >> 0] & 1) _GifDitherImage($10, $11, $12, $13, $14, $pal); else _GifThresholdImage($10, $11, $12, $13, $14, $pal);
 _GifWriteLzwImage(HEAP32[7523] | 0, HEAP32[7362] | 0, 0, 0, HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0, HEAP32[$delay$addr >> 2] | 0, $pal);
 HEAP8[$retval >> 0] = 1;
 $$pre_trunc = HEAP8[$retval >> 0] | 0;
 $20 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $20 | 0;
}

function _GetShapesTexture($agg$result) {
 $agg$result = $agg$result | 0;
 var $$compoundliteral = 0, $arrayidx = 0, $rec = 0, $texture = 0, $tmp = 0, $tmp1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 $tmp = sp + 72 | 0;
 $rec = sp + 56 | 0;
 $tmp1 = sp + 16 | 0;
 $$compoundliteral = sp;
 if (HEAP32[7561] | 0) {
  HEAP32[$agg$result >> 2] = HEAP32[7561];
  HEAP32[$agg$result + 4 >> 2] = HEAP32[7562];
  HEAP32[$agg$result + 8 >> 2] = HEAP32[7563];
  HEAP32[$agg$result + 12 >> 2] = HEAP32[7564];
  HEAP32[$agg$result + 16 >> 2] = HEAP32[7565];
  STACKTOP = sp;
  return;
 }
 _GetFontDefault($tmp);
 $texture = $tmp + 8 | 0;
 HEAP32[7561] = HEAP32[$texture >> 2];
 HEAP32[7562] = HEAP32[$texture + 4 >> 2];
 HEAP32[7563] = HEAP32[$texture + 8 >> 2];
 HEAP32[7564] = HEAP32[$texture + 12 >> 2];
 HEAP32[7565] = HEAP32[$texture + 16 >> 2];
 _GetFontDefault($tmp1);
 $arrayidx = (HEAP32[$tmp1 + 28 >> 2] | 0) + 1520 | 0;
 HEAP32[$rec >> 2] = HEAP32[$arrayidx >> 2];
 HEAP32[$rec + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2];
 HEAP32[$rec + 8 >> 2] = HEAP32[$arrayidx + 8 >> 2];
 HEAP32[$rec + 12 >> 2] = HEAP32[$arrayidx + 12 >> 2];
 HEAPF32[$$compoundliteral >> 2] = Math_fround(Math_fround(HEAPF32[$rec >> 2]) + Math_fround(1.0));
 HEAPF32[$$compoundliteral + 4 >> 2] = Math_fround(Math_fround(HEAPF32[$rec + 4 >> 2]) + Math_fround(1.0));
 HEAPF32[$$compoundliteral + 8 >> 2] = Math_fround(Math_fround(HEAPF32[$rec + 8 >> 2]) - Math_fround(2.0));
 HEAPF32[$$compoundliteral + 12 >> 2] = Math_fround(Math_fround(HEAPF32[$rec + 12 >> 2]) - Math_fround(2.0));
 HEAP32[7557] = HEAP32[$$compoundliteral >> 2];
 HEAP32[7558] = HEAP32[$$compoundliteral + 4 >> 2];
 HEAP32[7559] = HEAP32[$$compoundliteral + 8 >> 2];
 HEAP32[7560] = HEAP32[$$compoundliteral + 12 >> 2];
 HEAP32[$agg$result >> 2] = HEAP32[7561];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[7562];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[7563];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[7564];
 HEAP32[$agg$result + 16 >> 2] = HEAP32[7565];
 STACKTOP = sp;
 return;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $3 = 0, $4 = 0, $6 = 0, $9 = 0, $cmp26 = 0, $cnt$0 = 0, $fd = 0, $iov$0 = 0, $iov$1 = 0, $iov_len38 = 0, $iovcnt$0 = 0, $iovs = 0, $num = 0, $rem$0 = 0, $retval$1$ph = 0, $sub$ptr$sub = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $iovs = sp;
 $num = sp + 16 | 0;
 $wbase = $f + 28 | 0;
 $0 = HEAP32[$wbase >> 2] | 0;
 HEAP32[$iovs >> 2] = $0;
 $wpos = $f + 20 | 0;
 $sub$ptr$sub = (HEAP32[$wpos >> 2] | 0) - $0 | 0;
 HEAP32[$iovs + 4 >> 2] = $sub$ptr$sub;
 HEAP32[$iovs + 8 >> 2] = $buf;
 HEAP32[$iovs + 12 >> 2] = $len;
 $fd = $f + 60 | 0;
 $iov$0 = $iovs;
 $iovcnt$0 = 2;
 $rem$0 = $sub$ptr$sub + $len | 0;
 while (1) {
  if (!(___wasi_syscall_ret(___wasi_fd_write(HEAP32[$fd >> 2] | 0, $iov$0 | 0, $iovcnt$0 | 0, $num | 0) | 0) | 0)) $3 = HEAP32[$num >> 2] | 0; else {
   HEAP32[$num >> 2] = -1;
   $3 = -1;
  }
  if (($rem$0 | 0) == ($3 | 0)) {
   label = 6;
   break;
  }
  if (($3 | 0) < 0) {
   label = 8;
   break;
  }
  $9 = HEAP32[$iov$0 + 4 >> 2] | 0;
  $cmp26 = $3 >>> 0 > $9 >>> 0;
  $iov$1 = $cmp26 ? $iov$0 + 8 | 0 : $iov$0;
  $cnt$0 = $3 - ($cmp26 ? $9 : 0) | 0;
  HEAP32[$iov$1 >> 2] = (HEAP32[$iov$1 >> 2] | 0) + $cnt$0;
  $iov_len38 = $iov$1 + 4 | 0;
  HEAP32[$iov_len38 >> 2] = (HEAP32[$iov_len38 >> 2] | 0) - $cnt$0;
  $iov$0 = $iov$1;
  $iovcnt$0 = $iovcnt$0 + ($cmp26 << 31 >> 31) | 0;
  $rem$0 = $rem$0 - $3 | 0;
 }
 if ((label | 0) == 6) {
  $4 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 16 >> 2] = $4 + (HEAP32[$f + 48 >> 2] | 0);
  $6 = $4;
  HEAP32[$wbase >> 2] = $6;
  HEAP32[$wpos >> 2] = $6;
  $retval$1$ph = $len;
 } else if ((label | 0) == 8) {
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$f >> 2] = HEAP32[$f >> 2] | 32;
  if (($iovcnt$0 | 0) == 2) $retval$1$ph = 0; else $retval$1$ph = $len - (HEAP32[$iov$0 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = sp;
 return $retval$1$ph | 0;
}

function ___fdopen($fd, $mode) {
 $fd = $fd | 0;
 $mode = $mode | 0;
 var $1 = 0, $3 = 0, $4 = 0, $call18 = 0, $call2 = 0, $or24 = 0, $retval$0 = 0, $tobool8 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $wsz = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $wsz = sp + 40 | 0;
 if (!(_strchr(15818, HEAP8[$mode >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 28;
  $retval$0 = 0;
 } else {
  $call2 = _malloc(1176) | 0;
  if (!$call2) $retval$0 = 0; else {
   _memset($call2 | 0, 0, 144) | 0;
   $tobool8 = (_strchr($mode, 43) | 0) == 0;
   $1 = HEAP8[$mode >> 0] | 0;
   if ($tobool8) HEAP32[$call2 >> 2] = $1 << 24 >> 24 == 114 ? 8 : 4;
   if ($1 << 24 >> 24 == 97) {
    HEAP32[$vararg_buffer >> 2] = $fd;
    HEAP32[$vararg_buffer + 4 >> 2] = 3;
    $call18 = ___syscall221(221, $vararg_buffer | 0) | 0;
    if (!($call18 & 1024)) {
     HEAP32[$vararg_buffer2 >> 2] = $fd;
     HEAP32[$vararg_buffer2 + 4 >> 2] = 4;
     HEAP32[$vararg_buffer2 + 8 >> 2] = $call18 | 1024;
     ___syscall221(221, $vararg_buffer2 | 0) | 0;
    }
    $or24 = HEAP32[$call2 >> 2] | 128;
    HEAP32[$call2 >> 2] = $or24;
    $4 = $or24;
   } else $4 = HEAP32[$call2 >> 2] | 0;
   HEAP32[$call2 + 60 >> 2] = $fd;
   HEAP32[$call2 + 44 >> 2] = $call2 + 152;
   HEAP32[$call2 + 48 >> 2] = 1024;
   $3 = $call2 + 75 | 0;
   HEAP8[$3 >> 0] = -1;
   if (!($4 & 8)) {
    HEAP32[$vararg_buffer7 >> 2] = $fd;
    HEAP32[$vararg_buffer7 + 4 >> 2] = 21523;
    HEAP32[$vararg_buffer7 + 8 >> 2] = $wsz;
    if (!(___syscall54(54, $vararg_buffer7 | 0) | 0)) HEAP8[$3 >> 0] = 10;
   }
   HEAP32[$call2 + 32 >> 2] = 8;
   HEAP32[$call2 + 36 >> 2] = 1;
   HEAP32[$call2 + 40 >> 2] = 2;
   HEAP32[$call2 + 12 >> 2] = 2;
   if (!(HEAP32[7577] | 0)) HEAP32[$call2 + 76 >> 2] = -1;
   ___ofl_add($call2) | 0;
   $retval$0 = $call2;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _rlReadScreenPixels($width, $height) {
 $width = $width | 0;
 $height = $height | 0;
 var $height$addr = 0, $imgData = 0, $mul11 = 0, $mul15 = 0, $mul23 = 0, $screenData = 0, $width$addr = 0, $x = 0, $y = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $width$addr = sp + 20 | 0;
 $height$addr = sp + 16 | 0;
 $screenData = sp + 12 | 0;
 $imgData = sp + 8 | 0;
 $y = sp + 4 | 0;
 $x = sp;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$screenData >> 2] = _calloc((Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0) << 2, 1) | 0;
 _glReadPixels(0, 0, HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0, 6408, 5121, HEAP32[$screenData >> 2] | 0);
 HEAP32[$imgData >> 2] = _malloc((Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0) << 2) | 0;
 HEAP32[$y >> 2] = (HEAP32[$height$addr >> 2] | 0) - 1;
 while (1) {
  if ((HEAP32[$y >> 2] | 0) < 0) break;
  HEAP32[$x >> 2] = 0;
  while (1) {
   if ((HEAP32[$x >> 2] | 0) >= (HEAP32[$width$addr >> 2] << 2 | 0)) break;
   $mul11 = (Math_imul(HEAP32[$y >> 2] | 0, HEAP32[$width$addr >> 2] | 0) | 0) << 2;
   $mul15 = (Math_imul((HEAP32[$height$addr >> 2] | 0) - 1 - (HEAP32[$y >> 2] | 0) | 0, HEAP32[$width$addr >> 2] | 0) | 0) << 2;
   CSE$0 = HEAP32[$x >> 2] | 0;
   HEAP8[(HEAP32[$imgData >> 2] | 0) + ($mul15 + CSE$0) >> 0] = HEAP8[(HEAP32[$screenData >> 2] | 0) + ($mul11 + CSE$0) >> 0] | 0;
   if (!(((HEAP32[$x >> 2] | 0) + 1 | 0) % 4 | 0)) {
    $mul23 = (Math_imul((HEAP32[$height$addr >> 2] | 0) - 1 - (HEAP32[$y >> 2] | 0) | 0, HEAP32[$width$addr >> 2] | 0) | 0) << 2;
    HEAP8[(HEAP32[$imgData >> 2] | 0) + ($mul23 + (HEAP32[$x >> 2] | 0)) >> 0] = -1;
   }
   HEAP32[$x >> 2] = (HEAP32[$x >> 2] | 0) + 1;
  }
  HEAP32[$y >> 2] = (HEAP32[$y >> 2] | 0) + -1;
 }
 _free(HEAP32[$screenData >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$imgData >> 2] | 0;
}

function _GifPickChangedPixels($lastFrame, $frame, $numPixels) {
 $lastFrame = $lastFrame | 0;
 $frame = $frame | 0;
 $numPixels = $numPixels | 0;
 var $frame$addr = 0, $ii = 0, $lastFrame$addr = 0, $numChanged = 0, $numPixels$addr = 0, $writeIter = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $lastFrame$addr = sp + 20 | 0;
 $frame$addr = sp + 16 | 0;
 $numPixels$addr = sp + 12 | 0;
 $numChanged = sp + 8 | 0;
 $writeIter = sp + 4 | 0;
 $ii = sp;
 HEAP32[$lastFrame$addr >> 2] = $lastFrame;
 HEAP32[$frame$addr >> 2] = $frame;
 HEAP32[$numPixels$addr >> 2] = $numPixels;
 HEAP32[$numChanged >> 2] = 0;
 HEAP32[$writeIter >> 2] = HEAP32[$frame$addr >> 2];
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (HEAP32[$numPixels$addr >> 2] | 0)) break;
  if ((HEAPU8[HEAP32[$lastFrame$addr >> 2] >> 0] | 0 | 0) != (HEAPU8[HEAP32[$frame$addr >> 2] >> 0] | 0 | 0)) label = 6; else if ((HEAPU8[(HEAP32[$lastFrame$addr >> 2] | 0) + 1 >> 0] | 0 | 0) != (HEAPU8[(HEAP32[$frame$addr >> 2] | 0) + 1 >> 0] | 0 | 0)) label = 6; else if ((HEAPU8[(HEAP32[$lastFrame$addr >> 2] | 0) + 2 >> 0] | 0 | 0) != (HEAPU8[(HEAP32[$frame$addr >> 2] | 0) + 2 >> 0] | 0 | 0)) label = 6;
  if ((label | 0) == 6) {
   label = 0;
   HEAP8[HEAP32[$writeIter >> 2] >> 0] = HEAP8[HEAP32[$frame$addr >> 2] >> 0] | 0;
   HEAP8[(HEAP32[$writeIter >> 2] | 0) + 1 >> 0] = HEAP8[(HEAP32[$frame$addr >> 2] | 0) + 1 >> 0] | 0;
   HEAP8[(HEAP32[$writeIter >> 2] | 0) + 2 >> 0] = HEAP8[(HEAP32[$frame$addr >> 2] | 0) + 2 >> 0] | 0;
   HEAP32[$numChanged >> 2] = (HEAP32[$numChanged >> 2] | 0) + 1;
   HEAP32[$writeIter >> 2] = (HEAP32[$writeIter >> 2] | 0) + 4;
  }
  HEAP32[$lastFrame$addr >> 2] = (HEAP32[$lastFrame$addr >> 2] | 0) + 4;
  HEAP32[$frame$addr >> 2] = (HEAP32[$frame$addr >> 2] | 0) + 4;
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP32[$numChanged >> 2] | 0;
}

function _MouseButtonCallback($window, $button, $action, $mods) {
 $window = $window | 0;
 $button = $button | 0;
 $action = $action | 0;
 $mods = $mods | 0;
 var $action$addr = 0, $button$addr = 0, $conv10 = f0, $conv14 = f0, $gestureEvent = 0, $gestureEvent$byval_copy = 0, $position = 0, $position11 = 0, $tmp = 0, $y = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $gestureEvent$byval_copy = sp + 80 | 0;
 $button$addr = sp + 72 | 0;
 $action$addr = sp + 68 | 0;
 $gestureEvent = sp + 8 | 0;
 $tmp = sp;
 HEAP32[sp + 76 >> 2] = $window;
 HEAP32[$button$addr >> 2] = $button;
 HEAP32[$action$addr >> 2] = $action;
 HEAP32[sp + 64 >> 2] = $mods;
 CSE$0 = HEAP32[$button$addr >> 2] | 0;
 HEAP8[30898 + CSE$0 >> 0] = HEAP8[30895 + CSE$0 >> 0] | 0;
 HEAP8[30895 + (HEAP32[$button$addr >> 2] | 0) >> 0] = HEAP32[$action$addr >> 2];
 if (_IsMouseButtonPressed(0) | 0) HEAP32[$gestureEvent >> 2] = 1; else if (_IsMouseButtonReleased(0) | 0) HEAP32[$gestureEvent >> 2] = 0;
 HEAP32[$gestureEvent + 8 >> 2] = 0;
 HEAP32[$gestureEvent + 4 >> 2] = 1;
 $position = $gestureEvent + 24 | 0;
 _GetMousePosition($tmp);
 HEAP32[$position >> 2] = HEAP32[$tmp >> 2];
 HEAP32[$position + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
 $conv10 = Math_fround(_GetScreenWidth() | 0);
 $position11 = $gestureEvent + 24 | 0;
 HEAPF32[$position11 >> 2] = Math_fround(Math_fround(HEAPF32[$position11 >> 2]) / $conv10);
 $conv14 = Math_fround(_GetScreenHeight() | 0);
 $y = $gestureEvent + 24 + 4 | 0;
 HEAPF32[$y >> 2] = Math_fround(Math_fround(HEAPF32[$y >> 2]) / $conv14);
 dest = $gestureEvent$byval_copy;
 src = $gestureEvent;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _ProcessGestureEvent($gestureEvent$byval_copy);
 STACKTOP = sp;
 return;
}

function _rlOrtho($left, $right, $bottom, $top, $znear, $zfar) {
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $znear = +$znear;
 $zfar = +$zfar;
 var $$byval_copy = 0, $6 = 0, $bottom$addr = 0, $left$addr = 0, $matOrtho = 0, $matOrtho$byval_copy = 0, $right$addr = 0, $tmp = 0, $top$addr = 0, $zfar$addr = 0, $znear$addr = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 $matOrtho$byval_copy = sp + 240 | 0;
 $$byval_copy = sp + 176 | 0;
 $left$addr = sp + 40 | 0;
 $right$addr = sp + 32 | 0;
 $bottom$addr = sp + 24 | 0;
 $top$addr = sp + 16 | 0;
 $znear$addr = sp + 8 | 0;
 $zfar$addr = sp;
 $matOrtho = sp + 112 | 0;
 $tmp = sp + 48 | 0;
 HEAPF64[$left$addr >> 3] = $left;
 HEAPF64[$right$addr >> 3] = $right;
 HEAPF64[$bottom$addr >> 3] = $bottom;
 HEAPF64[$top$addr >> 3] = $top;
 HEAPF64[$znear$addr >> 3] = $znear;
 HEAPF64[$zfar$addr >> 3] = $zfar;
 _MatrixOrtho($matOrtho, +HEAPF64[$left$addr >> 3], +HEAPF64[$right$addr >> 3], +HEAPF64[$bottom$addr >> 3], +HEAPF64[$top$addr >> 3], +HEAPF64[$znear$addr >> 3], +HEAPF64[$zfar$addr >> 3]);
 CSE$0 = HEAP32[7379] | 0;
 $6 = CSE$0 | 0;
 dest = $$byval_copy;
 src = CSE$0 | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $matOrtho$byval_copy;
 src = $matOrtho;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixMultiply($tmp, $$byval_copy, $matOrtho$byval_copy);
 dest = $6;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _MouseCursorPosCallback($window, $x, $y) {
 $window = $window | 0;
 $x = +$x;
 $y = +$y;
 var $$compoundliteral = 0, $conv12 = f0, $conv7 = f0, $gestureEvent = 0, $gestureEvent$byval_copy = 0, $position = 0, $position5 = 0, $position8 = 0, $x$addr = 0, $y$addr = 0, $y15 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 $gestureEvent$byval_copy = sp + 88 | 0;
 $x$addr = sp + 8 | 0;
 $y$addr = sp;
 $gestureEvent = sp + 24 | 0;
 $$compoundliteral = sp + 16 | 0;
 HEAP32[sp + 80 >> 2] = $window;
 HEAPF64[$x$addr >> 3] = $x;
 HEAPF64[$y$addr >> 3] = $y;
 HEAP32[$gestureEvent >> 2] = 2;
 HEAP32[$gestureEvent + 8 >> 2] = 0;
 HEAP32[$gestureEvent + 4 >> 2] = 1;
 $position = $gestureEvent + 24 | 0;
 HEAPF32[$$compoundliteral >> 2] = Math_fround(+HEAPF64[$x$addr >> 3]);
 HEAPF32[$$compoundliteral + 4 >> 2] = Math_fround(+HEAPF64[$y$addr >> 3]);
 HEAP32[$position >> 2] = HEAP32[$$compoundliteral >> 2];
 HEAP32[$position + 4 >> 2] = HEAP32[$$compoundliteral + 4 >> 2];
 $position5 = $gestureEvent + 24 | 0;
 HEAP32[5244] = HEAP32[$position5 >> 2];
 HEAP32[5245] = HEAP32[$position5 + 4 >> 2];
 $conv7 = Math_fround(_GetScreenWidth() | 0);
 $position8 = $gestureEvent + 24 | 0;
 HEAPF32[$position8 >> 2] = Math_fround(Math_fround(HEAPF32[$position8 >> 2]) / $conv7);
 $conv12 = Math_fround(_GetScreenHeight() | 0);
 $y15 = $gestureEvent + 24 + 4 | 0;
 HEAPF32[$y15 >> 2] = Math_fround(Math_fround(HEAPF32[$y15 >> 2]) / $conv12);
 dest = $gestureEvent$byval_copy;
 src = $gestureEvent;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _ProcessGestureEvent($gestureEvent$byval_copy);
 STACKTOP = sp;
 return;
}

function _GifPartitionByMedian($image, $left, $right, $com, $neededCenter) {
 $image = $image | 0;
 $left = $left | 0;
 $right = $right | 0;
 $com = $com | 0;
 $neededCenter = $neededCenter | 0;
 var $com$addr = 0, $image$addr = 0, $left$addr = 0, $neededCenter$addr = 0, $pivotIndex = 0, $right$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $image$addr = sp + 20 | 0;
 $left$addr = sp + 16 | 0;
 $right$addr = sp + 12 | 0;
 $com$addr = sp + 8 | 0;
 $neededCenter$addr = sp + 4 | 0;
 $pivotIndex = sp;
 HEAP32[$image$addr >> 2] = $image;
 HEAP32[$left$addr >> 2] = $left;
 HEAP32[$right$addr >> 2] = $right;
 HEAP32[$com$addr >> 2] = $com;
 HEAP32[$neededCenter$addr >> 2] = $neededCenter;
 if ((HEAP32[$left$addr >> 2] | 0) >= ((HEAP32[$right$addr >> 2] | 0) - 1 | 0)) {
  STACKTOP = sp;
  return;
 }
 CSE$0 = HEAP32[$left$addr >> 2] | 0;
 HEAP32[$pivotIndex >> 2] = (CSE$0 | 0) + (((HEAP32[$right$addr >> 2] | 0) - CSE$0 | 0) / 2 | 0);
 HEAP32[$pivotIndex >> 2] = _GifPartition(HEAP32[$image$addr >> 2] | 0, HEAP32[$left$addr >> 2] | 0, HEAP32[$right$addr >> 2] | 0, HEAP32[$com$addr >> 2] | 0, HEAP32[$pivotIndex >> 2] | 0) | 0;
 if ((HEAP32[$pivotIndex >> 2] | 0) > (HEAP32[$neededCenter$addr >> 2] | 0)) _GifPartitionByMedian(HEAP32[$image$addr >> 2] | 0, HEAP32[$left$addr >> 2] | 0, HEAP32[$pivotIndex >> 2] | 0, HEAP32[$com$addr >> 2] | 0, HEAP32[$neededCenter$addr >> 2] | 0);
 if ((HEAP32[$pivotIndex >> 2] | 0) >= (HEAP32[$neededCenter$addr >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 _GifPartitionByMedian(HEAP32[$image$addr >> 2] | 0, (HEAP32[$pivotIndex >> 2] | 0) + 1 | 0, HEAP32[$right$addr >> 2] | 0, HEAP32[$com$addr >> 2] | 0, HEAP32[$neededCenter$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _stbi_write_png($filename, $x, $y, $comp, $data, $stride_bytes) {
 $filename = $filename | 0;
 $x = $x | 0;
 $y = $y | 0;
 $comp = $comp | 0;
 $data = $data | 0;
 $stride_bytes = $stride_bytes | 0;
 var $13 = 0, $8 = 0, $comp$addr = 0, $data$addr = 0, $f = 0, $filename$addr = 0, $len = 0, $png = 0, $retval = 0, $stride_bytes$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $retval = sp + 36 | 0;
 $filename$addr = sp + 32 | 0;
 $x$addr = sp + 28 | 0;
 $y$addr = sp + 24 | 0;
 $comp$addr = sp + 20 | 0;
 $data$addr = sp + 16 | 0;
 $stride_bytes$addr = sp + 12 | 0;
 $f = sp + 8 | 0;
 $len = sp + 4 | 0;
 $png = sp;
 HEAP32[$filename$addr >> 2] = $filename;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$comp$addr >> 2] = $comp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$stride_bytes$addr >> 2] = $stride_bytes;
 HEAP32[$png >> 2] = _stbi_write_png_to_mem(HEAP32[$data$addr >> 2] | 0, HEAP32[$stride_bytes$addr >> 2] | 0, HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$comp$addr >> 2] | 0, $len) | 0;
 if (!(HEAP32[$png >> 2] | 0)) {
  HEAP32[$retval >> 2] = 0;
  $13 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 HEAP32[$f >> 2] = _stbiw__fopen(HEAP32[$filename$addr >> 2] | 0, 12224) | 0;
 $8 = HEAP32[$png >> 2] | 0;
 if (HEAP32[$f >> 2] | 0) {
  _fwrite($8, 1, HEAP32[$len >> 2] | 0, HEAP32[$f >> 2] | 0) | 0;
  _fclose(HEAP32[$f >> 2] | 0) | 0;
  _free(HEAP32[$png >> 2] | 0);
  HEAP32[$retval >> 2] = 1;
  $13 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 } else {
  _free($8);
  HEAP32[$retval >> 2] = 0;
  $13 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 return 0;
}

function _stbir__filter_trapezoid($x, $scale) {
 $x = Math_fround($x);
 $scale = Math_fround($scale);
 var $10 = f0, $13 = f0, $5 = f0, $8 = f0, $halfscale = 0, $r = 0, $retval = 0, $scale$addr = 0, $sub8 = f0, $t = 0, $x$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 20 | 0;
 $x$addr = sp + 16 | 0;
 $scale$addr = sp + 12 | 0;
 $halfscale = sp + 8 | 0;
 $t = sp + 4 | 0;
 $r = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$scale$addr >> 2] = $scale;
 HEAPF32[$halfscale >> 2] = Math_fround(Math_fround(HEAPF32[$scale$addr >> 2]) / Math_fround(2.0));
 HEAPF32[$t >> 2] = Math_fround(Math_fround(HEAPF32[$halfscale >> 2]) + Math_fround(.5));
 if (!(Math_fround(HEAPF32[$scale$addr >> 2]) <= Math_fround(1.0))) ___assert_fail(13847, 12378, 762, 13883);
 HEAPF32[$x$addr >> 2] = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[$x$addr >> 2]))));
 $5 = Math_fround(HEAPF32[$x$addr >> 2]);
 if ($5 >= Math_fround(HEAPF32[$t >> 2])) {
  HEAPF32[$retval >> 2] = Math_fround(0.0);
  $13 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($13);
 }
 HEAPF32[$r >> 2] = Math_fround(Math_fround(.5) - Math_fround(HEAPF32[$halfscale >> 2]));
 $8 = Math_fround(HEAPF32[$x$addr >> 2]);
 if ($8 <= Math_fround(HEAPF32[$r >> 2])) {
  HEAPF32[$retval >> 2] = Math_fround(1.0);
  $13 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($13);
 } else {
  $10 = Math_fround(HEAPF32[$t >> 2]);
  $sub8 = Math_fround($10 - Math_fround(HEAPF32[$x$addr >> 2]));
  HEAPF32[$retval >> 2] = Math_fround($sub8 / Math_fround(HEAPF32[$scale$addr >> 2]));
  $13 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($13);
 }
 return Math_fround(0.0);
}

function _IsFileExtension($fileName, $ext) {
 $fileName = $fileName | 0;
 $ext = $ext | 0;
 var $10 = 0, $checkExts = 0, $ext$addr = 0, $extCount = 0, $fileExt = 0, $fileExtLower = 0, $fileName$addr = 0, $i = 0, $result = 0, $tobool = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $fileName$addr = sp + 36 | 0;
 $ext$addr = sp + 32 | 0;
 $result = sp + 40 | 0;
 $fileExt = sp + 28 | 0;
 $extCount = sp + 24 | 0;
 $checkExts = sp + 20 | 0;
 $fileExtLower = sp;
 $i = sp + 16 | 0;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$ext$addr >> 2] = $ext;
 HEAP8[$result >> 0] = 0;
 HEAP32[$fileExt >> 2] = _GetExtension(HEAP32[$fileName$addr >> 2] | 0) | 0;
 if (!(HEAP32[$fileExt >> 2] | 0)) {
  $10 = HEAP8[$result >> 0] | 0;
  $tobool = $10 & 1;
  STACKTOP = sp;
  return $tobool | 0;
 }
 HEAP32[$extCount >> 2] = 0;
 HEAP32[$checkExts >> 2] = _TextSplit(HEAP32[$ext$addr >> 2] | 0, 59, $extCount) | 0;
 HEAP32[$fileExtLower >> 2] = 0;
 HEAP32[$fileExtLower + 4 >> 2] = 0;
 HEAP32[$fileExtLower + 8 >> 2] = 0;
 HEAP32[$fileExtLower + 12 >> 2] = 0;
 _strcpy($fileExtLower, _TextToLower(HEAP32[$fileExt >> 2] | 0) | 0) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$extCount >> 2] | 0)) {
   label = 7;
   break;
  }
  if (_TextIsEqual($fileExtLower, _TextToLower((HEAP32[(HEAP32[$checkExts >> 2] | 0) + (HEAP32[$i >> 2] << 2) >> 2] | 0) + 1 | 0) | 0) | 0) break;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 7) {
  $10 = HEAP8[$result >> 0] | 0;
  $tobool = $10 & 1;
  STACKTOP = sp;
  return $tobool | 0;
 }
 HEAP8[$result >> 0] = 1;
 $10 = HEAP8[$result >> 0] | 0;
 $tobool = $10 & 1;
 STACKTOP = sp;
 return $tobool | 0;
}

function _stbir__add_empty_ring_buffer_entry($stbir_info, $n) {
 $stbir_info = $stbir_info | 0;
 $n = $n | 0;
 var $n$addr = 0, $ring_buffer = 0, $ring_buffer_begin_index1 = 0, $ring_buffer_index = 0, $stbir_info$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stbir_info$addr = sp + 12 | 0;
 $n$addr = sp + 8 | 0;
 $ring_buffer_index = sp + 4 | 0;
 $ring_buffer = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 172 >> 2] = HEAP32[$n$addr >> 2];
 $ring_buffer_begin_index1 = (HEAP32[$stbir_info$addr >> 2] | 0) + 176 | 0;
 do if ((HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0) < 0) {
  HEAP32[$ring_buffer_begin_index1 >> 2] = 0;
  HEAP32[$ring_buffer_index >> 2] = 0;
  HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 168 >> 2] = HEAP32[$n$addr >> 2];
 } else {
  CSE$1 = HEAP32[$stbir_info$addr >> 2] | 0;
  HEAP32[$ring_buffer_index >> 2] = ((HEAP32[$ring_buffer_begin_index1 >> 2] | 0) + ((HEAP32[CSE$1 + 172 >> 2] | 0) - (HEAP32[CSE$1 + 168 >> 2] | 0)) | 0) % (HEAP32[CSE$1 + 164 >> 2] | 0) | 0;
  if ((HEAP32[$ring_buffer_index >> 2] | 0) != (HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 176 >> 2] | 0)) break; else ___assert_fail(13230, 12378, 1431, 13287);
 } while (0);
 CSE$0 = HEAP32[$stbir_info$addr >> 2] | 0;
 HEAP32[$ring_buffer >> 2] = _stbir__get_ring_buffer_entry(HEAP32[CSE$0 + 180 >> 2] | 0, HEAP32[$ring_buffer_index >> 2] | 0, ((HEAP32[CSE$0 + 160 >> 2] | 0) >>> 0) / 4 | 0) | 0;
 _memset(HEAP32[$ring_buffer >> 2] | 0, 0, HEAP32[(HEAP32[$stbir_info$addr >> 2] | 0) + 160 >> 2] | 0) | 0;
 STACKTOP = sp;
 return HEAP32[$ring_buffer >> 2] | 0;
}

function _stbir__get_ring_buffer_scanline($get_scanline, $ring_buffer, $begin_index, $first_scanline, $ring_buffer_num_entries, $ring_buffer_length) {
 $get_scanline = $get_scanline | 0;
 $ring_buffer = $ring_buffer | 0;
 $begin_index = $begin_index | 0;
 $first_scanline = $first_scanline | 0;
 $ring_buffer_num_entries = $ring_buffer_num_entries | 0;
 $ring_buffer_length = $ring_buffer_length | 0;
 var $begin_index$addr = 0, $call = 0, $first_scanline$addr = 0, $get_scanline$addr = 0, $ring_buffer$addr = 0, $ring_buffer_index = 0, $ring_buffer_length$addr = 0, $ring_buffer_num_entries$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $get_scanline$addr = sp + 24 | 0;
 $ring_buffer$addr = sp + 20 | 0;
 $begin_index$addr = sp + 16 | 0;
 $first_scanline$addr = sp + 12 | 0;
 $ring_buffer_num_entries$addr = sp + 8 | 0;
 $ring_buffer_length$addr = sp + 4 | 0;
 $ring_buffer_index = sp;
 HEAP32[$get_scanline$addr >> 2] = $get_scanline;
 HEAP32[$ring_buffer$addr >> 2] = $ring_buffer;
 HEAP32[$begin_index$addr >> 2] = $begin_index;
 HEAP32[$first_scanline$addr >> 2] = $first_scanline;
 HEAP32[$ring_buffer_num_entries$addr >> 2] = $ring_buffer_num_entries;
 HEAP32[$ring_buffer_length$addr >> 2] = $ring_buffer_length;
 HEAP32[$ring_buffer_index >> 2] = ((HEAP32[$begin_index$addr >> 2] | 0) + ((HEAP32[$get_scanline$addr >> 2] | 0) - (HEAP32[$first_scanline$addr >> 2] | 0)) | 0) % (HEAP32[$ring_buffer_num_entries$addr >> 2] | 0) | 0;
 $call = _stbir__get_ring_buffer_entry(HEAP32[$ring_buffer$addr >> 2] | 0, HEAP32[$ring_buffer_index >> 2] | 0, HEAP32[$ring_buffer_length$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function ___strchrnul($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $conv1 = 0, $incdec$ptr = 0, $incdec$ptr19 = 0, $mul = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0;
 $conv1 = $c & 255;
 L1 : do if (!$conv1) $retval$0 = $s + (_strlen($s) | 0) | 0; else {
  if (!($s & 3)) $s$addr$0$lcssa = $s; else {
   $1 = $c & 255;
   $s$addr$036 = $s;
   while (1) {
    $2 = HEAP8[$s$addr$036 >> 0] | 0;
    if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 == $1 << 24 >> 24) {
     $retval$0 = $s$addr$036;
     break L1;
    }
    $incdec$ptr = $s$addr$036 + 1 | 0;
    if (!($incdec$ptr & 3)) {
     $s$addr$0$lcssa = $incdec$ptr;
     break;
    } else $s$addr$036 = $incdec$ptr;
   }
  }
  $mul = Math_imul($conv1, 16843009) | 0;
  $4 = HEAP32[$s$addr$0$lcssa >> 2] | 0;
  L10 : do if (!(($4 & -2139062144 ^ -2139062144) & $4 + -16843009)) {
   $5 = $4;
   $w$032 = $s$addr$0$lcssa;
   while (1) {
    $xor = $5 ^ $mul;
    if (($xor & -2139062144 ^ -2139062144) & $xor + -16843009 | 0) {
     $w$0$lcssa = $w$032;
     break L10;
    }
    $incdec$ptr19 = $w$032 + 4 | 0;
    $5 = HEAP32[$incdec$ptr19 >> 2] | 0;
    if (($5 & -2139062144 ^ -2139062144) & $5 + -16843009 | 0) {
     $w$0$lcssa = $incdec$ptr19;
     break;
    } else $w$032 = $incdec$ptr19;
   }
  } else $w$0$lcssa = $s$addr$0$lcssa; while (0);
  $7 = $c & 255;
  $s$addr$1 = $w$0$lcssa;
  while (1) {
   $8 = HEAP8[$s$addr$1 >> 0] | 0;
   if ($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 == $7 << 24 >> 24) {
    $retval$0 = $s$addr$1;
    break;
   } else $s$addr$1 = $s$addr$1 + 1 | 0;
  }
 } while (0);
 return $retval$0 | 0;
}

function _MatrixToFloatV($agg$result, $mat) {
 $agg$result = $agg$result | 0;
 $mat = $mat | 0;
 var $buffer = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $buffer = sp;
 dest = $buffer;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$buffer >> 2] = Math_fround(HEAPF32[$mat >> 2]);
 HEAPF32[$buffer + 4 >> 2] = Math_fround(HEAPF32[$mat + 16 >> 2]);
 HEAPF32[$buffer + 8 >> 2] = Math_fround(HEAPF32[$mat + 32 >> 2]);
 HEAPF32[$buffer + 12 >> 2] = Math_fround(HEAPF32[$mat + 48 >> 2]);
 HEAPF32[$buffer + 16 >> 2] = Math_fround(HEAPF32[$mat + 4 >> 2]);
 HEAPF32[$buffer + 20 >> 2] = Math_fround(HEAPF32[$mat + 20 >> 2]);
 HEAPF32[$buffer + 24 >> 2] = Math_fround(HEAPF32[$mat + 36 >> 2]);
 HEAPF32[$buffer + 28 >> 2] = Math_fround(HEAPF32[$mat + 52 >> 2]);
 HEAPF32[$buffer + 32 >> 2] = Math_fround(HEAPF32[$mat + 8 >> 2]);
 HEAPF32[$buffer + 36 >> 2] = Math_fround(HEAPF32[$mat + 24 >> 2]);
 HEAPF32[$buffer + 40 >> 2] = Math_fround(HEAPF32[$mat + 40 >> 2]);
 HEAPF32[$buffer + 44 >> 2] = Math_fround(HEAPF32[$mat + 56 >> 2]);
 HEAPF32[$buffer + 48 >> 2] = Math_fround(HEAPF32[$mat + 12 >> 2]);
 HEAPF32[$buffer + 52 >> 2] = Math_fround(HEAPF32[$mat + 28 >> 2]);
 HEAPF32[$buffer + 56 >> 2] = Math_fround(HEAPF32[$mat + 44 >> 2]);
 HEAPF32[$buffer + 60 >> 2] = Math_fround(HEAPF32[$mat + 60 >> 2]);
 dest = $agg$result;
 src = $buffer;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _TakeScreenshot($fileName) {
 $fileName = $fileName | 0;
 var $call4 = 0, $call6 = 0, $fileName$addr = 0, $image = 0, $image$byval_copy = 0, $imgData = 0, $path = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(576);
 $image$byval_copy = sp + 552 | 0;
 $vararg_buffer2 = sp + 520 | 0;
 $vararg_buffer = sp + 512 | 0;
 $fileName$addr = sp + 548 | 0;
 $imgData = sp + 544 | 0;
 $image = sp + 524 | 0;
 $path = sp;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$imgData >> 2] = _rlReadScreenPixels(HEAP32[7547] | 0, HEAP32[7548] | 0) | 0;
 HEAP32[$image >> 2] = HEAP32[$imgData >> 2];
 HEAP32[$image + 4 >> 2] = HEAP32[7547];
 HEAP32[$image + 8 >> 2] = HEAP32[7548];
 HEAP32[$image + 12 >> 2] = 1;
 HEAP32[$image + 16 >> 2] = 7;
 _memset($path | 0, 0, 512) | 0;
 _strcpy($path, HEAP32[$fileName$addr >> 2] | 0) | 0;
 HEAP32[$image$byval_copy >> 2] = HEAP32[$image >> 2];
 HEAP32[$image$byval_copy + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$image$byval_copy + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$image$byval_copy + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$image$byval_copy + 16 >> 2] = HEAP32[$image + 16 >> 2];
 _ExportImage($image$byval_copy, $path);
 _free(HEAP32[$imgData >> 2] | 0);
 $call4 = _GetFileName($path) | 0;
 $call6 = _GetFileName($path) | 0;
 HEAP32[$vararg_buffer >> 2] = $call4;
 HEAP32[$vararg_buffer + 4 >> 2] = $call6;
 _emscripten_run_script(_TextFormat(11714, $vararg_buffer) | 0);
 HEAP32[$vararg_buffer2 >> 2] = $path;
 _TraceLog(3, 11848, $vararg_buffer2);
 STACKTOP = sp;
 return;
}

function _stbiw__sbgrowf($arr, $increment, $itemsize) {
 $arr = $arr | 0;
 $increment = $increment | 0;
 $itemsize = $itemsize | 0;
 var $23 = 0, $24 = 0, $arr$addr = 0, $cond = 0, $cond7 = 0, $increment$addr = 0, $itemsize$addr = 0, $m = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $arr$addr = sp + 16 | 0;
 $increment$addr = sp + 12 | 0;
 $itemsize$addr = sp + 8 | 0;
 $m = sp + 4 | 0;
 $p = sp;
 HEAP32[$arr$addr >> 2] = $arr;
 HEAP32[$increment$addr >> 2] = $increment;
 HEAP32[$itemsize$addr >> 2] = $itemsize;
 if (HEAP32[HEAP32[$arr$addr >> 2] >> 2] | 0) $cond = (HEAP32[(HEAP32[HEAP32[$arr$addr >> 2] >> 2] | 0) + -8 >> 2] << 1) + (HEAP32[$increment$addr >> 2] | 0) | 0; else $cond = (HEAP32[$increment$addr >> 2] | 0) + 1 | 0;
 HEAP32[$m >> 2] = $cond;
 if (HEAP32[HEAP32[$arr$addr >> 2] >> 2] | 0) $cond7 = (HEAP32[HEAP32[$arr$addr >> 2] >> 2] | 0) + -8 | 0; else $cond7 = 0;
 HEAP32[$p >> 2] = _realloc($cond7, (Math_imul(HEAP32[$itemsize$addr >> 2] | 0, HEAP32[$m >> 2] | 0) | 0) + 8 | 0) | 0;
 if (!(HEAP32[$p >> 2] | 0)) ___assert_fail(12272, 12174, 793, 12274);
 if (!(HEAP32[$p >> 2] | 0)) {
  $23 = HEAP32[$arr$addr >> 2] | 0;
  $24 = HEAP32[$23 >> 2] | 0;
  STACKTOP = sp;
  return $24 | 0;
 }
 if (!(HEAP32[HEAP32[$arr$addr >> 2] >> 2] | 0)) HEAP32[(HEAP32[$p >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[HEAP32[$arr$addr >> 2] >> 2] = (HEAP32[$p >> 2] | 0) + 8;
 HEAP32[(HEAP32[HEAP32[$arr$addr >> 2] >> 2] | 0) + -8 >> 2] = HEAP32[$m >> 2];
 $23 = HEAP32[$arr$addr >> 2] | 0;
 $24 = HEAP32[$23 >> 2] | 0;
 STACKTOP = sp;
 return $24 | 0;
}

function _stbir__filter_mitchell($x, $s) {
 $x = Math_fround($x);
 $s = Math_fround($s);
 var $3 = f0, $6 = f0, $7 = f0, $9 = f0, $cmp = 0, $mul = f0, $retval = 0, $x$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $x$addr = sp + 4 | 0;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[sp >> 2] = $s;
 HEAPF32[$x$addr >> 2] = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[$x$addr >> 2]))));
 $cmp = Math_fround(HEAPF32[$x$addr >> 2]) < Math_fround(1.0);
 $3 = Math_fround(HEAPF32[$x$addr >> 2]);
 if ($cmp) {
  $mul = Math_fround($3 * Math_fround(HEAPF32[$x$addr >> 2]));
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(Math_fround($mul * Math_fround(Math_fround(Math_fround(HEAPF32[$x$addr >> 2]) * Math_fround(21.0)) - Math_fround(36.0))) + Math_fround(16.0)) / Math_fround(18.0));
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 }
 if ($3 < Math_fround(2.0)) {
  $6 = Math_fround(HEAPF32[$x$addr >> 2]);
  $7 = Math_fround(HEAPF32[$x$addr >> 2]);
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_fround($7 * Math_fround(Math_fround(36.0) - Math_fround(Math_fround(HEAPF32[$x$addr >> 2]) * Math_fround(7.0)))) + Math_fround(-60.0))) + Math_fround(32.0)) / Math_fround(18.0));
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 } else {
  HEAPF32[$retval >> 2] = Math_fround(0.0);
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 }
 return Math_fround(0.0);
}

function _rlTranslatef($x, $y, $z) {
 $x = Math_fround($x);
 $y = Math_fround($y);
 $z = Math_fround($z);
 var $$byval_copy = 0, $0 = f0, $1 = f0, $3 = 0, $4 = 0, $matTranslation = 0, $matTranslation$byval_copy = 0, $tmp = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, dest = 0, sp = 0, src = 0, stop = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 $$byval_copy = sp + 208 | 0;
 $matTranslation$byval_copy = sp + 144 | 0;
 $x$addr = sp + 136 | 0;
 $y$addr = sp + 132 | 0;
 $z$addr = sp + 128 | 0;
 $matTranslation = sp + 64 | 0;
 $tmp = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAPF32[$z$addr >> 2] = $z;
 $0 = Math_fround(HEAPF32[$x$addr >> 2]);
 $1 = Math_fround(HEAPF32[$y$addr >> 2]);
 _MatrixTranslate($matTranslation, $0, $1, Math_fround(HEAPF32[$z$addr >> 2]));
 CSE$0 = HEAP32[7379] | 0;
 $3 = CSE$0 | 0;
 $4 = CSE$0 | 0;
 dest = $matTranslation$byval_copy;
 src = $matTranslation;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 dest = $$byval_copy;
 src = $4;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixMultiply($tmp, $matTranslation$byval_copy, $$byval_copy);
 dest = $3;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _strcspn($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $0 = 0, $2 = 0, $3 = 0, $6 = 0, $7 = 0, $arrayidx8 = 0, $byteset = 0, $c$addr$019 = 0, $conv14 = 0, $conv6 = 0, $incdec$ptr24 = 0, $s$addr$0$lcssa$sink = 0, $s$addr$016 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $byteset = sp;
 $0 = HEAP8[$c >> 0] | 0;
 L1 : do if (!($0 << 24 >> 24)) label = 3; else if (!(HEAP8[$c + 1 >> 0] | 0)) label = 3; else {
  _memset($byteset | 0, 0, 32) | 0;
  $2 = HEAP8[$c >> 0] | 0;
  if ($2 << 24 >> 24) {
   $3 = $2;
   $c$addr$019 = $c;
   do {
    $conv6 = $3 & 255;
    $arrayidx8 = $byteset + ($conv6 >>> 5 << 2) | 0;
    HEAP32[$arrayidx8 >> 2] = HEAP32[$arrayidx8 >> 2] | 1 << ($conv6 & 31);
    $c$addr$019 = $c$addr$019 + 1 | 0;
    $3 = HEAP8[$c$addr$019 >> 0] | 0;
   } while ($3 << 24 >> 24 != 0);
  }
  $6 = HEAP8[$s >> 0] | 0;
  if (!($6 << 24 >> 24)) $s$addr$0$lcssa$sink = $s; else {
   $7 = $6;
   $s$addr$016 = $s;
   while (1) {
    $conv14 = $7 & 255;
    if (HEAP32[$byteset + ($conv14 >>> 5 << 2) >> 2] & 1 << ($conv14 & 31) | 0) {
     $s$addr$0$lcssa$sink = $s$addr$016;
     break L1;
    }
    $incdec$ptr24 = $s$addr$016 + 1 | 0;
    $7 = HEAP8[$incdec$ptr24 >> 0] | 0;
    if (!($7 << 24 >> 24)) {
     $s$addr$0$lcssa$sink = $incdec$ptr24;
     break;
    } else $s$addr$016 = $incdec$ptr24;
   }
  }
 } while (0);
 if ((label | 0) == 3) $s$addr$0$lcssa$sink = ___strchrnul($s, $0 << 24 >> 24) | 0;
 STACKTOP = sp;
 return $s$addr$0$lcssa$sink - $s | 0;
}

function _GetPixelDataSize($width, $height, $format) {
 $width = $width | 0;
 $height = $height | 0;
 $format = $format | 0;
 var $bpp = 0, $dataSize = 0, $format$addr = 0, $height$addr = 0, $mul = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $width$addr = sp + 16 | 0;
 $height$addr = sp + 12 | 0;
 $format$addr = sp + 8 | 0;
 $dataSize = sp + 4 | 0;
 $bpp = sp;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$format$addr >> 2] = $format;
 HEAP32[$dataSize >> 2] = 0;
 HEAP32[$bpp >> 2] = 0;
 do switch (HEAP32[$format$addr >> 2] | 0) {
 case 1:
  {
   HEAP32[$bpp >> 2] = 8;
   break;
  }
 case 6:
 case 5:
 case 3:
 case 2:
  {
   HEAP32[$bpp >> 2] = 16;
   break;
  }
 case 7:
  {
   HEAP32[$bpp >> 2] = 32;
   break;
  }
 case 4:
  {
   HEAP32[$bpp >> 2] = 24;
   break;
  }
 case 8:
  {
   HEAP32[$bpp >> 2] = 32;
   break;
  }
 case 9:
  {
   HEAP32[$bpp >> 2] = 96;
   break;
  }
 case 10:
  {
   HEAP32[$bpp >> 2] = 128;
   break;
  }
 case 19:
 case 18:
 case 16:
 case 15:
 case 12:
 case 11:
  {
   HEAP32[$bpp >> 2] = 4;
   break;
  }
 case 20:
 case 17:
 case 14:
 case 13:
  {
   HEAP32[$bpp >> 2] = 8;
   break;
  }
 case 21:
  {
   HEAP32[$bpp >> 2] = 2;
   break;
  }
 default:
  {}
 } while (0);
 $mul = Math_imul(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0;
 HEAP32[$dataSize >> 2] = (Math_imul($mul, HEAP32[$bpp >> 2] | 0) | 0) / 8 | 0;
 STACKTOP = sp;
 return HEAP32[$dataSize >> 2] | 0;
}

function _stbir__filter_cubic($x, $s) {
 $x = Math_fround($x);
 $s = Math_fround($s);
 var $3 = f0, $6 = f0, $7 = f0, $9 = f0, $cmp = 0, $mul = f0, $retval = 0, $x$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $x$addr = sp + 4 | 0;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[sp >> 2] = $s;
 HEAPF32[$x$addr >> 2] = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[$x$addr >> 2]))));
 $cmp = Math_fround(HEAPF32[$x$addr >> 2]) < Math_fround(1.0);
 $3 = Math_fround(HEAPF32[$x$addr >> 2]);
 if ($cmp) {
  $mul = Math_fround($3 * Math_fround(HEAPF32[$x$addr >> 2]));
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(Math_fround($mul * Math_fround(Math_fround(Math_fround(HEAPF32[$x$addr >> 2]) * Math_fround(3.0)) - Math_fround(6.0))) + Math_fround(4.0)) / Math_fround(6.0));
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 }
 if ($3 < Math_fround(2.0)) {
  $6 = Math_fround(HEAPF32[$x$addr >> 2]);
  $7 = Math_fround(HEAPF32[$x$addr >> 2]);
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_fround($7 * Math_fround(Math_fround(6.0) - Math_fround(HEAPF32[$x$addr >> 2]))) + Math_fround(-12.0))) + Math_fround(8.0)) / Math_fround(6.0));
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 } else {
  HEAPF32[$retval >> 2] = Math_fround(0.0);
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 }
 return Math_fround(0.0);
}

function _MatrixTranslate($agg$result, $x, $y, $z) {
 $agg$result = $agg$result | 0;
 $x = Math_fround($x);
 $y = Math_fround($y);
 $z = Math_fround($z);
 var $result = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $x$addr = sp + 72 | 0;
 $y$addr = sp + 68 | 0;
 $z$addr = sp + 64 | 0;
 $result = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAPF32[$z$addr >> 2] = $z;
 HEAPF32[$result >> 2] = Math_fround(1.0);
 HEAPF32[$result + 4 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 8 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 12 >> 2] = Math_fround(HEAPF32[$x$addr >> 2]);
 HEAPF32[$result + 16 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 20 >> 2] = Math_fround(1.0);
 HEAPF32[$result + 24 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 28 >> 2] = Math_fround(HEAPF32[$y$addr >> 2]);
 HEAPF32[$result + 32 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 36 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 40 >> 2] = Math_fround(1.0);
 HEAPF32[$result + 44 >> 2] = Math_fround(HEAPF32[$z$addr >> 2]);
 HEAPF32[$result + 48 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 52 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 56 >> 2] = Math_fround(0.0);
 HEAPF32[$result + 60 >> 2] = Math_fround(1.0);
 dest = $agg$result;
 src = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _Vector3Normalize($agg$result, $v) {
 $agg$result = $agg$result | 0;
 $v = $v | 0;
 var $2 = f0, $4 = f0, $6 = f0, $ilength = 0, $length = 0, $result = 0, $v$byval_copy = 0, $y = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $v$byval_copy = sp + 20 | 0;
 $result = sp + 8 | 0;
 $length = sp + 4 | 0;
 $ilength = sp;
 HEAP32[$result >> 2] = HEAP32[$v >> 2];
 HEAP32[$result + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$result + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAP32[$v$byval_copy >> 2] = HEAP32[$v >> 2];
 HEAP32[$v$byval_copy + 4 >> 2] = HEAP32[$v + 4 >> 2];
 HEAP32[$v$byval_copy + 8 >> 2] = HEAP32[$v + 8 >> 2];
 HEAPF32[$length >> 2] = Math_fround(_Vector3Length($v$byval_copy));
 if (Math_fround(HEAPF32[$length >> 2]) == Math_fround(0.0)) HEAPF32[$length >> 2] = Math_fround(1.0);
 HEAPF32[$ilength >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[$length >> 2]));
 $2 = Math_fround(HEAPF32[$ilength >> 2]);
 HEAPF32[$result >> 2] = Math_fround(Math_fround(HEAPF32[$result >> 2]) * $2);
 $4 = Math_fround(HEAPF32[$ilength >> 2]);
 $y = $result + 4 | 0;
 HEAPF32[$y >> 2] = Math_fround(Math_fround(HEAPF32[$y >> 2]) * $4);
 $6 = Math_fround(HEAPF32[$ilength >> 2]);
 $z = $result + 8 | 0;
 HEAPF32[$z >> 2] = Math_fround(Math_fround(HEAPF32[$z >> 2]) * $6);
 HEAP32[$agg$result >> 2] = HEAP32[$result >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$result + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$result + 8 >> 2];
 STACKTOP = sp;
 return;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $0 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $call16 = 0, $i$033 = 0, $i$1 = 0, $l$addr$1 = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $wend = 0, $wpos = 0, label = 0;
 label = 0;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 if (!$0) if (!(___towrite($f) | 0)) {
  $3 = HEAP32[$wend >> 2] | 0;
  label = 5;
 } else $retval$1 = 0; else {
  $3 = $0;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $wpos = $f + 20 | 0;
  $2 = HEAP32[$wpos >> 2] | 0;
  $4 = $2;
  if (($3 - $2 | 0) >>> 0 < $l >>> 0) {
   $retval$1 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $s, $l) | 0;
   break;
  }
  L10 : do if ((HEAP8[$f + 75 >> 0] | 0) < 0 | ($l | 0) == 0) {
   $9 = $4;
   $i$1 = 0;
   $l$addr$1 = $l;
   $s$addr$1 = $s;
  } else {
   $i$033 = $l;
   while (1) {
    $sub = $i$033 + -1 | 0;
    if ((HEAP8[$s + $sub >> 0] | 0) == 10) break;
    if (!$sub) {
     $9 = $4;
     $i$1 = 0;
     $l$addr$1 = $l;
     $s$addr$1 = $s;
     break L10;
    } else $i$033 = $sub;
   }
   $call16 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $s, $i$033) | 0;
   if ($call16 >>> 0 < $i$033 >>> 0) {
    $retval$1 = $call16;
    break L5;
   }
   $9 = HEAP32[$wpos >> 2] | 0;
   $i$1 = $i$033;
   $l$addr$1 = $l - $i$033 | 0;
   $s$addr$1 = $s + $i$033 | 0;
  } while (0);
  _memcpy($9 | 0, $s$addr$1 | 0, $l$addr$1 | 0) | 0;
  HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $l$addr$1;
  $retval$1 = $i$1 + $l$addr$1 | 0;
 } while (0);
 return $retval$1 | 0;
}

function _stbir__filter_catmullrom($x, $s) {
 $x = Math_fround($x);
 $s = Math_fround($s);
 var $3 = f0, $6 = f0, $7 = f0, $9 = f0, $cmp = 0, $mul = f0, $retval = 0, $x$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $x$addr = sp + 4 | 0;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[sp >> 2] = $s;
 HEAPF32[$x$addr >> 2] = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[$x$addr >> 2]))));
 $cmp = Math_fround(HEAPF32[$x$addr >> 2]) < Math_fround(1.0);
 $3 = Math_fround(HEAPF32[$x$addr >> 2]);
 if ($cmp) {
  $mul = Math_fround($3 * Math_fround(HEAPF32[$x$addr >> 2]));
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(1.0) - Math_fround($mul * Math_fround(Math_fround(2.5) - Math_fround(Math_fround(HEAPF32[$x$addr >> 2]) * Math_fround(1.5)))));
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 }
 if ($3 < Math_fround(2.0)) {
  $6 = Math_fround(HEAPF32[$x$addr >> 2]);
  $7 = Math_fround(HEAPF32[$x$addr >> 2]);
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(2.0) - Math_fround($6 * Math_fround(Math_fround($7 * Math_fround(Math_fround(Math_fround(HEAPF32[$x$addr >> 2]) * Math_fround(.5)) - Math_fround(2.5))) + Math_fround(4.0))));
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 } else {
  HEAPF32[$retval >> 2] = Math_fround(0.0);
  $9 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($9);
 }
 return Math_fround(0.0);
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$cast = 0, $$pr = 0, $0 = 0, $3 = 0, $5 = 0, $6 = 0, $buf3 = 0, $buf_size = 0, $iov = 0, $iov_len = 0, $num = 0, $retval$0 = 0, $rpos = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $iov = sp;
 $num = sp + 16 | 0;
 HEAP32[$iov >> 2] = $buf;
 $iov_len = $iov + 4 | 0;
 $buf_size = $f + 48 | 0;
 $0 = HEAP32[$buf_size >> 2] | 0;
 HEAP32[$iov_len >> 2] = $len - (($0 | 0) != 0 & 1);
 $buf3 = $f + 44 | 0;
 HEAP32[$iov + 8 >> 2] = HEAP32[$buf3 >> 2];
 HEAP32[$iov + 12 >> 2] = $0;
 if (!(___wasi_syscall_ret(___wasi_fd_read(HEAP32[$f + 60 >> 2] | 0, $iov | 0, 2, $num | 0) | 0) | 0)) {
  $$pr = HEAP32[$num >> 2] | 0;
  if (($$pr | 0) < 1) {
   $3 = $$pr;
   label = 4;
  } else {
   $5 = HEAP32[$iov_len >> 2] | 0;
   if ($$pr >>> 0 > $5 >>> 0) {
    $6 = HEAP32[$buf3 >> 2] | 0;
    $rpos = $f + 4 | 0;
    HEAP32[$rpos >> 2] = $6;
    $$cast = $6;
    HEAP32[$f + 8 >> 2] = $$cast + ($$pr - $5);
    if (!(HEAP32[$buf_size >> 2] | 0)) $retval$0 = $len; else {
     HEAP32[$rpos >> 2] = $$cast + 1;
     HEAP8[$buf + ($len + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
     $retval$0 = $len;
    }
   } else $retval$0 = $$pr;
  }
 } else {
  HEAP32[$num >> 2] = -1;
  $3 = -1;
  label = 4;
 }
 if ((label | 0) == 4) {
  HEAP32[$f >> 2] = $3 & 48 ^ 16 | HEAP32[$f >> 2];
  $retval$0 = $3;
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _TextSplit($text, $delimiter, $count) {
 $text = $text | 0;
 $delimiter = $delimiter | 0;
 $count = $count | 0;
 var $count$addr = 0, $counter = 0, $delimiter$addr = 0, $i = 0, $text$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $text$addr = sp + 12 | 0;
 $delimiter$addr = sp + 16 | 0;
 $count$addr = sp + 8 | 0;
 $counter = sp + 4 | 0;
 $i = sp;
 HEAP32[$text$addr >> 2] = $text;
 HEAP8[$delimiter$addr >> 0] = $delimiter;
 HEAP32[$count$addr >> 2] = $count;
 _memset(25792, 0, 1024) | 0;
 HEAP32[6704] = 25792;
 HEAP32[$counter >> 2] = 0;
 L1 : do if (HEAP32[$text$addr >> 2] | 0) {
  HEAP32[$counter >> 2] = 1;
  HEAP32[$i >> 2] = 0;
  while (1) {
   if ((HEAP32[$i >> 2] | 0) >= 1024) break L1;
   CSE$0 = HEAP32[$i >> 2] | 0;
   HEAP8[25792 + CSE$0 >> 0] = HEAP8[(HEAP32[$text$addr >> 2] | 0) + CSE$0 >> 0] | 0;
   if (!(HEAP8[25792 + (HEAP32[$i >> 2] | 0) >> 0] | 0)) break L1;
   if ((HEAP8[25792 + (HEAP32[$i >> 2] | 0) >> 0] | 0) == (HEAP8[$delimiter$addr >> 0] | 0)) {
    HEAP8[25792 + (HEAP32[$i >> 2] | 0) >> 0] = 0;
    HEAP32[26816 + (HEAP32[$counter >> 2] << 2) >> 2] = 25792 + (HEAP32[$i >> 2] | 0) + 1;
    HEAP32[$counter >> 2] = (HEAP32[$counter >> 2] | 0) + 1;
    if ((HEAP32[$counter >> 2] | 0) == 128) break L1;
   }
   HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
  }
 } while (0);
 HEAP32[HEAP32[$count$addr >> 2] >> 2] = HEAP32[$counter >> 2];
 STACKTOP = sp;
 return 26816;
}

function _InitWindow($width, $height, $title) {
 $width = $width | 0;
 $height = $height | 0;
 $title = $title | 0;
 var $height$addr = 0, $title$addr = 0, $vararg_buffer = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $width$addr = sp + 12 | 0;
 $height$addr = sp + 8 | 0;
 $title$addr = sp + 4 | 0;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[$title$addr >> 2] = $title;
 HEAP32[$vararg_buffer >> 2] = 11295;
 _TraceLog(3, 11272, $vararg_buffer);
 HEAP32[7524] = HEAP32[$title$addr >> 2];
 HEAP8[30894] = (_InitGraphicsDevice(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0) | 0) & 1;
 if (!(HEAP8[30894] & 1)) {
  STACKTOP = sp;
  return;
 }
 _InitTimer();
 _LoadFontDefault();
 _emscripten_set_fullscreenchange_callback_on_thread(0, 0, 1, 3, 2) | 0;
 _emscripten_set_keypress_callback_on_thread(11303, 0, 1, 4, 2) | 0;
 _emscripten_set_click_callback_on_thread(11303, 0, 1, 5, 2) | 0;
 _emscripten_set_touchstart_callback_on_thread(11303, 0, 1, 6, 2) | 0;
 _emscripten_set_touchend_callback_on_thread(11303, 0, 1, 6, 2) | 0;
 _emscripten_set_touchmove_callback_on_thread(11303, 0, 1, 6, 2) | 0;
 _emscripten_set_touchcancel_callback_on_thread(11303, 0, 1, 6, 2) | 0;
 _emscripten_set_gamepadconnected_callback_on_thread(0, 1, 7, 2) | 0;
 _emscripten_set_gamepaddisconnected_callback_on_thread(0, 1, 7, 2) | 0;
 STACKTOP = sp;
 return;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $11 = 0, $13 = 0, $7 = 0, $8 = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, $7$looptemp = 0, $8$looptemp = 0, $y$010$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $7 = $0;
  $8 = $1;
  $s$addr$013 = $s;
  do {
   $7$looptemp = $7;
   $7 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $8$looptemp = $8;
   $8 = getTempRet0() | 0;
   $11 = ___muldi3($7 | 0, $8 | 0, 10, 0) | 0;
   $13 = _i64Subtract($7$looptemp | 0, $8$looptemp | 0, $11 | 0, getTempRet0() | 0) | 0;
   getTempRet0() | 0;
   $s$addr$013 = $s$addr$013 + -1 | 0;
   HEAP8[$s$addr$013 >> 0] = $13 & 255 | 48;
  } while ($8$looptemp >>> 0 > 9 | ($8$looptemp | 0) == 9 & $7$looptemp >>> 0 > 4294967295);
  $s$addr$0$lcssa = $s$addr$013;
  $x$addr$0$lcssa$off0 = $7;
 } else {
  $s$addr$0$lcssa = $s;
  $x$addr$0$lcssa$off0 = $0;
 }
 if (!$x$addr$0$lcssa$off0) $s$addr$1$lcssa = $s$addr$0$lcssa; else {
  $s$addr$19 = $s$addr$0$lcssa;
  $y$010 = $x$addr$0$lcssa$off0;
  while (1) {
   $y$010$looptemp = $y$010;
   $y$010 = ($y$010 >>> 0) / 10 | 0;
   $incdec$ptr7 = $s$addr$19 + -1 | 0;
   HEAP8[$incdec$ptr7 >> 0] = $y$010$looptemp - ($y$010 * 10 | 0) | 48;
   if ($y$010$looptemp >>> 0 < 10) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else $s$addr$19 = $incdec$ptr7;
  }
 }
 return $s$addr$1$lcssa | 0;
}

function _stbiw__zlib_flushf($data, $bitbuffer, $bitcount) {
 $data = $data | 0;
 $bitbuffer = $bitbuffer | 0;
 $bitcount = $bitcount | 0;
 var $11 = 0, $12 = 0, $14 = 0, $2 = 0, $9 = 0, $arrayidx6 = 0, $bitbuffer$addr = 0, $bitcount$addr = 0, $conv = 0, $data$addr = 0, label = 0, sp = 0, CSE$0 = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $data$addr = sp + 8 | 0;
 $bitbuffer$addr = sp + 4 | 0;
 $bitcount$addr = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$bitbuffer$addr >> 2] = $bitbuffer;
 HEAP32[$bitcount$addr >> 2] = $bitcount;
 while (1) {
  $2 = HEAP32[$data$addr >> 2] | 0;
  if ((HEAP32[HEAP32[$bitcount$addr >> 2] >> 2] | 0) < 8) break;
  if (!$2) label = 5; else if (((HEAP32[(HEAP32[$data$addr >> 2] | 0) + -8 + 4 >> 2] | 0) + 1 | 0) >= (HEAP32[(HEAP32[$data$addr >> 2] | 0) + -8 >> 2] | 0)) label = 5;
  if ((label | 0) == 5) {
   label = 0;
   _stbiw__sbgrowf($data$addr, 1, 1) | 0;
  }
  $conv = HEAP32[HEAP32[$bitbuffer$addr >> 2] >> 2] & 255;
  CSE$0 = HEAP32[$data$addr >> 2] | 0;
  $9 = CSE$0 | 0;
  $arrayidx6 = CSE$0 + -8 + 4 | 0;
  $11 = HEAP32[$arrayidx6 >> 2] | 0;
  HEAP32[$arrayidx6 >> 2] = $11 + 1;
  HEAP8[$9 + $11 >> 0] = $conv;
  $12 = HEAP32[$bitbuffer$addr >> 2] | 0;
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) >>> 8;
  $14 = HEAP32[$bitcount$addr >> 2] | 0;
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) - 8;
 }
 STACKTOP = sp;
 return $2 | 0;
}

function _DrawCircle($centerX, $centerY, $radius, $color) {
 $centerX = $centerX | 0;
 $centerY = $centerY | 0;
 $radius = Math_fround($radius);
 $color = $color | 0;
 var $$compoundliteral = 0, $$compoundliteral$byval_copy = 0, $2 = f0, $centerX$addr = 0, $centerY$addr = 0, $color$byval_copy = 0, $radius$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $color$byval_copy = sp + 32 | 0;
 $$compoundliteral$byval_copy = sp + 24 | 0;
 $centerX$addr = sp + 16 | 0;
 $centerY$addr = sp + 12 | 0;
 $radius$addr = sp + 8 | 0;
 $$compoundliteral = sp;
 HEAP32[$centerX$addr >> 2] = $centerX;
 HEAP32[$centerY$addr >> 2] = $centerY;
 HEAPF32[$radius$addr >> 2] = $radius;
 HEAPF32[$$compoundliteral >> 2] = Math_fround(HEAP32[$centerX$addr >> 2] | 0);
 HEAPF32[$$compoundliteral + 4 >> 2] = Math_fround(HEAP32[$centerY$addr >> 2] | 0);
 $2 = Math_fround(HEAPF32[$radius$addr >> 2]);
 HEAP32[$$compoundliteral$byval_copy >> 2] = HEAP32[$$compoundliteral >> 2];
 HEAP32[$$compoundliteral$byval_copy + 4 >> 2] = HEAP32[$$compoundliteral + 4 >> 2];
 HEAP8[$color$byval_copy >> 0] = HEAP8[$color >> 0] | 0;
 HEAP8[$color$byval_copy + 1 >> 0] = HEAP8[$color + 1 >> 0] | 0;
 HEAP8[$color$byval_copy + 2 >> 0] = HEAP8[$color + 2 >> 0] | 0;
 HEAP8[$color$byval_copy + 3 >> 0] = HEAP8[$color + 3 >> 0] | 0;
 _DrawCircleV($$compoundliteral$byval_copy, $2, $color$byval_copy);
 STACKTOP = sp;
 return;
}

function _stbiw__paeth($a, $b, $c) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $18 = 0, $a$addr = 0, $b$addr = 0, $c$addr = 0, $p = 0, $pa = 0, $pb = 0, $pc = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 28 | 0;
 $a$addr = sp + 24 | 0;
 $b$addr = sp + 20 | 0;
 $c$addr = sp + 16 | 0;
 $p = sp + 12 | 0;
 $pa = sp + 8 | 0;
 $pb = sp + 4 | 0;
 $pc = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$p >> 2] = (HEAP32[$a$addr >> 2] | 0) + (HEAP32[$b$addr >> 2] | 0) - (HEAP32[$c$addr >> 2] | 0);
 HEAP32[$pa >> 2] = Math_abs((HEAP32[$p >> 2] | 0) - (HEAP32[$a$addr >> 2] | 0) | 0) | 0;
 HEAP32[$pb >> 2] = Math_abs((HEAP32[$p >> 2] | 0) - (HEAP32[$b$addr >> 2] | 0) | 0) | 0;
 HEAP32[$pc >> 2] = Math_abs((HEAP32[$p >> 2] | 0) - (HEAP32[$c$addr >> 2] | 0) | 0) | 0;
 if ((HEAP32[$pa >> 2] | 0) <= (HEAP32[$pb >> 2] | 0)) if ((HEAP32[$pa >> 2] | 0) <= (HEAP32[$pc >> 2] | 0)) {
  HEAP8[$retval >> 0] = HEAP32[$a$addr >> 2];
  $18 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 if ((HEAP32[$pb >> 2] | 0) <= (HEAP32[$pc >> 2] | 0)) {
  HEAP8[$retval >> 0] = HEAP32[$b$addr >> 2];
  $18 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  HEAP8[$retval >> 0] = HEAP32[$c$addr >> 2];
  $18 = HEAP8[$retval >> 0] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}

function _LoadTextureFromImage($agg$result, $image) {
 $agg$result = $agg$result | 0;
 $image = $image | 0;
 var $texture = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $texture = sp + 4 | 0;
 HEAP32[$texture >> 2] = 0;
 HEAP32[$texture + 4 >> 2] = 0;
 HEAP32[$texture + 8 >> 2] = 0;
 HEAP32[$texture + 12 >> 2] = 0;
 HEAP32[$texture + 16 >> 2] = 0;
 if (HEAP32[$image >> 2] | 0) if (HEAP32[$image + 4 >> 2] | 0) if (HEAP32[$image + 8 >> 2] | 0) HEAP32[$texture >> 2] = _rlLoadTexture(HEAP32[$image >> 2] | 0, HEAP32[$image + 4 >> 2] | 0, HEAP32[$image + 8 >> 2] | 0, HEAP32[$image + 16 >> 2] | 0, HEAP32[$image + 12 >> 2] | 0) | 0; else label = 5; else label = 5; else label = 5;
 if ((label | 0) == 5) _TraceLog(4, 14952, $vararg_buffer);
 HEAP32[$texture + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$texture + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$texture + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$texture + 16 >> 2] = HEAP32[$image + 16 >> 2];
 HEAP32[$agg$result >> 2] = HEAP32[$texture >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$texture + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$texture + 8 >> 2];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[$texture + 12 >> 2];
 HEAP32[$agg$result + 16 >> 2] = HEAP32[$texture + 16 >> 2];
 STACKTOP = sp;
 return;
}

function _stbir__get_filter_pixel_width($filter, $scale) {
 $filter = $filter | 0;
 $scale = Math_fround($scale);
 var $4 = 0, $5 = f0, $9 = 0, $div = f0, $filter$addr = 0, $mul10 = f0, $retval = 0, $scale$addr = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $filter$addr = sp + 4 | 0;
 $scale$addr = sp;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale$addr >> 2] = $scale;
 if (!(HEAP32[$filter$addr >> 2] | 0)) ___assert_fail(14736, 12378, 884, 14748);
 if ((HEAP32[$filter$addr >> 2] | 0) >>> 0 >= 6) ___assert_fail(14778, 12378, 885, 14748);
 $tobool = (_stbir__use_upsampling(Math_fround(HEAPF32[$scale$addr >> 2])) | 0) != 0;
 $4 = HEAP32[5280 + (HEAP32[$filter$addr >> 2] << 3) + 4 >> 2] | 0;
 $5 = Math_fround(HEAPF32[$scale$addr >> 2]);
 if ($tobool) {
  $div = Math_fround(Math_fround(1.0) / $5);
  HEAP32[$retval >> 2] = ~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[$4 & 7]($div)) * Math_fround(2.0))));
  $9 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $9 | 0;
 } else {
  $mul10 = Math_fround(Math_fround(FUNCTION_TABLE_ff[$4 & 7]($5)) * Math_fround(2.0));
  HEAP32[$retval >> 2] = ~~+Math_ceil(+(+Math_fround($mul10 / Math_fround(HEAPF32[$scale$addr >> 2]))));
  $9 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $9 | 0;
 }
 return 0;
}

function _EmscriptenFullscreenChangeCallback($eventType, $e, $userData) {
 $eventType = $eventType | 0;
 $e = $e | 0;
 $userData = $userData | 0;
 var $3 = 0, $5 = 0, $7 = 0, $9 = 0, $e$addr = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer = sp;
 $e$addr = sp + 40 | 0;
 HEAP32[sp + 44 >> 2] = $eventType;
 HEAP32[$e$addr >> 2] = $e;
 HEAP32[sp + 36 >> 2] = $userData;
 CSE$0 = HEAP32[$e$addr >> 2] | 0;
 $3 = HEAP32[CSE$0 + 264 >> 2] | 0;
 $5 = HEAP32[CSE$0 + 268 >> 2] | 0;
 $7 = HEAP32[CSE$0 + 272 >> 2] | 0;
 $9 = HEAP32[CSE$0 + 276 >> 2] | 0;
 if (HEAP32[HEAP32[$e$addr >> 2] >> 2] | 0) {
  HEAP32[$vararg_buffer >> 2] = $3;
  HEAP32[$vararg_buffer + 4 >> 2] = $5;
  HEAP32[$vararg_buffer + 8 >> 2] = $7;
  HEAP32[$vararg_buffer + 12 >> 2] = $9;
  _TraceLog(3, 11318, $vararg_buffer);
  _TraceLog(3, 11454, $vararg_buffer10);
  STACKTOP = sp;
  return 0;
 } else {
  HEAP32[$vararg_buffer4 >> 2] = $3;
  HEAP32[$vararg_buffer4 + 4 >> 2] = $5;
  HEAP32[$vararg_buffer4 + 8 >> 2] = $7;
  HEAP32[$vararg_buffer4 + 12 >> 2] = $9;
  _TraceLog(3, 11387, $vararg_buffer4);
  _TraceLog(3, 11454, $vararg_buffer10);
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $0 = 0, $add$ptr = 0, $b = 0, $call10 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub3 = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $b = sp + 144 | 0;
 $f = sp;
 _memcpy($f | 0, 7424, 144) | 0;
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $n$addr$0 = 1;
  $s$addr$0 = $b;
  label = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 61;
  $retval$0 = -1;
 } else {
  $n$addr$0 = $n;
  $s$addr$0 = $s;
  label = 4;
 }
 if ((label | 0) == 4) {
  $sub3 = -2 - $s$addr$0 | 0;
  $spec$select = $n$addr$0 >>> 0 > $sub3 >>> 0 ? $sub3 : $n$addr$0;
  HEAP32[$f + 48 >> 2] = $spec$select;
  $wpos = $f + 20 | 0;
  HEAP32[$wpos >> 2] = $s$addr$0;
  HEAP32[$f + 44 >> 2] = $s$addr$0;
  $add$ptr = $s$addr$0 + $spec$select | 0;
  $wend = $f + 16 | 0;
  HEAP32[$wend >> 2] = $add$ptr;
  HEAP32[$f + 28 >> 2] = $add$ptr;
  $call10 = _vfprintf($f, $fmt, $ap) | 0;
  if (!$spec$select) $retval$0 = $call10; else {
   $0 = HEAP32[$wpos >> 2] | 0;
   HEAP8[$0 + ((($0 | 0) == (HEAP32[$wend >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _TraceLog($logType, $text, $varargs) {
 $logType = $logType | 0;
 $text = $text | 0;
 $varargs = $varargs | 0;
 var $args = 0, $buffer = 0, $logType$addr = 0, $text$addr = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 $logType$addr = sp + 148 | 0;
 $text$addr = sp + 144 | 0;
 $args = sp + 128 | 0;
 $buffer = sp;
 HEAP32[$logType$addr >> 2] = $logType;
 HEAP32[$text$addr >> 2] = $text;
 if ((HEAP32[$logType$addr >> 2] | 0) < 3) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$args >> 2] = $varargs;
 dest = $buffer;
 stop = dest + 128 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 switch (HEAP32[$logType$addr >> 2] | 0) {
 case 1:
  {
   _strcpy($buffer, 15713) | 0;
   break;
  }
 case 2:
  {
   _strcpy($buffer, 15721) | 0;
   break;
  }
 case 3:
  {
   _strcpy($buffer, 15729) | 0;
   break;
  }
 case 4:
  {
   _strcpy($buffer, 15736) | 0;
   break;
  }
 case 5:
  {
   _strcpy($buffer, 15746) | 0;
   break;
  }
 case 6:
  {
   _strcpy($buffer, 15754) | 0;
   break;
  }
 default:
  {}
 }
 _strcat($buffer, HEAP32[$text$addr >> 2] | 0) | 0;
 _strcat($buffer, 15762) | 0;
 _vprintf($buffer, $args) | 0;
 if ((HEAP32[$logType$addr >> 2] | 0) >= 5) _exit(1); else {
  STACKTOP = sp;
  return;
 }
}

function _stbir__setup($info, $input_w, $input_h, $output_w, $output_h, $channels) {
 $info = $info | 0;
 $input_w = $input_w | 0;
 $input_h = $input_h | 0;
 $output_w = $output_w | 0;
 $output_h = $output_h | 0;
 $channels = $channels | 0;
 var $channels$addr = 0, $info$addr = 0, $input_h$addr = 0, $input_w$addr = 0, $output_h$addr = 0, $output_w$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $info$addr = sp + 20 | 0;
 $input_w$addr = sp + 16 | 0;
 $input_h$addr = sp + 12 | 0;
 $output_w$addr = sp + 8 | 0;
 $output_h$addr = sp + 4 | 0;
 $channels$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$input_w$addr >> 2] = $input_w;
 HEAP32[$input_h$addr >> 2] = $input_h;
 HEAP32[$output_w$addr >> 2] = $output_w;
 HEAP32[$output_h$addr >> 2] = $output_h;
 HEAP32[$channels$addr >> 2] = $channels;
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 4 >> 2] = HEAP32[$input_w$addr >> 2];
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 8 >> 2] = HEAP32[$input_h$addr >> 2];
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 20 >> 2] = HEAP32[$output_w$addr >> 2];
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 24 >> 2] = HEAP32[$output_h$addr >> 2];
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 64 >> 2] = HEAP32[$channels$addr >> 2];
 STACKTOP = sp;
 return;
}

function _rlColor4ub($x, $y, $z, $w) {
 $x = $x | 0;
 $y = $y | 0;
 $z = $z | 0;
 $w = $w | 0;
 var $cCounter24 = 0, $w$addr = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $x$addr = sp + 3 | 0;
 $y$addr = sp + 2 | 0;
 $z$addr = sp + 1 | 0;
 $w$addr = sp;
 HEAP8[$x$addr >> 0] = $x;
 HEAP8[$y$addr >> 0] = $y;
 HEAP8[$z$addr >> 0] = $z;
 HEAP8[$w$addr >> 0] = $w;
 CSE$0 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
 HEAP8[(HEAP32[CSE$0 + 20 >> 2] | 0) + (HEAP32[CSE$0 + 8 >> 2] << 2) >> 0] = HEAP8[$x$addr >> 0] | 0;
 CSE$1 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
 HEAP8[(HEAP32[CSE$1 + 20 >> 2] | 0) + ((HEAP32[CSE$1 + 8 >> 2] << 2) + 1) >> 0] = HEAP8[$y$addr >> 0] | 0;
 CSE$2 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
 HEAP8[(HEAP32[CSE$2 + 20 >> 2] | 0) + ((HEAP32[CSE$2 + 8 >> 2] << 2) + 2) >> 0] = HEAP8[$z$addr >> 0] | 0;
 CSE$3 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
 HEAP8[(HEAP32[CSE$3 + 20 >> 2] | 0) + ((HEAP32[CSE$3 + 8 >> 2] << 2) + 3) >> 0] = HEAP8[$w$addr >> 0] | 0;
 $cCounter24 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) + 8 | 0;
 HEAP32[$cCounter24 >> 2] = (HEAP32[$cCounter24 >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}

function _GetGamepadButton($button) {
 $button = $button | 0;
 var $btn = 0, $button$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $button$addr = sp + 4 | 0;
 $btn = sp;
 HEAP32[$button$addr >> 2] = $button;
 HEAP32[$btn >> 2] = 0;
 do switch (HEAP32[$button$addr >> 2] | 0) {
 case 0:
  {
   HEAP32[$btn >> 2] = 7;
   break;
  }
 case 1:
  {
   HEAP32[$btn >> 2] = 6;
   break;
  }
 case 2:
  {
   HEAP32[$btn >> 2] = 8;
   break;
  }
 case 3:
  {
   HEAP32[$btn >> 2] = 5;
   break;
  }
 case 4:
  {
   HEAP32[$btn >> 2] = 9;
   break;
  }
 case 5:
  {
   HEAP32[$btn >> 2] = 11;
   break;
  }
 case 6:
  {
   HEAP32[$btn >> 2] = 10;
   break;
  }
 case 7:
  {
   HEAP32[$btn >> 2] = 12;
   break;
  }
 case 8:
  {
   HEAP32[$btn >> 2] = 13;
   break;
  }
 case 9:
  {
   HEAP32[$btn >> 2] = 15;
   break;
  }
 case 10:
  {
   HEAP32[$btn >> 2] = 16;
   break;
  }
 case 11:
  {
   HEAP32[$btn >> 2] = 17;
   break;
  }
 case 12:
  {
   HEAP32[$btn >> 2] = 1;
   break;
  }
 case 13:
  {
   HEAP32[$btn >> 2] = 3;
   break;
  }
 case 14:
  {
   HEAP32[$btn >> 2] = 4;
   break;
  }
 case 15:
  {
   HEAP32[$btn >> 2] = 2;
   break;
  }
 default:
  {}
 } while (0);
 STACKTOP = sp;
 return HEAP32[$btn >> 2] | 0;
}

function _fflush($f) {
 $f = $f | 0;
 var $call1 = 0, $cond10 = 0, $cond20 = 0, $f$addr$019 = 0, $f$addr$022 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0;
 do if (!$f) {
  if (!(HEAP32[1900] | 0)) $cond10 = 0; else $cond10 = _fflush(HEAP32[1900] | 0) | 0;
  $f$addr$019 = HEAP32[(___ofl_lock() | 0) >> 2] | 0;
  if (!$f$addr$019) $r$0$lcssa = $cond10; else {
   $f$addr$022 = $f$addr$019;
   $r$021 = $cond10;
   while (1) {
    if ((HEAP32[$f$addr$022 + 76 >> 2] | 0) > -1) $cond20 = ___lockfile($f$addr$022) | 0; else $cond20 = 0;
    if ((HEAP32[$f$addr$022 + 20 >> 2] | 0) >>> 0 > (HEAP32[$f$addr$022 + 28 >> 2] | 0) >>> 0) $r$1 = ___fflush_unlocked($f$addr$022) | 0 | $r$021; else $r$1 = $r$021;
    if ($cond20 | 0) ___unlockfile($f$addr$022);
    $f$addr$022 = HEAP32[$f$addr$022 + 56 >> 2] | 0;
    if (!$f$addr$022) {
     $r$0$lcssa = $r$1;
     break;
    } else $r$021 = $r$1;
   }
  }
  ___ofl_unlock();
  $retval$0 = $r$0$lcssa;
 } else {
  if ((HEAP32[$f + 76 >> 2] | 0) <= -1) {
   $retval$0 = ___fflush_unlocked($f) | 0;
   break;
  }
  $phitmp = (___lockfile($f) | 0) == 0;
  $call1 = ___fflush_unlocked($f) | 0;
  if ($phitmp) $retval$0 = $call1; else {
   ___unlockfile($f);
   $retval$0 = $call1;
  }
 } while (0);
 return $retval$0 | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  block_aligned_end = aligned_end - 64 | 0;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function _ImageFromImage($agg$result, $image, $rec) {
 $agg$result = $agg$result | 0;
 $image = $image | 0;
 $rec = $rec | 0;
 var $rec$byval_copy = 0, $result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 $rec$byval_copy = sp + 20 | 0;
 $result = sp;
 HEAP32[$rec$byval_copy >> 2] = HEAP32[$image >> 2];
 HEAP32[$rec$byval_copy + 4 >> 2] = HEAP32[$image + 4 >> 2];
 HEAP32[$rec$byval_copy + 8 >> 2] = HEAP32[$image + 8 >> 2];
 HEAP32[$rec$byval_copy + 12 >> 2] = HEAP32[$image + 12 >> 2];
 HEAP32[$rec$byval_copy + 16 >> 2] = HEAP32[$image + 16 >> 2];
 _ImageCopy($result, $rec$byval_copy);
 HEAP32[$rec$byval_copy >> 2] = HEAP32[$rec >> 2];
 HEAP32[$rec$byval_copy + 4 >> 2] = HEAP32[$rec + 4 >> 2];
 HEAP32[$rec$byval_copy + 8 >> 2] = HEAP32[$rec + 8 >> 2];
 HEAP32[$rec$byval_copy + 12 >> 2] = HEAP32[$rec + 12 >> 2];
 _ImageCrop($result, $rec$byval_copy);
 HEAP32[$agg$result >> 2] = HEAP32[$result >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$result + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$result + 8 >> 2];
 HEAP32[$agg$result + 12 >> 2] = HEAP32[$result + 12 >> 2];
 HEAP32[$agg$result + 16 >> 2] = HEAP32[$result + 16 >> 2];
 STACKTOP = sp;
 return;
}

function __ZL15UpdateDrawFramev() {
 var $agg$tmp = 0, $agg$tmp1 = 0, $agg$tmp1$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $agg$tmp1$byval_copy = sp + 8 | 0;
 $agg$tmp = sp + 4 | 0;
 $agg$tmp1 = sp;
 _BeginDrawing();
 HEAP8[$agg$tmp >> 0] = -11;
 HEAP8[$agg$tmp + 1 >> 0] = -11;
 HEAP8[$agg$tmp + 2 >> 0] = -11;
 HEAP8[$agg$tmp + 3 >> 0] = -1;
 HEAP8[$agg$tmp1$byval_copy >> 0] = HEAP8[$agg$tmp >> 0] | 0;
 HEAP8[$agg$tmp1$byval_copy + 1 >> 0] = HEAP8[$agg$tmp + 1 >> 0] | 0;
 HEAP8[$agg$tmp1$byval_copy + 2 >> 0] = HEAP8[$agg$tmp + 2 >> 0] | 0;
 HEAP8[$agg$tmp1$byval_copy + 3 >> 0] = HEAP8[$agg$tmp + 3 >> 0] | 0;
 _ClearBackground($agg$tmp1$byval_copy);
 HEAP8[$agg$tmp1 >> 0] = -56;
 HEAP8[$agg$tmp1 + 1 >> 0] = -56;
 HEAP8[$agg$tmp1 + 2 >> 0] = -56;
 HEAP8[$agg$tmp1 + 3 >> 0] = -1;
 HEAP8[$agg$tmp1$byval_copy >> 0] = HEAP8[$agg$tmp1 >> 0] | 0;
 HEAP8[$agg$tmp1$byval_copy + 1 >> 0] = HEAP8[$agg$tmp1 + 1 >> 0] | 0;
 HEAP8[$agg$tmp1$byval_copy + 2 >> 0] = HEAP8[$agg$tmp1 + 2 >> 0] | 0;
 HEAP8[$agg$tmp1$byval_copy + 3 >> 0] = HEAP8[$agg$tmp1 + 3 >> 0] | 0;
 _DrawText(7879, 20, 20, 40, $agg$tmp1$byval_copy);
 _EndDrawing();
 STACKTOP = sp;
 return;
}

function _GifWritePalette($f, $pPal) {
 $f = $f | 0;
 $pPal = $pPal | 0;
 var $b = 0, $f$addr = 0, $g = 0, $ii = 0, $pPal$addr = 0, $r = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $f$addr = sp + 20 | 0;
 $pPal$addr = sp + 16 | 0;
 $ii = sp + 12 | 0;
 $r = sp + 8 | 0;
 $g = sp + 4 | 0;
 $b = sp;
 HEAP32[$f$addr >> 2] = $f;
 HEAP32[$pPal$addr >> 2] = $pPal;
 _fputc(0, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(0, HEAP32[$f$addr >> 2] | 0) | 0;
 _fputc(0, HEAP32[$f$addr >> 2] | 0) | 0;
 HEAP32[$ii >> 2] = 1;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >= (1 << HEAP32[HEAP32[$pPal$addr >> 2] >> 2] | 0)) break;
  HEAP32[$r >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 4 + (HEAP32[$ii >> 2] | 0) >> 0];
  HEAP32[$g >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 260 + (HEAP32[$ii >> 2] | 0) >> 0];
  HEAP32[$b >> 2] = HEAPU8[(HEAP32[$pPal$addr >> 2] | 0) + 516 + (HEAP32[$ii >> 2] | 0) >> 0];
  _fputc(HEAP32[$r >> 2] | 0, HEAP32[$f$addr >> 2] | 0) | 0;
  _fputc(HEAP32[$g >> 2] | 0, HEAP32[$f$addr >> 2] | 0) | 0;
  _fputc(HEAP32[$b >> 2] | 0, HEAP32[$f$addr >> 2] | 0) | 0;
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _stbir__get_contributors($scale, $filter, $input_size, $output_size) {
 $scale = Math_fround($scale);
 $filter = $filter | 0;
 $input_size = $input_size | 0;
 $output_size = $output_size | 0;
 var $2 = 0, $5 = 0, $filter$addr = 0, $input_size$addr = 0, $output_size$addr = 0, $retval = 0, $scale$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $retval = sp + 16 | 0;
 $scale$addr = sp + 12 | 0;
 $filter$addr = sp + 8 | 0;
 $input_size$addr = sp + 4 | 0;
 $output_size$addr = sp;
 HEAPF32[$scale$addr >> 2] = $scale;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAP32[$input_size$addr >> 2] = $input_size;
 HEAP32[$output_size$addr >> 2] = $output_size;
 if (_stbir__use_upsampling(Math_fround(HEAPF32[$scale$addr >> 2])) | 0) {
  HEAP32[$retval >> 2] = HEAP32[$output_size$addr >> 2];
  $5 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 } else {
  $2 = HEAP32[$input_size$addr >> 2] | 0;
  HEAP32[$retval >> 2] = $2 + ((_stbir__get_filter_pixel_margin(HEAP32[$filter$addr >> 2] | 0, Math_fround(HEAPF32[$scale$addr >> 2])) | 0) << 1);
  $5 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 }
 return 0;
}

function __webgl1_match_ext_proc_address_without_suffix($name) {
 $name = $name | 0;
 var $retval$0 = 0, $tobool70 = 0;
 if (!(_strcmp($name, 15822) | 0)) $retval$0 = 7; else if (!(_strcmp($name, 15835) | 0)) $retval$0 = 8; else if (!(_strcmp($name, 15851) | 0)) $retval$0 = 3; else if (!(_strcmp($name, 15861) | 0)) $retval$0 = 9; else if (!(_strcmp($name, 15874) | 0)) $retval$0 = 1; else if (!(_strcmp($name, 15885) | 0)) $retval$0 = 10; else if (!(_strcmp($name, 15900) | 0)) $retval$0 = 3; else if (!(_strcmp($name, 15913) | 0)) $retval$0 = 4; else if (!(_strcmp($name, 15932) | 0)) $retval$0 = 5; else if (!(_strcmp($name, 15952) | 0)) $retval$0 = 6; else if (!(_strcmp($name, 15973) | 0)) $retval$0 = 7; else if (!(_strcmp($name, 15995) | 0)) $retval$0 = 2; else if (!(_strcmp($name, 16013) | 0)) $retval$0 = 11; else if (!(_strcmp($name, 16034) | 0)) $retval$0 = 12; else if (!(_strcmp($name, 16052) | 0)) $retval$0 = 4; else if (!(_strcmp($name, 16068) | 0)) $retval$0 = 13; else if (!(_strcmp($name, 16082) | 0)) $retval$0 = 2; else if (!(_strcmp($name, 16104) | 0)) $retval$0 = 2; else {
  $tobool70 = (_strcmp($name, 16128) | 0) == 0;
  return ($tobool70 ? 6 : 0) | 0;
 }
 return $retval$0 | 0;
}

function _GifWriteBit($stat, $bit) {
 $stat = $stat | 0;
 $bit = $bit | 0;
 var $12 = 0, $15 = 0, $7 = 0, $bit$addr = 0, $byte = 0, $chunk = 0, $chunkIndex = 0, $stat$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stat$addr = sp + 4 | 0;
 $bit$addr = sp;
 HEAP32[$stat$addr >> 2] = $stat;
 HEAP32[$bit$addr >> 2] = $bit;
 HEAP32[$bit$addr >> 2] = HEAP32[$bit$addr >> 2] & 1;
 HEAP32[$bit$addr >> 2] = HEAP32[$bit$addr >> 2] << HEAPU8[HEAP32[$stat$addr >> 2] >> 0];
 $byte = (HEAP32[$stat$addr >> 2] | 0) + 1 | 0;
 HEAP8[$byte >> 0] = HEAPU8[$byte >> 0] | HEAP32[$bit$addr >> 2];
 $7 = HEAP32[$stat$addr >> 2] | 0;
 HEAP8[$7 >> 0] = (HEAP8[$7 >> 0] | 0) + 1 << 24 >> 24;
 if ((HEAPU8[HEAP32[$stat$addr >> 2] >> 0] | 0) <= 7) {
  STACKTOP = sp;
  return;
 }
 CSE$0 = HEAP32[$stat$addr >> 2] | 0;
 $12 = HEAP8[CSE$0 + 1 >> 0] | 0;
 $chunk = CSE$0 + 8 | 0;
 $chunkIndex = CSE$0 + 4 | 0;
 $15 = HEAP32[$chunkIndex >> 2] | 0;
 HEAP32[$chunkIndex >> 2] = $15 + 1;
 HEAP8[$chunk + $15 >> 0] = $12;
 HEAP8[HEAP32[$stat$addr >> 2] >> 0] = 0;
 HEAP8[(HEAP32[$stat$addr >> 2] | 0) + 1 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $retval$0 = 0;
 do if (!$s) $retval$0 = 1; else {
  if ($wc >>> 0 < 128) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  }
  if (!(HEAP32[HEAP32[(___pthread_self_423() | 0) + 188 >> 2] >> 2] | 0)) if (($wc & -128 | 0) == 57216) {
   HEAP8[$s >> 0] = $wc;
   $retval$0 = 1;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 25;
   $retval$0 = -1;
   break;
  }
  if ($wc >>> 0 < 2048) {
   HEAP8[$s >> 0] = $wc >>> 6 | 192;
   HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
   $retval$0 = 2;
   break;
  }
  if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
   HEAP8[$s >> 0] = $wc >>> 12 | 224;
   HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
   $retval$0 = 3;
   break;
  }
  if (($wc + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$s >> 0] = $wc >>> 18 | 240;
   HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
   HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
   HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
   $retval$0 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 25;
   $retval$0 = -1;
   break;
  }
 } while (0);
 return $retval$0 | 0;
}

function _rlClearColor($r, $g, $b, $a) {
 $r = $r | 0;
 $g = $g | 0;
 $b = $b | 0;
 $a = $a | 0;
 var $4 = f0, $5 = f0, $6 = f0, $a$addr = 0, $b$addr = 0, $ca = 0, $cb = 0, $cg = 0, $cr = 0, $g$addr = 0, $r$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $r$addr = sp + 19 | 0;
 $g$addr = sp + 18 | 0;
 $b$addr = sp + 17 | 0;
 $a$addr = sp + 16 | 0;
 $cr = sp + 12 | 0;
 $cg = sp + 8 | 0;
 $cb = sp + 4 | 0;
 $ca = sp;
 HEAP8[$r$addr >> 0] = $r;
 HEAP8[$g$addr >> 0] = $g;
 HEAP8[$b$addr >> 0] = $b;
 HEAP8[$a$addr >> 0] = $a;
 HEAPF32[$cr >> 2] = Math_fround(Math_fround(HEAPU8[$r$addr >> 0] | 0) / Math_fround(255.0));
 HEAPF32[$cg >> 2] = Math_fround(Math_fround(HEAPU8[$g$addr >> 0] | 0) / Math_fround(255.0));
 HEAPF32[$cb >> 2] = Math_fround(Math_fround(HEAPU8[$b$addr >> 0] | 0) / Math_fround(255.0));
 HEAPF32[$ca >> 2] = Math_fround(Math_fround(HEAPU8[$a$addr >> 0] | 0) / Math_fround(255.0));
 $4 = Math_fround(HEAPF32[$cr >> 2]);
 $5 = Math_fround(HEAPF32[$cg >> 2]);
 $6 = Math_fround(HEAPF32[$cb >> 2]);
 _glClearColor(+$4, +$5, +$6, +Math_fround(HEAPF32[$ca >> 2]));
 STACKTOP = sp;
 return;
}

function _stbir__linear_to_srgb_uchar($in) {
 $in = Math_fround($in);
 var $0 = f0, $3 = f0, $bias = 0, $conv = 0, $f = 0, $in$addr = 0, $scale = 0, $t = 0, $tab = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $in$addr = sp + 20 | 0;
 $tab = sp + 16 | 0;
 $bias = sp + 12 | 0;
 $scale = sp + 8 | 0;
 $t = sp + 4 | 0;
 $f = sp;
 HEAPF32[$in$addr >> 2] = $in;
 $0 = Math_fround(HEAPF32[$in$addr >> 2]);
 if (!($0 > Math_fround(HEAPF32[1897]))) HEAPF32[$in$addr >> 2] = Math_fround(HEAPF32[1897]);
 $3 = Math_fround(HEAPF32[$in$addr >> 2]);
 if ($3 > Math_fround(HEAPF32[1898])) HEAPF32[$in$addr >> 2] = Math_fround(HEAPF32[1898]);
 HEAPF32[$f >> 2] = Math_fround(HEAPF32[$in$addr >> 2]);
 HEAP32[$tab >> 2] = HEAP32[6352 + (((HEAP32[$f >> 2] | 0) - (HEAP32[1897] | 0) | 0) >>> 20 << 2) >> 2];
 HEAP32[$bias >> 2] = (HEAP32[$tab >> 2] | 0) >>> 16 << 9;
 HEAP32[$scale >> 2] = HEAP32[$tab >> 2] & 65535;
 HEAP32[$t >> 2] = (HEAP32[$f >> 2] | 0) >>> 12 & 255;
 $conv = ((HEAP32[$bias >> 2] | 0) + (Math_imul(HEAP32[$scale >> 2] | 0, HEAP32[$t >> 2] | 0) | 0) | 0) >>> 16 & 255;
 STACKTOP = sp;
 return $conv | 0;
}

function _fputc($c, $f) {
 $c = $c | 0;
 $f = $f | 0;
 var $2 = 0, $5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv12 = 0, $retval$0 = 0, $wpos = 0, $wpos18 = 0, label = 0;
 label = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($f) | 0)) label = 3; else {
  $conv11 = $c & 255;
  $conv12 = $c & 255;
  if (($conv12 | 0) == (HEAP8[$f + 75 >> 0] | 0)) label = 10; else {
   $wpos18 = $f + 20 | 0;
   $5 = HEAP32[$wpos18 >> 2] | 0;
   if ($5 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
    HEAP32[$wpos18 >> 2] = $5 + 1;
    HEAP8[$5 >> 0] = $conv11;
    $cond30 = $conv12;
   } else label = 10;
  }
  if ((label | 0) == 10) $cond30 = ___overflow($f, $c) | 0;
  ___unlockfile($f);
  $retval$0 = $cond30;
 }
 do if ((label | 0) == 3) {
  $conv = $c & 255;
  $conv1 = $c & 255;
  if (($conv1 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
   $wpos = $f + 20 | 0;
   $2 = HEAP32[$wpos >> 2] | 0;
   if ($2 >>> 0 < (HEAP32[$f + 16 >> 2] | 0) >>> 0) {
    HEAP32[$wpos >> 2] = $2 + 1;
    HEAP8[$2 >> 0] = $conv;
    $retval$0 = $conv1;
    break;
   }
  }
  $retval$0 = ___overflow($f, $c) | 0;
 } while (0);
 return $retval$0 | 0;
}

function _strlen($s) {
 $s = $s | 0;
 var $$pn = 0, $$pn24 = 0, $0 = 0, $3 = 0, $5 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0, $s$addr$1$lcssa = 0, $w$0 = 0, label = 0;
 label = 0;
 $0 = $s;
 L1 : do if (!($0 & 3)) {
  $s$addr$0$lcssa = $s;
  label = 5;
 } else {
  $5 = $0;
  $s$addr$015 = $s;
  while (1) {
   if (!(HEAP8[$s$addr$015 >> 0] | 0)) {
    $$pn = $5;
    break L1;
   }
   $incdec$ptr = $s$addr$015 + 1 | 0;
   $5 = $incdec$ptr;
   if (!($5 & 3)) {
    $s$addr$0$lcssa = $incdec$ptr;
    label = 5;
    break;
   } else $s$addr$015 = $incdec$ptr;
  }
 } while (0);
 if ((label | 0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while (1) {
   $3 = HEAP32[$w$0 >> 2] | 0;
   if (!(($3 & -2139062144 ^ -2139062144) & $3 + -16843009)) $w$0 = $w$0 + 4 | 0; else break;
  }
  if (!(($3 & 255) << 24 >> 24)) $s$addr$1$lcssa = $w$0; else {
   $$pn24 = $w$0;
   while (1) {
    $incdec$ptr1323 = $$pn24 + 1 | 0;
    if (!(HEAP8[$incdec$ptr1323 >> 0] | 0)) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else $$pn24 = $incdec$ptr1323;
   }
  }
  $$pn = $s$addr$1$lcssa;
 }
 return $$pn - $0 | 0;
}

function _fourbyte_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $7 = 0, $8 = 0, $arrayidx22 = 0, $h$addr$0$lcssa = 0, $h$addr$018 = 0, $hw$019 = 0, $incdec$ptr = 0, $or10 = 0, $or24 = 0, $tobool = 0, $tobool$lcssa = 0, $tobool15 = 0;
 $or10 = (HEAPU8[$n + 1 >> 0] | 0) << 16 | (HEAPU8[$n >> 0] | 0) << 24 | (HEAPU8[$n + 2 >> 0] | 0) << 8 | (HEAPU8[$n + 3 >> 0] | 0);
 $arrayidx22 = $h + 3 | 0;
 $7 = HEAP8[$arrayidx22 >> 0] | 0;
 $or24 = (HEAPU8[$h + 1 >> 0] | 0) << 16 | (HEAPU8[$h >> 0] | 0) << 24 | (HEAPU8[$h + 2 >> 0] | 0) << 8 | $7 & 255;
 $tobool15 = $7 << 24 >> 24 == 0;
 if (($or24 | 0) == ($or10 | 0) | $tobool15) {
  $h$addr$0$lcssa = $arrayidx22;
  $tobool$lcssa = $tobool15;
 } else {
  $h$addr$018 = $arrayidx22;
  $hw$019 = $or24;
  while (1) {
   $incdec$ptr = $h$addr$018 + 1 | 0;
   $8 = HEAP8[$incdec$ptr >> 0] | 0;
   $hw$019 = $hw$019 << 8 | $8 & 255;
   $tobool = $8 << 24 >> 24 == 0;
   if (($hw$019 | 0) == ($or10 | 0) | $tobool) {
    $h$addr$0$lcssa = $incdec$ptr;
    $tobool$lcssa = $tobool;
    break;
   } else $h$addr$018 = $incdec$ptr;
  }
 }
 return ($tobool$lcssa ? 0 : $h$addr$0$lcssa + -3 | 0) | 0;
}

function _stbir__get_coefficient_width($filter, $scale) {
 $filter = $filter | 0;
 $scale = Math_fround($scale);
 var $2 = 0, $3 = f0, $6 = 0, $div = f0, $filter$addr = 0, $retval = 0, $scale$addr = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $filter$addr = sp + 4 | 0;
 $scale$addr = sp;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale$addr >> 2] = $scale;
 $tobool = (_stbir__use_upsampling(Math_fround(HEAPF32[$scale$addr >> 2])) | 0) != 0;
 $2 = HEAP32[5280 + (HEAP32[$filter$addr >> 2] << 3) + 4 >> 2] | 0;
 $3 = Math_fround(HEAPF32[$scale$addr >> 2]);
 if ($tobool) {
  $div = Math_fround(Math_fround(1.0) / $3);
  HEAP32[$retval >> 2] = ~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[$2 & 7]($div)) * Math_fround(2.0))));
  $6 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $6 | 0;
 } else {
  HEAP32[$retval >> 2] = ~~+Math_ceil(+(+Math_fround(Math_fround(FUNCTION_TABLE_ff[$2 & 7]($3)) * Math_fround(2.0))));
  $6 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $6 | 0;
 }
 return 0;
}

function _stbir__choose_filter($info, $h_filter, $v_filter) {
 $info = $info | 0;
 $h_filter = $h_filter | 0;
 $v_filter = $v_filter | 0;
 var $h_filter$addr = 0, $info$addr = 0, $tobool = 0, $tobool4 = 0, $v_filter$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $info$addr = sp + 8 | 0;
 $h_filter$addr = sp + 4 | 0;
 $v_filter$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 HEAP32[$h_filter$addr >> 2] = $h_filter;
 HEAP32[$v_filter$addr >> 2] = $v_filter;
 if (!(HEAP32[$h_filter$addr >> 2] | 0)) {
  $tobool = (_stbir__use_upsampling(Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 56 >> 2])) | 0) != 0;
  HEAP32[$h_filter$addr >> 2] = $tobool ? 4 : 5;
 }
 if (!(HEAP32[$v_filter$addr >> 2] | 0)) {
  $tobool4 = (_stbir__use_upsampling(Math_fround(HEAPF32[(HEAP32[$info$addr >> 2] | 0) + 60 >> 2])) | 0) != 0;
  HEAP32[$v_filter$addr >> 2] = $tobool4 ? 4 : 5;
 }
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 80 >> 2] = HEAP32[$h_filter$addr >> 2];
 HEAP32[(HEAP32[$info$addr >> 2] | 0) + 84 >> 2] = HEAP32[$v_filter$addr >> 2];
 STACKTOP = sp;
 return;
}

function _MatrixScale($agg$result, $x, $y, $z) {
 $agg$result = $agg$result | 0;
 $x = Math_fround($x);
 $y = Math_fround($y);
 $z = Math_fround($z);
 var $result = 0, $x$addr = 0, $y$addr = 0, $z$addr = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 $x$addr = sp + 72 | 0;
 $y$addr = sp + 68 | 0;
 $z$addr = sp + 64 | 0;
 $result = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 HEAPF32[$z$addr >> 2] = $z;
 dest = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$result >> 2] = Math_fround(HEAPF32[$x$addr >> 2]);
 HEAPF32[$result + 20 >> 2] = Math_fround(HEAPF32[$y$addr >> 2]);
 HEAPF32[$result + 40 >> 2] = Math_fround(HEAPF32[$z$addr >> 2]);
 HEAPF32[$result + 60 >> 2] = Math_fround(1.0);
 dest = $agg$result;
 src = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _threebyte_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $5 = 0, $6 = 0, $arrayidx15 = 0, $h$addr$0$lcssa = 0, $h$addr$016 = 0, $hw$017 = 0, $incdec$ptr = 0, $or18 = 0, $or7 = 0, $tobool = 0, $tobool$lcssa = 0, $tobool13 = 0;
 $or7 = (HEAPU8[$n + 1 >> 0] | 0) << 16 | (HEAPU8[$n >> 0] | 0) << 24 | (HEAPU8[$n + 2 >> 0] | 0) << 8;
 $arrayidx15 = $h + 2 | 0;
 $5 = HEAP8[$arrayidx15 >> 0] | 0;
 $or18 = (HEAPU8[$h + 1 >> 0] | 0) << 16 | (HEAPU8[$h >> 0] | 0) << 24 | ($5 & 255) << 8;
 $tobool13 = $5 << 24 >> 24 == 0;
 if (($or18 | 0) == ($or7 | 0) | $tobool13) {
  $h$addr$0$lcssa = $arrayidx15;
  $tobool$lcssa = $tobool13;
 } else {
  $h$addr$016 = $arrayidx15;
  $hw$017 = $or18;
  while (1) {
   $incdec$ptr = $h$addr$016 + 1 | 0;
   $6 = HEAP8[$incdec$ptr >> 0] | 0;
   $hw$017 = ($hw$017 | $6 & 255) << 8;
   $tobool = $6 << 24 >> 24 == 0;
   if (($hw$017 | 0) == ($or7 | 0) | $tobool) {
    $h$addr$0$lcssa = $incdec$ptr;
    $tobool$lcssa = $tobool;
    break;
   } else $h$addr$016 = $incdec$ptr;
  }
 }
 return ($tobool$lcssa ? 0 : $h$addr$0$lcssa + -2 | 0) | 0;
}

function _stbir__decode_and_resample_downsample($stbir_info, $n) {
 $stbir_info = $stbir_info | 0;
 $n = $n | 0;
 var $11 = 0, $9 = 0, $n$addr = 0, $stbir_info$addr = 0, $tobool = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stbir_info$addr = sp + 4 | 0;
 $n$addr = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$n$addr >> 2] = $n;
 _stbir__decode_scanline(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0);
 CSE$0 = HEAP32[$stbir_info$addr >> 2] | 0;
 _memset(HEAP32[CSE$0 + 124 >> 2] | 0, 0, (Math_imul(HEAP32[CSE$0 + 20 >> 2] | 0, HEAP32[CSE$0 + 64 >> 2] | 0) | 0) << 2 | 0) | 0;
 $tobool = (_stbir__use_width_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0) != 0;
 CSE$1 = HEAP32[$stbir_info$addr >> 2] | 0;
 $9 = CSE$1 | 0;
 $11 = HEAP32[CSE$1 + 124 >> 2] | 0;
 if ($tobool) {
  _stbir__resample_horizontal_upsample($9, $11);
  STACKTOP = sp;
  return;
 } else {
  _stbir__resample_horizontal_downsample($9, $11);
  STACKTOP = sp;
  return;
 }
}

function _stbir__get_coefficient($coefficients, $filter, $scale, $n, $c) {
 $coefficients = $coefficients | 0;
 $filter = $filter | 0;
 $scale = Math_fround($scale);
 $n = $n | 0;
 $c = $c | 0;
 var $c$addr = 0, $coefficients$addr = 0, $filter$addr = 0, $mul = 0, $n$addr = 0, $scale$addr = 0, $width = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $coefficients$addr = sp + 20 | 0;
 $filter$addr = sp + 16 | 0;
 $scale$addr = sp + 12 | 0;
 $n$addr = sp + 8 | 0;
 $c$addr = sp + 4 | 0;
 $width = sp;
 HEAP32[$coefficients$addr >> 2] = $coefficients;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale$addr >> 2] = $scale;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$c$addr >> 2] = $c;
 HEAP32[$width >> 2] = _stbir__get_coefficient_width(HEAP32[$filter$addr >> 2] | 0, Math_fround(HEAPF32[$scale$addr >> 2])) | 0;
 $mul = Math_imul(HEAP32[$width >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return (HEAP32[$coefficients$addr >> 2] | 0) + ($mul + (HEAP32[$c$addr >> 2] | 0) << 2) | 0;
}

function _GifWriteCode($f, $stat, $code, $length) {
 $f = $f | 0;
 $stat = $stat | 0;
 $code = $code | 0;
 $length = $length | 0;
 var $code$addr = 0, $f$addr = 0, $ii = 0, $length$addr = 0, $stat$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $f$addr = sp + 16 | 0;
 $stat$addr = sp + 12 | 0;
 $code$addr = sp + 8 | 0;
 $length$addr = sp + 4 | 0;
 $ii = sp;
 HEAP32[$f$addr >> 2] = $f;
 HEAP32[$stat$addr >> 2] = $stat;
 HEAP32[$code$addr >> 2] = $code;
 HEAP32[$length$addr >> 2] = $length;
 HEAP32[$ii >> 2] = 0;
 while (1) {
  if ((HEAP32[$ii >> 2] | 0) >>> 0 >= (HEAP32[$length$addr >> 2] | 0) >>> 0) break;
  _GifWriteBit(HEAP32[$stat$addr >> 2] | 0, HEAP32[$code$addr >> 2] | 0);
  HEAP32[$code$addr >> 2] = (HEAP32[$code$addr >> 2] | 0) >>> 1;
  if ((HEAP32[(HEAP32[$stat$addr >> 2] | 0) + 4 >> 2] | 0) == 255) _GifWriteChunk(HEAP32[$f$addr >> 2] | 0, HEAP32[$stat$addr >> 2] | 0);
  HEAP32[$ii >> 2] = (HEAP32[$ii >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _UpdateBuffersDefault() {
 var CSE$0 = 0, CSE$1 = 0, CSE$2 = 0;
 if ((HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) >> 2] | 0) <= 0) return;
 if (HEAP8[30881] & 1) FUNCTION_TABLE_vi[HEAP32[7419] & 31](HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 28 >> 2] | 0);
 _glBindBuffer(34962, HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 32 >> 2] | 0);
 CSE$0 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
 _glBufferSubData(34962, 0, (HEAP32[CSE$0 >> 2] | 0) * 12 | 0, HEAP32[CSE$0 + 12 >> 2] | 0);
 _glBindBuffer(34962, HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 32 + 4 >> 2] | 0);
 CSE$1 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
 _glBufferSubData(34962, 0, HEAP32[CSE$1 >> 2] << 3 | 0, HEAP32[CSE$1 + 16 >> 2] | 0);
 _glBindBuffer(34962, HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) + 32 + 8 >> 2] | 0);
 CSE$2 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
 _glBufferSubData(34962, 0, HEAP32[CSE$2 >> 2] << 2 | 0, HEAP32[CSE$2 + 20 >> 2] | 0);
 if (!(HEAP8[30881] & 1)) return;
 FUNCTION_TABLE_vi[HEAP32[7419] & 31](0);
 return;
}

function _WindowDropCallback($window, $count, $paths) {
 $window = $window | 0;
 $count = $count | 0;
 $paths = $paths | 0;
 var $call1 = 0, $count$addr = 0, $i = 0, $paths$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $count$addr = sp + 8 | 0;
 $paths$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[sp + 12 >> 2] = $window;
 HEAP32[$count$addr >> 2] = $count;
 HEAP32[$paths$addr >> 2] = $paths;
 _ClearDroppedFiles();
 HEAP32[7551] = _malloc(HEAP32[$count$addr >> 2] << 2) | 0;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$count$addr >> 2] | 0)) break;
  $call1 = _malloc(512) | 0;
  HEAP32[(HEAP32[7551] | 0) + (HEAP32[$i >> 2] << 2) >> 2] = $call1;
  CSE$0 = HEAP32[$i >> 2] << 2 | 0;
  _strcpy(HEAP32[(HEAP32[7551] | 0) + CSE$0 >> 2] | 0, HEAP32[(HEAP32[$paths$addr >> 2] | 0) + CSE$0 >> 2] | 0) | 0;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 HEAP32[7552] = HEAP32[$count$addr >> 2];
 STACKTOP = sp;
 return;
}

function ___overflow($f, $_c) {
 $f = $f | 0;
 $_c = $_c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $c = 0, $conv = 0, $conv5 = 0, $retval$0 = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $c = sp;
 $conv = $_c & 255;
 HEAP8[$c >> 0] = $conv;
 $wend = $f + 16 | 0;
 $0 = HEAP32[$wend >> 2] | 0;
 if (!$0) if (!(___towrite($f) | 0)) {
  $2 = HEAP32[$wend >> 2] | 0;
  label = 4;
 } else $retval$0 = -1; else {
  $2 = $0;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $wpos = $f + 20 | 0;
  $1 = HEAP32[$wpos >> 2] | 0;
  if ($1 >>> 0 < $2 >>> 0) {
   $conv5 = $_c & 255;
   if (($conv5 | 0) != (HEAP8[$f + 75 >> 0] | 0)) {
    HEAP32[$wpos >> 2] = $1 + 1;
    HEAP8[$1 >> 0] = $conv;
    $retval$0 = $conv5;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, $c, 1) | 0) == 1) $retval$0 = HEAPU8[$c >> 0] | 0; else $retval$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _stbiw__zhash($data) {
 $data = $data | 0;
 var $data$addr = 0, $hash = 0, sp = 0, CSE$0 = 0, CSE$1 = 0, CSE$2 = 0, CSE$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $data$addr = sp + 4 | 0;
 $hash = sp;
 HEAP32[$data$addr >> 2] = $data;
 CSE$0 = HEAP32[$data$addr >> 2] | 0;
 HEAP32[$hash >> 2] = (HEAPU8[HEAP32[$data$addr >> 2] >> 0] | 0) + (HEAPU8[CSE$0 + 1 >> 0] << 8) + (HEAPU8[CSE$0 + 2 >> 0] << 16);
 HEAP32[$hash >> 2] = HEAP32[$hash >> 2] ^ HEAP32[$hash >> 2] << 3;
 CSE$1 = HEAP32[$hash >> 2] | 0;
 HEAP32[$hash >> 2] = (CSE$1 | 0) + ((CSE$1 | 0) >>> 5);
 HEAP32[$hash >> 2] = HEAP32[$hash >> 2] ^ HEAP32[$hash >> 2] << 4;
 CSE$2 = HEAP32[$hash >> 2] | 0;
 HEAP32[$hash >> 2] = (CSE$2 | 0) + ((CSE$2 | 0) >>> 17);
 HEAP32[$hash >> 2] = HEAP32[$hash >> 2] ^ HEAP32[$hash >> 2] << 25;
 CSE$3 = HEAP32[$hash >> 2] | 0;
 HEAP32[$hash >> 2] = (CSE$3 | 0) + ((CSE$3 | 0) >>> 6);
 STACKTOP = sp;
 return HEAP32[$hash >> 2] | 0;
}

function _stbiw__wpcrc($data, $len) {
 $data = $data | 0;
 $len = $len | 0;
 var $16 = 0, $crc = 0, $data$addr = 0, $len$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $data$addr = sp + 8 | 0;
 $len$addr = sp + 4 | 0;
 $crc = sp;
 HEAP32[$data$addr >> 2] = $data;
 HEAP32[$len$addr >> 2] = $len;
 CSE$0 = HEAP32[$len$addr >> 2] | 0;
 HEAP32[$crc >> 2] = _stbiw__crc32((HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0) + (0 - CSE$0) + -4 | 0, CSE$0 + 4 | 0) | 0;
 HEAP8[HEAP32[HEAP32[$data$addr >> 2] >> 2] >> 0] = (HEAP32[$crc >> 2] | 0) >>> 24;
 HEAP8[(HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0) + 1 >> 0] = (HEAP32[$crc >> 2] | 0) >>> 16;
 HEAP8[(HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0) + 2 >> 0] = (HEAP32[$crc >> 2] | 0) >>> 8;
 HEAP8[(HEAP32[HEAP32[$data$addr >> 2] >> 2] | 0) + 3 >> 0] = HEAP32[$crc >> 2];
 $16 = HEAP32[$data$addr >> 2] | 0;
 HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 4;
 STACKTOP = sp;
 return;
}

function _DrawCircleV($center, $radius, $color) {
 $center = $center | 0;
 $radius = Math_fround($radius);
 $color = $color | 0;
 var $0 = f0, $center$byval_copy = 0, $color$byval_copy = 0, $radius$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $color$byval_copy = sp + 16 | 0;
 $center$byval_copy = sp + 8 | 0;
 $radius$addr = sp;
 HEAPF32[$radius$addr >> 2] = $radius;
 $0 = Math_fround(HEAPF32[$radius$addr >> 2]);
 HEAP32[$center$byval_copy >> 2] = HEAP32[$center >> 2];
 HEAP32[$center$byval_copy + 4 >> 2] = HEAP32[$center + 4 >> 2];
 HEAP8[$color$byval_copy >> 0] = HEAP8[$color >> 0] | 0;
 HEAP8[$color$byval_copy + 1 >> 0] = HEAP8[$color + 1 >> 0] | 0;
 HEAP8[$color$byval_copy + 2 >> 0] = HEAP8[$color + 2 >> 0] | 0;
 HEAP8[$color$byval_copy + 3 >> 0] = HEAP8[$color + 3 >> 0] | 0;
 _DrawCircleSector($center$byval_copy, $0, 0, 360, 36, $color$byval_copy);
 STACKTOP = sp;
 return;
}

function _stbiw__zlib_countm($a, $b, $limit) {
 $a = $a | 0;
 $b = $b | 0;
 $limit = $limit | 0;
 var $a$addr = 0, $b$addr = 0, $i = 0, $limit$addr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $a$addr = sp + 12 | 0;
 $b$addr = sp + 8 | 0;
 $limit$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 HEAP32[$limit$addr >> 2] = $limit;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if (!((HEAP32[$i >> 2] | 0) < (HEAP32[$limit$addr >> 2] | 0) ? (HEAP32[$i >> 2] | 0) < 258 : 0)) {
   label = 5;
   break;
  }
  if ((HEAPU8[(HEAP32[$a$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0 | 0) != (HEAPU8[(HEAP32[$b$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0 | 0)) {
   label = 5;
   break;
  }
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 5) {
  STACKTOP = sp;
  return HEAP32[$i >> 2] | 0;
 }
 return 0;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $4 = 0, $5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub$ptr$sub = 0, $wbase = 0, $wpos = 0, label = 0;
 label = 0;
 $wpos = $f + 20 | 0;
 $wbase = $f + 28 | 0;
 if ((HEAP32[$wpos >> 2] | 0) >>> 0 > (HEAP32[$wbase >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 15]($f, 0, 0) | 0;
  if (!(HEAP32[$wpos >> 2] | 0)) $retval$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $rpos = $f + 4 | 0;
  $4 = HEAP32[$rpos >> 2] | 0;
  $rend = $f + 8 | 0;
  $5 = HEAP32[$rend >> 2] | 0;
  if ($4 >>> 0 < $5 >>> 0) {
   $sub$ptr$sub = $4 - $5 | 0;
   FUNCTION_TABLE_iiiii[HEAP32[$f + 40 >> 2] & 3]($f, $sub$ptr$sub, (($sub$ptr$sub | 0) < 0) << 31 >> 31, 1) | 0;
   getTempRet0() | 0;
  }
  HEAP32[$f + 16 >> 2] = 0;
  HEAP32[$wbase >> 2] = 0;
  HEAP32[$wpos >> 2] = 0;
  HEAP32[$rend >> 2] = 0;
  HEAP32[$rpos >> 2] = 0;
  $retval$0 = 0;
 }
 return $retval$0 | 0;
}

function _stbir__decode_and_resample_upsample($stbir_info, $n) {
 $stbir_info = $stbir_info | 0;
 $n = $n | 0;
 var $3 = 0, $call1 = 0, $n$addr = 0, $stbir_info$addr = 0, $tobool = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stbir_info$addr = sp + 4 | 0;
 $n$addr = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 HEAP32[$n$addr >> 2] = $n;
 _stbir__decode_scanline(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0);
 $tobool = (_stbir__use_width_upsampling(HEAP32[$stbir_info$addr >> 2] | 0) | 0) != 0;
 $3 = HEAP32[$stbir_info$addr >> 2] | 0;
 $call1 = _stbir__add_empty_ring_buffer_entry(HEAP32[$stbir_info$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0) | 0;
 if ($tobool) {
  _stbir__resample_horizontal_upsample($3, $call1);
  STACKTOP = sp;
  return;
 } else {
  _stbir__resample_horizontal_downsample($3, $call1);
  STACKTOP = sp;
  return;
 }
}

function _GetGlyphIndex($font, $codepoint) {
 $font = $font | 0;
 $codepoint = $codepoint | 0;
 var $6 = 0, $7 = 0, $codepoint$addr = 0, $i = 0, $index = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $codepoint$addr = sp + 8 | 0;
 $index = sp + 4 | 0;
 $i = sp;
 HEAP32[$codepoint$addr >> 2] = $codepoint;
 HEAP32[$index >> 2] = 63;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$font + 4 >> 2] | 0)) {
   label = 6;
   break;
  }
  $6 = HEAP32[$i >> 2] | 0;
  if ((HEAP32[(HEAP32[$font + 32 >> 2] | 0) + ((HEAP32[$i >> 2] | 0) * 36 | 0) >> 2] | 0) == (HEAP32[$codepoint$addr >> 2] | 0)) break;
  HEAP32[$i >> 2] = $6 + 1;
 }
 if ((label | 0) == 6) {
  $7 = HEAP32[$index >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 HEAP32[$index >> 2] = $6;
 $7 = HEAP32[$index >> 2] | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function _GetTouchPosition($agg$result, $index) {
 $agg$result = $agg$result | 0;
 $index = $index | 0;
 var $arrayidx = 0, $index$addr = 0, $position = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $vararg_buffer = sp;
 $index$addr = sp + 16 | 0;
 $position = sp + 8 | 0;
 HEAP32[$index$addr >> 2] = $index;
 HEAP32[$position >> 2] = HEAP32[1895];
 HEAP32[$position + 4 >> 2] = HEAP32[1896];
 if ((HEAP32[$index$addr >> 2] | 0) < 10) {
  $arrayidx = 20976 + (HEAP32[$index$addr >> 2] << 3) | 0;
  HEAP32[$position >> 2] = HEAP32[$arrayidx >> 2];
  HEAP32[$position + 4 >> 2] = HEAP32[$arrayidx + 4 >> 2];
 } else {
  HEAP32[$vararg_buffer >> 2] = 10;
  _TraceLog(4, 11196, $vararg_buffer);
 };
 HEAP32[$agg$result >> 2] = HEAP32[$position >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$position + 4 >> 2];
 STACKTOP = sp;
 return;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0.0, $retval$0 = 0.0, $storemerge = 0, $x$addr$0 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 getTempRet0() | 0;
 switch ($2 & 2047) {
 case 0:
  {
   if ($x != 0.0) {
    $call = +_frexp($x * 18446744073709551616.0, $e);
    $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
    $x$addr$0 = $call;
   } else {
    $storemerge = 0;
    $x$addr$0 = $x;
   }
   HEAP32[$e >> 2] = $storemerge;
   $retval$0 = $x$addr$0;
   break;
  }
 case 2047:
  {
   $retval$0 = $x;
   break;
  }
 default:
  {
   HEAP32[$e >> 2] = ($2 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
   $retval$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$retval$0;
}

function _rlTexCoord2f($x, $y) {
 $x = Math_fround($x);
 $y = Math_fround($y);
 var $0 = f0, $5 = f0, $tcCounter10 = 0, $x$addr = 0, $y$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $x$addr = sp + 4 | 0;
 $y$addr = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 $0 = Math_fround(HEAPF32[$x$addr >> 2]);
 CSE$0 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
 HEAPF32[(HEAP32[CSE$0 + 16 >> 2] | 0) + (HEAP32[CSE$0 + 4 >> 2] << 1 << 2) >> 2] = $0;
 $5 = Math_fround(HEAPF32[$y$addr >> 2]);
 CSE$1 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) | 0;
 HEAPF32[(HEAP32[CSE$1 + 16 >> 2] | 0) + ((HEAP32[CSE$1 + 4 >> 2] << 1) + 1 << 2) >> 2] = $5;
 $tcCounter10 = 20928 + ((HEAP32[7415] | 0) * 48 | 0) + 4 | 0;
 HEAP32[$tcCounter10 >> 2] = (HEAP32[$tcCounter10 >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}

function _fopen($filename, $mode) {
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $call4 = 0, $call8 = 0, $or = 0, $retval$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 if (!(_strchr(15818, HEAP8[$mode >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 28;
  $retval$0 = 0;
 } else {
  $or = ___fmodeflags($mode) | 0 | 32768;
  HEAP32[$vararg_buffer >> 2] = $filename;
  HEAP32[$vararg_buffer + 4 >> 2] = $or;
  HEAP32[$vararg_buffer + 8 >> 2] = 438;
  $call4 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
  if (($call4 | 0) < 0) $retval$0 = 0; else {
   $call8 = ___fdopen($call4, $mode) | 0;
   if (!$call8) {
    ___wasi_fd_close($call4 | 0) | 0;
    $retval$0 = 0;
   } else $retval$0 = $call8;
  }
 }
 STACKTOP = sp;
 return $retval$0 | 0;
}

function _strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $0 = 0, $call = 0, $retval$0 = 0;
 $0 = HEAP8[$n >> 0] | 0;
 do if (!($0 << 24 >> 24)) $retval$0 = $h; else {
  $call = _strchr($h, $0 << 24 >> 24) | 0;
  if (!$call) $retval$0 = 0; else if (!(HEAP8[$n + 1 >> 0] | 0)) $retval$0 = $call; else if (!(HEAP8[$call + 1 >> 0] | 0)) $retval$0 = 0; else {
   if (!(HEAP8[$n + 2 >> 0] | 0)) {
    $retval$0 = _twobyte_strstr($call, $n) | 0;
    break;
   }
   if (!(HEAP8[$call + 2 >> 0] | 0)) $retval$0 = 0; else {
    if (!(HEAP8[$n + 3 >> 0] | 0)) {
     $retval$0 = _threebyte_strstr($call, $n) | 0;
     break;
    }
    if (!(HEAP8[$call + 3 >> 0] | 0)) $retval$0 = 0; else if (!(HEAP8[$n + 4 >> 0] | 0)) {
     $retval$0 = _fourbyte_strstr($call, $n) | 0;
     break;
    } else {
     $retval$0 = _twoway_strstr($call, $n) | 0;
     break;
    }
   }
  }
 } while (0);
 return $retval$0 | 0;
}

function _stbir__edge_wrap($edge, $n, $max) {
 $edge = $edge | 0;
 $n = $n | 0;
 $max = $max | 0;
 var $7 = 0, $edge$addr = 0, $max$addr = 0, $n$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 12 | 0;
 $edge$addr = sp + 8 | 0;
 $n$addr = sp + 4 | 0;
 $max$addr = sp;
 HEAP32[$edge$addr >> 2] = $edge;
 HEAP32[$n$addr >> 2] = $n;
 HEAP32[$max$addr >> 2] = $max;
 if ((HEAP32[$n$addr >> 2] | 0) >= 0) if ((HEAP32[$n$addr >> 2] | 0) < (HEAP32[$max$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = HEAP32[$n$addr >> 2];
  $7 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 HEAP32[$retval >> 2] = _stbir__edge_wrap_slow(HEAP32[$edge$addr >> 2] | 0, HEAP32[$n$addr >> 2] | 0, HEAP32[$max$addr >> 2] | 0) | 0;
 $7 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function _Vector2Distance($v1, $v2) {
 $v1 = $v1 | 0;
 $v2 = $v2 | 0;
 var $0 = f0, $2 = f0, $4 = f0, $6 = f0, $9 = f0, $mul = f0, $result = 0, $sub = f0, $sub6 = f0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $result = sp;
 $0 = Math_fround(HEAPF32[$v1 >> 2]);
 $sub = Math_fround($0 - Math_fround(HEAPF32[$v2 >> 2]));
 $2 = Math_fround(HEAPF32[$v1 >> 2]);
 $mul = Math_fround($sub * Math_fround($2 - Math_fround(HEAPF32[$v2 >> 2])));
 $4 = Math_fround(HEAPF32[$v1 + 4 >> 2]);
 $sub6 = Math_fround($4 - Math_fround(HEAPF32[$v2 + 4 >> 2]));
 $6 = Math_fround(HEAPF32[$v1 + 4 >> 2]);
 HEAPF32[$result >> 2] = Math_fround(Math_sqrt(Math_fround($mul + Math_fround($sub6 * Math_fround($6 - Math_fround(HEAPF32[$v2 + 4 >> 2]))))));
 $9 = Math_fround(HEAPF32[$result >> 2]);
 STACKTOP = sp;
 return Math_fround($9);
}

function _Vector2Angle($v1, $v2) {
 $v1 = $v1 | 0;
 $v2 = $v2 | 0;
 var $0 = f0, $2 = f0, $6 = f0, $result = 0, $sub = f0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $result = sp;
 $0 = Math_fround(HEAPF32[$v2 + 4 >> 2]);
 $sub = Math_fround($0 - Math_fround(HEAPF32[$v1 + 4 >> 2]));
 $2 = Math_fround(HEAPF32[$v2 >> 2]);
 HEAPF32[$result >> 2] = Math_fround(Math_fround(_atan2f($sub, Math_fround($2 - Math_fround(HEAPF32[$v1 >> 2])))) * Math_fround(57.2957763));
 if (!(Math_fround(HEAPF32[$result >> 2]) < Math_fround(0.0))) {
  $6 = Math_fround(HEAPF32[$result >> 2]);
  STACKTOP = sp;
  return Math_fround($6);
 }
 HEAPF32[$result >> 2] = Math_fround(Math_fround(HEAPF32[$result >> 2]) + Math_fround(360.0));
 $6 = Math_fround(HEAPF32[$result >> 2]);
 STACKTOP = sp;
 return Math_fround($6);
}

function _IsMouseButtonPressed($button) {
 $button = $button | 0;
 var $6 = 0, $button$addr = 0, $pressed = 0, $tobool = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $button$addr = sp;
 $pressed = sp + 4 | 0;
 HEAP32[$button$addr >> 2] = $button;
 HEAP8[$pressed >> 0] = 0;
 if ((HEAP8[30895 + (HEAP32[$button$addr >> 2] | 0) >> 0] | 0) != (HEAP8[30898 + (HEAP32[$button$addr >> 2] | 0) >> 0] | 0)) {
  if ((HEAP8[30895 + (HEAP32[$button$addr >> 2] | 0) >> 0] | 0) != 1) label = 3;
 } else label = 3;
 if ((label | 0) == 3) if (!(_IsGestureDetected(1) | 0)) {
  $6 = HEAP8[$pressed >> 0] | 0;
  $tobool = $6 & 1;
  STACKTOP = sp;
  return $tobool | 0;
 }
 HEAP8[$pressed >> 0] = 1;
 $6 = HEAP8[$pressed >> 0] | 0;
 $tobool = $6 & 1;
 STACKTOP = sp;
 return $tobool | 0;
}

function _stbir__srgb_to_linear($f) {
 $f = Math_fround($f);
 var $1 = f0, $3 = f0, $cmp = 0, $f$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 4 | 0;
 $f$addr = sp;
 HEAPF32[$f$addr >> 2] = $f;
 $cmp = Math_fround(HEAPF32[$f$addr >> 2]) <= Math_fround(.0404499993);
 $1 = Math_fround(HEAPF32[$f$addr >> 2]);
 if ($cmp) {
  HEAPF32[$retval >> 2] = Math_fround($1 / Math_fround(12.9200001));
  $3 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($3);
 } else {
  HEAPF32[$retval >> 2] = Math_fround(+Math_pow(+(+Math_fround(Math_fround($1 + Math_fround(.0549999997)) / Math_fround(1.05499995))), 2.4000000953674316));
  $3 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($3);
 }
 return Math_fround(0.0);
}

function _stbir__linear_to_srgb($f) {
 $f = Math_fround($f);
 var $1 = f0, $3 = f0, $cmp = 0, $f$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 4 | 0;
 $f$addr = sp;
 HEAPF32[$f$addr >> 2] = $f;
 $cmp = Math_fround(HEAPF32[$f$addr >> 2]) <= Math_fround(.00313080009);
 $1 = Math_fround(HEAPF32[$f$addr >> 2]);
 if ($cmp) {
  HEAPF32[$retval >> 2] = Math_fround($1 * Math_fround(12.9200001));
  $3 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($3);
 } else {
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(Math_fround(+Math_pow(+(+$1), .4166666567325592)) * Math_fround(1.05499995)) - Math_fround(.0549999997));
  $3 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($3);
 }
 return Math_fround(0.0);
}

function _emscripten_GetProcAddress($name_) {
 $name_ = $name_ | 0;
 var $call1 = 0, $call12 = 0, $call16 = 0, $call20 = 0, $call3 = 0, $call4 = 0, $call8 = 0, $ptr$0 = 0;
 $call1 = _malloc((_strlen($name_) | 0) + 1 | 0) | 0;
 _strcpy($call1, $name_) | 0;
 $call3 = _strstr($call1, 18854) | 0;
 if ($call3 | 0) HEAP8[$call3 >> 0] = 0;
 $call4 = _strstr($call1, 18858) | 0;
 if ($call4 | 0) HEAP8[$call4 >> 0] = 0;
 $call8 = _strstr($call1, 18862) | 0;
 if ($call8 | 0) HEAP8[$call8 >> 0] = 0;
 $call12 = _strstr($call1, 18866) | 0;
 if ($call12 | 0) HEAP8[$call12 >> 0] = 0;
 $call16 = _strstr($call1, 18872) | 0;
 if ($call16 | 0) HEAP8[$call16 >> 0] = 0;
 $call20 = _emscripten_webgl1_get_proc_address($call1) | 0;
 if (!$call20) $ptr$0 = __webgl1_match_ext_proc_address_without_suffix($call1) | 0; else $ptr$0 = $call20;
 _free($call1);
 return $ptr$0 | 0;
}

function _fclose($f) {
 $f = $f | 0;
 var $$pre = 0, $2 = 0, $5 = 0, $9 = 0, $call1 = 0, $call18 = 0, $cond = 0, $or = 0, $tobool = 0;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) $cond = ___lockfile($f) | 0; else $cond = 0;
 ___unlist_locked_file($f);
 $tobool = (HEAP32[$f >> 2] & 1 | 0) != 0;
 if (!$tobool) {
  $call1 = ___ofl_lock() | 0;
  $2 = HEAP32[$f + 52 >> 2] | 0;
  $$pre = $f + 56 | 0;
  if ($2 | 0) HEAP32[$2 + 56 >> 2] = HEAP32[$$pre >> 2];
  $5 = HEAP32[$$pre >> 2] | 0;
  if ($5 | 0) HEAP32[$5 + 52 >> 2] = $2;
  if ((HEAP32[$call1 >> 2] | 0) == ($f | 0)) HEAP32[$call1 >> 2] = $5;
  ___ofl_unlock();
 }
 $call18 = _fflush($f) | 0;
 $or = FUNCTION_TABLE_ii[HEAP32[$f + 12 >> 2] & 15]($f) | 0 | $call18;
 $9 = HEAP32[$f + 96 >> 2] | 0;
 if ($9 | 0) _free($9);
 if ($tobool) {
  if ($cond | 0) ___unlockfile($f);
 } else _free($f);
 return $or | 0;
}

function _rlPopMatrix() {
 var $mat = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $mat = sp;
 if ((HEAP32[7396] | 0) > 0) {
  dest = $mat;
  src = 18880 + ((HEAP32[7396] | 0) - 1 << 6) | 0;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  dest = HEAP32[7379] | 0;
  src = $mat;
  stop = dest + 64 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[7396] = (HEAP32[7396] | 0) + -1;
 }
 if (!((HEAP32[7396] | 0) == 0 & (HEAP32[1892] | 0) == 5888)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[7379] = 29520;
 HEAP8[30880] = 0;
 STACKTOP = sp;
 return;
}

function _GetFileName($filePath) {
 $filePath = $filePath | 0;
 var $7 = 0, $fileName = 0, $filePath$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $filePath$addr = sp + 4 | 0;
 $fileName = sp;
 HEAP32[$filePath$addr >> 2] = $filePath;
 HEAP32[$fileName >> 2] = 0;
 if (HEAP32[$filePath$addr >> 2] | 0) HEAP32[$fileName >> 2] = _strprbrk(HEAP32[$filePath$addr >> 2] | 0, 11869) | 0;
 if (HEAP32[$fileName >> 2] | 0) if ((HEAP32[$fileName >> 2] | 0) != (HEAP32[$filePath$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = (HEAP32[$fileName >> 2] | 0) + 1;
  $7 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $7 | 0;
 }
 HEAP32[$retval >> 2] = HEAP32[$filePath$addr >> 2];
 $7 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function _stbir__filter_triangle($x, $s) {
 $x = Math_fround($x);
 $s = Math_fround($s);
 var $4 = f0, $retval = 0, $x$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $x$addr = sp + 4 | 0;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[sp >> 2] = $s;
 HEAPF32[$x$addr >> 2] = Math_fround(+Math_abs(+(+Math_fround(HEAPF32[$x$addr >> 2]))));
 if (Math_fround(HEAPF32[$x$addr >> 2]) <= Math_fround(1.0)) {
  HEAPF32[$retval >> 2] = Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[$x$addr >> 2]));
  $4 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($4);
 } else {
  HEAPF32[$retval >> 2] = Math_fround(0.0);
  $4 = Math_fround(HEAPF32[$retval >> 2]);
  STACKTOP = sp;
  return Math_fround($4);
 }
 return Math_fround(0.0);
}

function _EmscriptenMouseCallback($eventType, $mouseEvent, $userData) {
 $eventType = $eventType | 0;
 $mouseEvent = $mouseEvent | 0;
 $userData = $userData | 0;
 var $eventType$addr = 0, $plce = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 $eventType$addr = sp + 268 | 0;
 $plce = sp;
 HEAP32[$eventType$addr >> 2] = $eventType;
 HEAP32[sp + 264 >> 2] = $mouseEvent;
 HEAP32[sp + 260 >> 2] = $userData;
 do if ((HEAP32[$eventType$addr >> 2] | 0) == 4) if (0) {
  _emscripten_get_pointerlock_status($plce | 0) | 0;
  if (HEAP32[$plce >> 2] | 0) {
   _emscripten_exit_pointerlock() | 0;
   _emscripten_get_pointerlock_status($plce | 0) | 0;
   break;
  } else {
   _emscripten_request_pointerlock(0, 1) | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return 0;
}

function _TextToLower($text) {
 $text = $text | 0;
 var $conv5 = 0, $i = 0, $text$addr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $text$addr = sp + 4 | 0;
 $i = sp;
 HEAP32[$text$addr >> 2] = $text;
 HEAP32[$i >> 2] = 0;
 while (1) {
  if ((HEAP32[$i >> 2] | 0) >= 1024) {
   label = 6;
   break;
  }
  if (!(HEAP8[(HEAP32[$text$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0)) break;
  $conv5 = (_tolower(HEAP8[(HEAP32[$text$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) | 0) & 255;
  HEAP8[27328 + (HEAP32[$i >> 2] | 0) >> 0] = $conv5;
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 if ((label | 0) == 6) {
  STACKTOP = sp;
  return 27328;
 }
 HEAP8[27328 + (HEAP32[$i >> 2] | 0) >> 0] = 0;
 STACKTOP = sp;
 return 27328;
}

function _SetupViewport($width, $height) {
 $width = $width | 0;
 $height = $height | 0;
 var $height$addr = 0, $width$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $width$addr = sp + 4 | 0;
 $height$addr = sp;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 HEAP32[7547] = HEAP32[$width$addr >> 2];
 HEAP32[7548] = HEAP32[$height$addr >> 2];
 CSE$0 = HEAP32[7549] | 0;
 CSE$1 = HEAP32[7550] | 0;
 _rlViewport((CSE$0 | 0) / 2 | 0, (CSE$1 | 0) / 2 | 0, (HEAP32[7547] | 0) - CSE$0 | 0, (HEAP32[7548] | 0) - CSE$1 | 0);
 _rlMatrixMode(5889);
 _rlLoadIdentity();
 _rlOrtho(0.0, +(HEAP32[7547] | 0), +(HEAP32[7548] | 0), 0.0, 0.0, 1.0);
 _rlMatrixMode(5888);
 _rlLoadIdentity();
 STACKTOP = sp;
 return;
}

function _stbir__get_ring_buffer_entry($ring_buffer, $index, $ring_buffer_length) {
 $ring_buffer = $ring_buffer | 0;
 $index = $index | 0;
 $ring_buffer_length = $ring_buffer_length | 0;
 var $arrayidx = 0, $index$addr = 0, $ring_buffer$addr = 0, $ring_buffer_length$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ring_buffer$addr = sp + 8 | 0;
 $index$addr = sp + 4 | 0;
 $ring_buffer_length$addr = sp;
 HEAP32[$ring_buffer$addr >> 2] = $ring_buffer;
 HEAP32[$index$addr >> 2] = $index;
 HEAP32[$ring_buffer_length$addr >> 2] = $ring_buffer_length;
 $arrayidx = (HEAP32[$ring_buffer$addr >> 2] | 0) + ((Math_imul(HEAP32[$index$addr >> 2] | 0, HEAP32[$ring_buffer_length$addr >> 2] | 0) | 0) << 2) | 0;
 STACKTOP = sp;
 return $arrayidx | 0;
}

function _stbiw__crc32($buffer, $len) {
 $buffer = $buffer | 0;
 $len = $len | 0;
 var $2 = 0, $buffer$addr = 0, $crc = 0, $i = 0, $len$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $buffer$addr = sp + 12 | 0;
 $len$addr = sp + 8 | 0;
 $crc = sp + 4 | 0;
 $i = sp;
 HEAP32[$buffer$addr >> 2] = $buffer;
 HEAP32[$len$addr >> 2] = $len;
 HEAP32[$crc >> 2] = -1;
 HEAP32[$i >> 2] = 0;
 while (1) {
  $2 = HEAP32[$crc >> 2] | 0;
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[$len$addr >> 2] | 0)) break;
  HEAP32[$crc >> 2] = $2 >>> 8 ^ HEAP32[4192 + (((HEAPU8[(HEAP32[$buffer$addr >> 2] | 0) + (HEAP32[$i >> 2] | 0) >> 0] | 0) ^ HEAP32[$crc >> 2] & 255) << 2) >> 2];
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return ~$2 | 0;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $0 = 0, $call12 = 0, $call7 = 0, $mem$1 = 0, $sub = 0;
 if (!$oldmem) {
  $mem$1 = _malloc($bytes) | 0;
  return $mem$1 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 48;
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $call7 = _try_realloc_chunk($oldmem + -8 | 0, $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8) | 0;
 if ($call7 | 0) {
  $mem$1 = $call7 + 8 | 0;
  return $mem$1 | 0;
 }
 $call12 = _malloc($bytes) | 0;
 if (!$call12) {
  $mem$1 = 0;
  return $mem$1 | 0;
 }
 $0 = HEAP32[$oldmem + -4 >> 2] | 0;
 $sub = ($0 & -8) - (($0 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($call12 | 0, $oldmem | 0, ($sub >>> 0 < $bytes >>> 0 ? $sub : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$1 = $call12;
 return $mem$1 | 0;
}

function _Wait($ms) {
 $ms = Math_fround($ms);
 var $conv1 = f0, $ms$addr = 0, $req = 0, $sec = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $ms$addr = sp + 16 | 0;
 $req = sp + 8 | 0;
 $sec = sp;
 HEAPF32[$ms$addr >> 2] = $ms;
 HEAP32[$req >> 2] = 0;
 HEAP32[$req + 4 >> 2] = 0;
 HEAP32[$sec >> 2] = ~~Math_fround(Math_fround(HEAPF32[$ms$addr >> 2]) / Math_fround(1.0e3));
 $conv1 = Math_fround((HEAP32[$sec >> 2] | 0) * 1e3 | 0);
 HEAPF32[$ms$addr >> 2] = Math_fround(Math_fround(HEAPF32[$ms$addr >> 2]) - $conv1);
 HEAP32[$req >> 2] = HEAP32[$sec >> 2];
 HEAP32[$req + 4 >> 2] = ~~Math_fround(Math_fround(HEAPF32[$ms$addr >> 2]) * Math_fround(1.0e6));
 do {} while ((_nanosleep($req | 0, $req | 0) | 0) == -1);
 STACKTOP = sp;
 return;
}

function _twobyte_strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $2 = 0, $4 = 0, $5 = 0, $arrayidx7 = 0, $conv12 = 0, $h$addr$012 = 0, $hw$0$in13 = 0, $incdec$ptr17 = 0, $or = 0;
 $or = (HEAPU8[$n >> 0] | 0) << 8 | (HEAPU8[$n + 1 >> 0] | 0);
 $arrayidx7 = $h + 1 | 0;
 $2 = HEAP8[$arrayidx7 >> 0] | 0;
 L1 : do if (!($2 << 24 >> 24)) $5 = 0; else {
  $h$addr$012 = $arrayidx7;
  $hw$0$in13 = (HEAPU8[$h >> 0] | 0) << 8 | $2 & 255;
  while (1) {
   $conv12 = $hw$0$in13 & 65535;
   if (($conv12 | 0) == ($or | 0)) break;
   $incdec$ptr17 = $h$addr$012 + 1 | 0;
   $4 = HEAP8[$incdec$ptr17 >> 0] | 0;
   if (!($4 << 24 >> 24)) {
    $5 = 0;
    break L1;
   } else {
    $h$addr$012 = $incdec$ptr17;
    $hw$0$in13 = $conv12 << 8 | $4 & 255;
   }
  }
  $5 = $h$addr$012 + -1 | 0;
 } while (0);
 return $5 | 0;
}

function _GetGamepadAxis($axis) {
 $axis = $axis | 0;
 var $axis$addr = 0, $axs = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $axis$addr = sp + 4 | 0;
 $axs = sp;
 HEAP32[$axis$addr >> 2] = $axis;
 HEAP32[$axs >> 2] = 0;
 switch (HEAP32[$axis$addr >> 2] | 0) {
 case 0:
  {
   HEAP32[$axs >> 2] = 1;
   label = 3;
   break;
  }
 case 1:
  {
   label = 3;
   break;
  }
 case 2:
  {
   label = 4;
   break;
  }
 case 3:
  {
   label = 5;
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 3) {
  HEAP32[$axs >> 2] = 2;
  label = 4;
 }
 if ((label | 0) == 4) {
  HEAP32[$axs >> 2] = 3;
  label = 5;
 }
 if ((label | 0) == 5) HEAP32[$axs >> 2] = 3;
 STACKTOP = sp;
 return HEAP32[$axs >> 2] | 0;
}

function _MatrixIdentity($agg$result) {
 $agg$result = $agg$result | 0;
 var $result = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $result = sp;
 dest = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAPF32[$result >> 2] = Math_fround(1.0);
 HEAPF32[$result + 20 >> 2] = Math_fround(1.0);
 HEAPF32[$result + 40 >> 2] = Math_fround(1.0);
 HEAPF32[$result + 60 >> 2] = Math_fround(1.0);
 dest = $agg$result;
 src = $result;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _pad_651($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $1 = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $pad = 0, $sub = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 $pad = sp;
 if (($w | 0) > ($l | 0) & ($fl & 73728 | 0) == 0) {
  $sub = $w - $l | 0;
  _memset($pad | 0, $c << 24 >> 24 | 0, ($sub >>> 0 < 256 ? $sub : 256) | 0) | 0;
  if ($sub >>> 0 > 255) {
   $1 = $w - $l | 0;
   $l$addr$09 = $sub;
   do {
    _out($f, $pad, 256);
    $l$addr$09 = $l$addr$09 + -256 | 0;
   } while ($l$addr$09 >>> 0 > 255);
   $l$addr$0$lcssa = $1 & 255;
  } else $l$addr$0$lcssa = $sub;
  _out($f, $pad, $l$addr$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function ___fmodeflags($mode) {
 $mode = $mode | 0;
 var $0 = 0, $flags$0 = 0, $flags$2 = 0, $flags$4 = 0, $spec$select = 0, $spec$select13 = 0, $tobool = 0, $tobool10 = 0, $tobool6 = 0, CSE$0 = 0;
 $tobool = (_strchr($mode, 43) | 0) == 0;
 $0 = HEAP8[$mode >> 0] | 0;
 CSE$0 = $0 << 24 >> 24 | 0;
 $flags$0 = $tobool ? (CSE$0 | 0) != 114 & 1 : 2;
 $tobool6 = (_strchr($mode, 120) | 0) == 0;
 $spec$select = $tobool6 ? $flags$0 : $flags$0 | 128;
 $tobool10 = (_strchr($mode, 101) | 0) == 0;
 $flags$2 = $tobool10 ? $spec$select : $spec$select | 524288;
 $spec$select13 = (CSE$0 | 0) == 114 ? $flags$2 : $flags$2 | 64;
 $flags$4 = (CSE$0 | 0) == 119 ? $spec$select13 | 512 : $spec$select13;
 return ((CSE$0 | 0) == 97 ? $flags$4 | 1024 : $flags$4) | 0;
}

function _EmscriptenKeyboardCallback($eventType, $keyEvent, $userData) {
 $eventType = $eventType | 0;
 $keyEvent = $keyEvent | 0;
 $userData = $userData | 0;
 var $eventType$addr = 0, $keyEvent$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $eventType$addr = sp + 8 | 0;
 $keyEvent$addr = sp + 4 | 0;
 HEAP32[$eventType$addr >> 2] = $eventType;
 HEAP32[$keyEvent$addr >> 2] = $keyEvent;
 HEAP32[sp >> 2] = $userData;
 if ((HEAP32[$eventType$addr >> 2] | 0) != 1) {
  STACKTOP = sp;
  return 0;
 }
 if (_strcmp((HEAP32[$keyEvent$addr >> 2] | 0) + 32 | 0, 11311) | 0) {
  STACKTOP = sp;
  return 0;
 }
 _emscripten_exit_pointerlock() | 0;
 STACKTOP = sp;
 return 0;
}

function _stbiw__zlib_bitrev($code, $codebits) {
 $code = $code | 0;
 $codebits = $codebits | 0;
 var $0 = 0, $1 = 0, $code$addr = 0, $codebits$addr = 0, $res = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $code$addr = sp + 8 | 0;
 $codebits$addr = sp + 4 | 0;
 $res = sp;
 HEAP32[$code$addr >> 2] = $code;
 HEAP32[$codebits$addr >> 2] = $codebits;
 HEAP32[$res >> 2] = 0;
 while (1) {
  $0 = HEAP32[$codebits$addr >> 2] | 0;
  HEAP32[$codebits$addr >> 2] = $0 + -1;
  $1 = HEAP32[$res >> 2] | 0;
  if (!$0) break;
  HEAP32[$res >> 2] = $1 << 1 | HEAP32[$code$addr >> 2] & 1;
  HEAP32[$code$addr >> 2] = HEAP32[$code$addr >> 2] >> 1;
 }
 STACKTOP = sp;
 return $1 | 0;
}

function _strprbrk($s, $charset) {
 $s = $s | 0;
 $charset = $charset | 0;
 var $3 = 0, $charset$addr = 0, $latestMatch = 0, $s$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $s$addr = sp + 8 | 0;
 $charset$addr = sp + 4 | 0;
 $latestMatch = sp;
 HEAP32[$s$addr >> 2] = $s;
 HEAP32[$charset$addr >> 2] = $charset;
 HEAP32[$latestMatch >> 2] = 0;
 while (1) {
  HEAP32[$s$addr >> 2] = _strpbrk(HEAP32[$s$addr >> 2] | 0, HEAP32[$charset$addr >> 2] | 0) | 0;
  if (!(HEAP32[$s$addr >> 2] | 0)) break;
  $3 = HEAP32[$s$addr >> 2] | 0;
  HEAP32[$s$addr >> 2] = $3 + 1;
  HEAP32[$latestMatch >> 2] = $3;
 }
 STACKTOP = sp;
 return HEAP32[$latestMatch >> 2] | 0;
}

function _GetExtension($fileName) {
 $fileName = $fileName | 0;
 var $5 = 0, $dot = 0, $fileName$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 8 | 0;
 $fileName$addr = sp + 4 | 0;
 $dot = sp;
 HEAP32[$fileName$addr >> 2] = $fileName;
 HEAP32[$dot >> 2] = _strrchr(HEAP32[$fileName$addr >> 2] | 0, 46) | 0;
 if (HEAP32[$dot >> 2] | 0) if ((HEAP32[$dot >> 2] | 0) != (HEAP32[$fileName$addr >> 2] | 0)) {
  HEAP32[$retval >> 2] = (HEAP32[$dot >> 2] | 0) + 1;
  $5 = HEAP32[$retval >> 2] | 0;
  STACKTOP = sp;
  return $5 | 0;
 }
 HEAP32[$retval >> 2] = 0;
 $5 = HEAP32[$retval >> 2] | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _GifWriteChunk($f, $stat) {
 $f = $f | 0;
 $stat = $stat | 0;
 var $f$addr = 0, $stat$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $f$addr = sp + 4 | 0;
 $stat$addr = sp;
 HEAP32[$f$addr >> 2] = $f;
 HEAP32[$stat$addr >> 2] = $stat;
 _fputc(HEAP32[(HEAP32[$stat$addr >> 2] | 0) + 4 >> 2] | 0, HEAP32[$f$addr >> 2] | 0) | 0;
 CSE$0 = HEAP32[$stat$addr >> 2] | 0;
 _fwrite(CSE$0 + 8 | 0, 1, HEAP32[CSE$0 + 4 >> 2] | 0, HEAP32[$f$addr >> 2] | 0) | 0;
 HEAP8[HEAP32[$stat$addr >> 2] >> 0] = 0;
 HEAP8[(HEAP32[$stat$addr >> 2] | 0) + 1 >> 0] = 0;
 HEAP32[(HEAP32[$stat$addr >> 2] | 0) + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _TextFormat($text, $varargs) {
 $text = $text | 0;
 $varargs = $varargs | 0;
 var $add = 0, $args = 0, $currentBuffer = 0, $text$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $text$addr = sp + 20 | 0;
 $currentBuffer = sp + 16 | 0;
 $args = sp;
 HEAP32[$text$addr >> 2] = $text;
 HEAP32[$currentBuffer >> 2] = 21696 + (HEAP32[7575] << 10);
 HEAP32[$args >> 2] = $varargs;
 _vsprintf(HEAP32[$currentBuffer >> 2] | 0, HEAP32[$text$addr >> 2] | 0, $args) | 0;
 $add = (HEAP32[7575] | 0) + 1 | 0;
 HEAP32[7575] = $add;
 HEAP32[7575] = (HEAP32[7575] | 0) >= 4 ? 0 : $add;
 STACKTOP = sp;
 return HEAP32[$currentBuffer >> 2] | 0;
}

function _Vector3Length($v) {
 $v = $v | 0;
 var $0 = f0, $2 = f0, $4 = f0, $7 = f0, $add = f0, $mul = f0, $result = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $result = sp;
 $0 = Math_fround(HEAPF32[$v >> 2]);
 $mul = Math_fround($0 * Math_fround(HEAPF32[$v >> 2]));
 $2 = Math_fround(HEAPF32[$v + 4 >> 2]);
 $add = Math_fround($mul + Math_fround($2 * Math_fround(HEAPF32[$v + 4 >> 2])));
 $4 = Math_fround(HEAPF32[$v + 8 >> 2]);
 HEAPF32[$result >> 2] = Math_fround(Math_sqrt(Math_fround($add + Math_fround($4 * Math_fround(HEAPF32[$v + 8 >> 2])))));
 $7 = Math_fround(HEAPF32[$result >> 2]);
 STACKTOP = sp;
 return Math_fround($7);
}

function _BeginDrawing() {
 var $screenScaling$byval_copy = 0, $tmp = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 $screenScaling$byval_copy = sp + 64 | 0;
 $tmp = sp;
 HEAPF64[3678] = +_GetTime();
 HEAPF64[3679] = +HEAPF64[3678] - +HEAPF64[3676];
 HEAPF64[3676] = +HEAPF64[3678];
 _rlLoadIdentity();
 dest = $screenScaling$byval_copy;
 src = 30108;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 _MatrixToFloatV($tmp, $screenScaling$byval_copy);
 _rlMultMatrixf($tmp);
 STACKTOP = sp;
 return;
}

function _stbir__saturate($x) {
 $x = Math_fround($x);
 var $3 = f0, $retval = 0, $x$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 4 | 0;
 $x$addr = sp;
 HEAPF32[$x$addr >> 2] = $x;
 do if (Math_fround(HEAPF32[$x$addr >> 2]) < Math_fround(0.0)) HEAPF32[$retval >> 2] = Math_fround(0.0); else if (Math_fround(HEAPF32[$x$addr >> 2]) > Math_fround(1.0)) {
  HEAPF32[$retval >> 2] = Math_fround(1.0);
  break;
 } else {
  HEAPF32[$retval >> 2] = Math_fround(HEAPF32[$x$addr >> 2]);
  break;
 } while (0);
 $3 = Math_fround(HEAPF32[$retval >> 2]);
 STACKTOP = sp;
 return Math_fround($3);
}

function _rlViewport($x, $y, $width, $height) {
 $x = $x | 0;
 $y = $y | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $height$addr = 0, $width$addr = 0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $x$addr = sp + 12 | 0;
 $y$addr = sp + 8 | 0;
 $width$addr = sp + 4 | 0;
 $height$addr = sp;
 HEAP32[$x$addr >> 2] = $x;
 HEAP32[$y$addr >> 2] = $y;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 _glViewport(HEAP32[$x$addr >> 2] | 0, HEAP32[$y$addr >> 2] | 0, HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _fwrite($src, $size, $nmemb, $f) {
 $src = $src | 0;
 $size = $size | 0;
 $nmemb = $nmemb | 0;
 $f = $f | 0;
 var $call1 = 0, $call113 = 0, $cond9 = 0, $mul = 0, $phitmp = 0, $spec$select = 0;
 $mul = Math_imul($nmemb, $size) | 0;
 $spec$select = ($size | 0) == 0 ? 0 : $nmemb;
 if ((HEAP32[$f + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($f) | 0) == 0;
  $call1 = ___fwritex($src, $mul, $f) | 0;
  if ($phitmp) $call113 = $call1; else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else $call113 = ___fwritex($src, $mul, $f) | 0;
 if (($call113 | 0) == ($mul | 0)) $cond9 = $spec$select; else $cond9 = ($call113 >>> 0) / ($size >>> 0) | 0;
 return $cond9 | 0;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $l$addr$010 = 0, $r$addr$011 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $1;
  $$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;
  $r$addr$011 = $r;
  do {
   $l$addr$010 = $l$addr$010 + 1 | 0;
   $r$addr$011 = $r$addr$011 + 1 | 0;
   $2 = HEAP8[$l$addr$010 >> 0] | 0;
   $3 = HEAP8[$r$addr$011 >> 0] | 0;
  } while (!($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24));
  $$lcssa = $3;
  $$lcssa6 = $2;
 }
 return ($$lcssa6 & 255) - ($$lcssa & 255) | 0;
}

function _EmscriptenGamepadCallback($eventType, $gamepadEvent, $userData) {
 $eventType = $eventType | 0;
 $gamepadEvent = $gamepadEvent | 0;
 $userData = $userData | 0;
 var $gamepadEvent$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $gamepadEvent$addr = sp + 4 | 0;
 HEAP32[sp + 8 >> 2] = $eventType;
 HEAP32[$gamepadEvent$addr >> 2] = $gamepadEvent;
 HEAP32[sp >> 2] = $userData;
 if (HEAP32[(HEAP32[$gamepadEvent$addr >> 2] | 0) + 1296 >> 2] | 0) if ((HEAP32[(HEAP32[$gamepadEvent$addr >> 2] | 0) + 1300 >> 2] | 0) < 4) {
  STACKTOP = sp;
  return 0;
 }
 STACKTOP = sp;
 return 0;
}

function _ErrorCallback($error, $description) {
 $error = $error | 0;
 $description = $description | 0;
 var $1 = 0, $description$addr = 0, $error$addr = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vararg_buffer = sp;
 $error$addr = sp + 12 | 0;
 $description$addr = sp + 8 | 0;
 HEAP32[$error$addr >> 2] = $error;
 HEAP32[$description$addr >> 2] = $description;
 $1 = HEAP32[$description$addr >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$error$addr >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $1;
 _TraceLog(4, 12081, $vararg_buffer);
 STACKTOP = sp;
 return;
}

function ___stdio_seek($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 var $10 = 0, $14 = 0, $15 = 0, $4 = 0, $ret = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ret = sp;
 if (!(___wasi_syscall_ret(___wasi_fd_seek(HEAP32[$f + 60 >> 2] | 0, $0 | 0, $1 | 0, $whence & 255 | 0, $ret | 0) | 0) | 0)) {
  $4 = $ret;
  $14 = HEAP32[$4 + 4 >> 2] | 0;
  $15 = HEAP32[$4 >> 2] | 0;
 } else {
  $10 = $ret;
  HEAP32[$10 >> 2] = -1;
  HEAP32[$10 + 4 >> 2] = -1;
  $14 = -1;
  $15 = -1;
 }
 setTempRet0($14 | 0);
 STACKTOP = sp;
 return $15 | 0;
}

function _fmt_x($0, $1, $s, $lower) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 $lower = $lower | 0;
 var $5 = 0, $7 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $5 = $0;
  $7 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = HEAPU8[7232 + ($5 & 15) >> 0] | 0 | $lower;
   $5 = _bitshift64Lshr($5 | 0, $7 | 0, 4) | 0;
   $7 = getTempRet0() | 0;
   if (($5 | 0) == 0 & ($7 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function _GifEnd() {
 var $$pre_trunc = 0, $4 = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp;
 if (HEAP32[7523] | 0) {
  _fputc(59, HEAP32[7523] | 0) | 0;
  _fclose(HEAP32[7523] | 0) | 0;
  _free(HEAP32[7362] | 0);
  HEAP32[7523] = 0;
  HEAP32[7362] = 0;
  HEAP8[$retval >> 0] = 1;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $4 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $4 | 0;
 } else {
  HEAP8[$retval >> 0] = 0;
  $$pre_trunc = HEAP8[$retval >> 0] | 0;
  $4 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $4 | 0;
 }
 return 0;
}

function _WindowSizeCallback($window, $width, $height) {
 $window = $window | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $height$addr = 0, $width$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $width$addr = sp + 4 | 0;
 $height$addr = sp;
 HEAP32[sp + 8 >> 2] = $window;
 HEAP32[$width$addr >> 2] = $width;
 HEAP32[$height$addr >> 2] = $height;
 _SetupViewport(HEAP32[$width$addr >> 2] | 0, HEAP32[$height$addr >> 2] | 0);
 HEAP32[7525] = HEAP32[$width$addr >> 2];
 HEAP32[7526] = HEAP32[$height$addr >> 2];
 STACKTOP = sp;
 return;
}

function _TextIsEqual($text1, $text2) {
 $text1 = $text1 | 0;
 $text2 = $text2 | 0;
 var $cmp = 0, $result = 0, $text1$addr = 0, $text2$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $text1$addr = sp + 4 | 0;
 $text2$addr = sp;
 $result = sp + 8 | 0;
 HEAP32[$text1$addr >> 2] = $text1;
 HEAP32[$text2$addr >> 2] = $text2;
 HEAP8[$result >> 0] = 0;
 $cmp = (_strcmp(HEAP32[$text1$addr >> 2] | 0, HEAP32[$text2$addr >> 2] | 0) | 0) == 0;
 HEAP8[$result >> 0] = $cmp ? 1 : 0;
 STACKTOP = sp;
 return HEAP8[$result >> 0] & 1 | 0;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0, $cond = 0, $l$012 = 0, $n$addr$011 = 0, $r$013 = 0;
 L1 : do if (!$n) $cond = 0; else {
  $l$012 = $vl;
  $n$addr$011 = $n;
  $r$013 = $vr;
  while (1) {
   $0 = HEAP8[$l$012 >> 0] | 0;
   $1 = HEAP8[$r$013 >> 0] | 0;
   if ($0 << 24 >> 24 != $1 << 24 >> 24) break;
   $n$addr$011 = $n$addr$011 + -1 | 0;
   if (!$n$addr$011) {
    $cond = 0;
    break L1;
   } else {
    $l$012 = $l$012 + 1 | 0;
    $r$013 = $r$013 + 1 | 0;
   }
  }
  $cond = ($0 & 255) - ($1 & 255) | 0;
 } while (0);
 return $cond | 0;
}

function _IsMouseButtonReleased($button) {
 $button = $button | 0;
 var $button$addr = 0, $released = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $button$addr = sp;
 $released = sp + 4 | 0;
 HEAP32[$button$addr >> 2] = $button;
 HEAP8[$released >> 0] = 0;
 if ((HEAP8[30895 + (HEAP32[$button$addr >> 2] | 0) >> 0] | 0) != (HEAP8[30898 + (HEAP32[$button$addr >> 2] | 0) >> 0] | 0)) if (!(HEAP8[30895 + (HEAP32[$button$addr >> 2] | 0) >> 0] | 0)) HEAP8[$released >> 0] = 1;
 STACKTOP = sp;
 return HEAP8[$released >> 0] & 1 | 0;
}

function _rlPushMatrix() {
 var dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if ((HEAP32[7396] | 0) >= 32) _TraceLog(5, 7891, sp);
 if ((HEAP32[1892] | 0) == 5888) {
  HEAP8[30880] = 1;
  HEAP32[7379] = 29588;
 }
 dest = 18880 + (HEAP32[7396] << 6) | 0;
 src = HEAP32[7379] | 0;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[7396] = (HEAP32[7396] | 0) + 1;
 STACKTOP = sp;
 return;
}

function _sbrk($increment) {
 $increment = $increment | 0;
 var $0 = 0, $add = 0, $call = 0, $retval$2 = 0;
 $call = _emscripten_get_sbrk_ptr() | 0;
 $0 = HEAP32[$call >> 2] | 0;
 $add = $0 + $increment | 0;
 if (($add | 0) < 0) {
  HEAP32[(___errno_location() | 0) >> 2] = 48;
  $retval$2 = -1;
  return $retval$2 | 0;
 }
 if ($add >>> 0 > (_emscripten_get_heap_size() | 0) >>> 0) if (!(_emscripten_resize_heap($add | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 48;
  $retval$2 = -1;
  return $retval$2 | 0;
 }
 HEAP32[$call >> 2] = $add;
 $retval$2 = $0;
 return $retval$2 | 0;
}

function _GetMousePosition($agg$result) {
 $agg$result = $agg$result | 0;
 var $position = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $position = sp + 8 | 0;
 $tmp = sp;
 HEAP32[$position >> 2] = 0;
 HEAP32[$position + 4 >> 2] = 0;
 _GetTouchPosition($tmp, 0);
 HEAP32[$position >> 2] = HEAP32[$tmp >> 2];
 HEAP32[$position + 4 >> 2] = HEAP32[$tmp + 4 >> 2];
 HEAP32[$agg$result >> 2] = HEAP32[$position >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$position + 4 >> 2];
 STACKTOP = sp;
 return;
}

function _stbir__support_trapezoid($scale) {
 $scale = Math_fround($scale);
 var $add = f0, $scale$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $scale$addr = sp;
 HEAPF32[$scale$addr >> 2] = $scale;
 if (Math_fround(HEAPF32[$scale$addr >> 2]) <= Math_fround(1.0)) {
  $add = Math_fround(Math_fround(Math_fround(HEAPF32[$scale$addr >> 2]) / Math_fround(2.0)) + Math_fround(.5));
  STACKTOP = sp;
  return Math_fround($add);
 } else ___assert_fail(13847, 12378, 780, 13858);
 return Math_fround(0.0);
}

function _fmt_o($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $6 = 0, $8 = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $s$addr$0$lcssa = $s; else {
  $6 = $0;
  $8 = $1;
  $s$addr$06 = $s;
  while (1) {
   $incdec$ptr = $s$addr$06 + -1 | 0;
   HEAP8[$incdec$ptr >> 0] = $6 & 7 | 48;
   $6 = _bitshift64Lshr($6 | 0, $8 | 0, 3) | 0;
   $8 = getTempRet0() | 0;
   if (($6 | 0) == 0 & ($8 | 0) == 0) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else $s$addr$06 = $incdec$ptr;
  }
 }
 return $s$addr$0$lcssa | 0;
}

function _stbir__get_filter_pixel_margin($filter, $scale) {
 $filter = $filter | 0;
 $scale = Math_fround($scale);
 var $div = 0, $filter$addr = 0, $scale$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $filter$addr = sp + 4 | 0;
 $scale$addr = sp;
 HEAP32[$filter$addr >> 2] = $filter;
 HEAPF32[$scale$addr >> 2] = $scale;
 $div = (_stbir__get_filter_pixel_width(HEAP32[$filter$addr >> 2] | 0, Math_fround(HEAPF32[$scale$addr >> 2])) | 0) / 2 | 0;
 STACKTOP = sp;
 return $div | 0;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $call = 0, $mul = 0, $req$0 = 0;
 if (!$n_elements) $req$0 = 0; else {
  $mul = Math_imul($elem_size, $n_elements) | 0;
  if (($elem_size | $n_elements) >>> 0 > 65535) $req$0 = (($mul >>> 0) / ($n_elements >>> 0) | 0 | 0) == ($elem_size | 0) ? $mul : -1; else $req$0 = $mul;
 }
 $call = _malloc($req$0) | 0;
 if (!$call) return $call | 0;
 if (!(HEAP32[$call + -4 >> 2] & 3)) return $call | 0;
 _memset($call | 0, 0, $req$0 | 0) | 0;
 return $call | 0;
}

function _stbir__get_total_horizontal_coefficients($info) {
 $info = $info | 0;
 var $1 = 0, $info$addr = 0, $mul = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $info$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 $1 = HEAP32[(HEAP32[$info$addr >> 2] | 0) + 152 >> 2] | 0;
 CSE$0 = HEAP32[$info$addr >> 2] | 0;
 $mul = Math_imul($1, _stbir__get_coefficient_width(HEAP32[CSE$0 + 80 >> 2] | 0, Math_fround(HEAPF32[CSE$0 + 56 >> 2])) | 0) | 0;
 STACKTOP = sp;
 return $mul | 0;
}

function _stbir__get_total_vertical_coefficients($info) {
 $info = $info | 0;
 var $1 = 0, $info$addr = 0, $mul = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $info$addr = sp;
 HEAP32[$info$addr >> 2] = $info;
 $1 = HEAP32[(HEAP32[$info$addr >> 2] | 0) + 156 >> 2] | 0;
 CSE$0 = HEAP32[$info$addr >> 2] | 0;
 $mul = Math_imul($1, _stbir__get_coefficient_width(HEAP32[CSE$0 + 84 >> 2] | 0, Math_fround(HEAPF32[CSE$0 + 60 >> 2])) | 0) | 0;
 STACKTOP = sp;
 return $mul | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = getTempRet0() | 0;
 return (setTempRet0((Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0 | 0), $1$0 | 0 | 0) | 0;
}

function ___towrite($f) {
 $f = $f | 0;
 var $1 = 0, $2 = 0, $conv = 0, $mode = 0, $retval$0 = 0;
 $mode = $f + 74 | 0;
 $conv = HEAP8[$mode >> 0] | 0;
 HEAP8[$mode >> 0] = $conv + 255 | $conv;
 $1 = HEAP32[$f >> 2] | 0;
 if (!($1 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $2 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $2;
  HEAP32[$f + 20 >> 2] = $2;
  HEAP32[$f + 16 >> 2] = $2 + (HEAP32[$f + 48 >> 2] | 0);
  $retval$0 = 0;
 } else {
  HEAP32[$f >> 2] = $1 | 32;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function _stbir__get_decode_buffer($stbir_info) {
 $stbir_info = $stbir_info | 0;
 var $arrayidx = 0, $stbir_info$addr = 0, sp = 0, CSE$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stbir_info$addr = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 CSE$0 = HEAP32[$stbir_info$addr >> 2] | 0;
 $arrayidx = (HEAP32[CSE$0 + 120 >> 2] | 0) + ((Math_imul(HEAP32[CSE$0 + 144 >> 2] | 0, HEAP32[CSE$0 + 64 >> 2] | 0) | 0) << 2) | 0;
 STACKTOP = sp;
 return $arrayidx | 0;
}

function _stbiw__fopen($filename, $mode) {
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $f = 0, $filename$addr = 0, $mode$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $filename$addr = sp + 8 | 0;
 $mode$addr = sp + 4 | 0;
 $f = sp;
 HEAP32[$filename$addr >> 2] = $filename;
 HEAP32[$mode$addr >> 2] = $mode;
 HEAP32[$f >> 2] = _fopen(HEAP32[$filename$addr >> 2] | 0, HEAP32[$mode$addr >> 2] | 0) | 0;
 STACKTOP = sp;
 return HEAP32[$f >> 2] | 0;
}

function _rlCheckBufferLimit($vCount) {
 $vCount = $vCount | 0;
 var $overflow = 0, $vCount$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $vCount$addr = sp;
 $overflow = sp + 4 | 0;
 HEAP32[$vCount$addr >> 2] = $vCount;
 HEAP8[$overflow >> 0] = 0;
 HEAP8[$overflow >> 0] = ((HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) >> 2] | 0) + (HEAP32[$vCount$addr >> 2] | 0) | 0) >= 8192 ? 1 : 0;
 STACKTOP = sp;
 return HEAP8[$overflow >> 0] & 1 | 0;
}

function _ClearDroppedFiles() {
 var $3 = 0, $i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $i = sp;
 if ((HEAP32[7552] | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$i >> 2] = 0;
 while (1) {
  $3 = HEAP32[7551] | 0;
  if ((HEAP32[$i >> 2] | 0) >= (HEAP32[7552] | 0)) break;
  _free(HEAP32[$3 + (HEAP32[$i >> 2] << 2) >> 2] | 0);
  HEAP32[$i >> 2] = (HEAP32[$i >> 2] | 0) + 1;
 }
 _free($3);
 HEAP32[7552] = 0;
 STACKTOP = sp;
 return;
}

function _UpdateGestures() {
 var $call3 = 0.0;
 if (((HEAP32[7503] | 0) == 1 | (HEAP32[7503] | 0) == 2) & (HEAP32[7504] | 0) < 2) {
  HEAP32[7503] = 4;
  +_GetCurrentTime();
 }
 $call3 = +_GetCurrentTime();
 if ($call3 - +HEAPF64[3674] > 300.0 & (HEAP32[7503] | 0) == 8 & (HEAP32[7504] | 0) < 2) {
  HEAP32[7503] = 4;
  +_GetCurrentTime();
  HEAP8[30893] = 1;
 }
 if (!((HEAP32[7503] | 0) == 16 | (HEAP32[7503] | 0) == 64 | (HEAP32[7503] | 0) == 32 | (HEAP32[7503] | 0) == 128)) return;
 HEAP32[7503] = 0;
 return;
}

function _getint($s) {
 $s = $s | 0;
 var $2 = 0, $add = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0;
 if (!(_isdigit(HEAP8[HEAP32[$s >> 2] >> 0] | 0) | 0)) $i$0$lcssa = 0; else {
  $i$07 = 0;
  while (1) {
   $2 = HEAP32[$s >> 2] | 0;
   $add = ($i$07 * 10 | 0) + -48 + (HEAP8[$2 >> 0] | 0) | 0;
   $incdec$ptr = $2 + 1 | 0;
   HEAP32[$s >> 2] = $incdec$ptr;
   if (!(_isdigit(HEAP8[$incdec$ptr >> 0] | 0) | 0)) {
    $i$0$lcssa = $add;
    break;
   } else $i$07 = $add;
  }
 }
 return $i$0$lcssa | 0;
}

function _rlVertex2f($x, $y) {
 $x = Math_fround($x);
 $y = Math_fround($y);
 var $0 = f0, $1 = f0, $x$addr = 0, $y$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $x$addr = sp + 4 | 0;
 $y$addr = sp;
 HEAPF32[$x$addr >> 2] = $x;
 HEAPF32[$y$addr >> 2] = $y;
 $0 = Math_fround(HEAPF32[$x$addr >> 2]);
 $1 = Math_fround(HEAPF32[$y$addr >> 2]);
 _rlVertex3f($0, $1, Math_fround(HEAPF32[1893]));
 STACKTOP = sp;
 return;
}

function _stbir__get_contributor($contributors, $n) {
 $contributors = $contributors | 0;
 $n = $n | 0;
 var $contributors$addr = 0, $n$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $contributors$addr = sp + 4 | 0;
 $n$addr = sp;
 HEAP32[$contributors$addr >> 2] = $contributors;
 HEAP32[$n$addr >> 2] = $n;
 STACKTOP = sp;
 return (HEAP32[$contributors$addr >> 2] | 0) + (HEAP32[$n$addr >> 2] << 3) | 0;
}

function _IsGestureDetected($gesture) {
 $gesture = $gesture | 0;
 var $gesture$addr = 0, $retval = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $retval = sp + 4 | 0;
 $gesture$addr = sp;
 HEAP32[$gesture$addr >> 2] = $gesture;
 if ((1023 & HEAP32[7503] | 0) == (HEAP32[$gesture$addr >> 2] | 0)) HEAP8[$retval >> 0] = 1; else HEAP8[$retval >> 0] = 0;
 STACKTOP = sp;
 return HEAP8[$retval >> 0] & 1 | 0;
}

function _stbir__min($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $a$addr = 0, $b$addr = 0, sp = 0, CSE$0 = 0, CSE$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $a$addr = sp + 4 | 0;
 $b$addr = sp;
 HEAP32[$a$addr >> 2] = $a;
 HEAP32[$b$addr >> 2] = $b;
 STACKTOP = sp;
 CSE$0 = HEAP32[$a$addr >> 2] | 0;
 CSE$1 = HEAP32[$b$addr >> 2] | 0;
 return ((CSE$0 | 0) < (CSE$1 | 0) ? CSE$0 | 0 : CSE$1 | 0) | 0;
}

function _ScrollCallback($window, $xoffset, $yoffset) {
 $window = $window | 0;
 $xoffset = +$xoffset;
 $yoffset = +$yoffset;
 var $yoffset$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 $yoffset$addr = sp;
 HEAP32[sp + 16 >> 2] = $window;
 HEAPF64[sp + 8 >> 3] = $xoffset;
 HEAPF64[$yoffset$addr >> 3] = $yoffset;
 HEAP32[7553] = ~~+HEAPF64[$yoffset$addr >> 3];
 STACKTOP = sp;
 return;
}

function _rlLoadIdentity() {
 var $0 = 0, $tmp = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 $tmp = sp;
 $0 = HEAP32[7379] | 0;
 _MatrixIdentity($tmp);
 dest = $0;
 src = $tmp;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function _stbir__use_height_upsampling($stbir_info) {
 $stbir_info = $stbir_info | 0;
 var $call = 0, $stbir_info$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stbir_info$addr = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 $call = _stbir__use_upsampling(Math_fround(HEAPF32[(HEAP32[$stbir_info$addr >> 2] | 0) + 60 >> 2])) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _stbir__use_width_upsampling($stbir_info) {
 $stbir_info = $stbir_info | 0;
 var $call = 0, $stbir_info$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $stbir_info$addr = sp;
 HEAP32[$stbir_info$addr >> 2] = $stbir_info;
 $call = _stbir__use_upsampling(Math_fround(HEAPF32[(HEAP32[$stbir_info$addr >> 2] | 0) + 56 >> 2])) | 0;
 STACKTOP = sp;
 return $call | 0;
}

function _rlMatrixMode($mode) {
 $mode = $mode | 0;
 var $mode$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $mode$addr = sp;
 HEAP32[$mode$addr >> 2] = $mode;
 if ((HEAP32[$mode$addr >> 2] | 0) == 5889) HEAP32[7379] = 29452; else if ((HEAP32[$mode$addr >> 2] | 0) == 5888) HEAP32[7379] = 29520;
 HEAP32[1892] = HEAP32[$mode$addr >> 2];
 STACKTOP = sp;
 return;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (setTempRet0(($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0), $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function ___memrchr($m, $c, $n) {
 $m = $m | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $0 = 0, $dec8$in = 0, $retval$0 = 0;
 L1 : do if (!$n) $retval$0 = 0; else {
  $0 = $c & 255;
  $dec8$in = $n;
  while (1) {
   $dec8$in = $dec8$in + -1 | 0;
   if ((HEAP8[$m + $dec8$in >> 0] | 0) == $0 << 24 >> 24) break;
   if (!$dec8$in) {
    $retval$0 = 0;
    break L1;
   }
  }
  $retval$0 = $m + $dec8$in | 0;
 } while (0);
 return $retval$0 | 0;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $1 = 0, $spec$select = 0, $sub$ptr$sub = 0, $wpos = 0;
 $wpos = $f + 20 | 0;
 $1 = HEAP32[$wpos >> 2] | 0;
 $sub$ptr$sub = (HEAP32[$f + 16 >> 2] | 0) - $1 | 0;
 $spec$select = $sub$ptr$sub >>> 0 > $l >>> 0 ? $l : $sub$ptr$sub;
 _memcpy($1 | 0, $s | 0, $spec$select | 0) | 0;
 HEAP32[$wpos >> 2] = (HEAP32[$wpos >> 2] | 0) + $spec$select;
 return $l | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function ___unlist_locked_file($f) {
 $f = $f | 0;
 var $$pre = 0, $$sink = 0, $1 = 0, $4 = 0;
 if (HEAP32[$f + 68 >> 2] | 0) {
  $1 = HEAP32[$f + 132 >> 2] | 0;
  $$pre = $f + 128 | 0;
  if ($1 | 0) HEAP32[$1 + 128 >> 2] = HEAP32[$$pre >> 2];
  $4 = HEAP32[$$pre >> 2] | 0;
  if (!$4) $$sink = (___pthread_self_587() | 0) + 232 | 0; else $$sink = $4 + 132 | 0;
  HEAP32[$$sink >> 2] = $1;
 }
 return;
}

function _CharCallback($window, $key) {
 $window = $window | 0;
 $key = $key | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[sp + 4 >> 2] = $window;
 HEAP32[sp >> 2] = $key;
 if ((HEAP32[7554] | 0) >= 16) {
  STACKTOP = sp;
  return;
 }
 HEAP32[7554] = (HEAP32[7554] | 0) + 1;
 STACKTOP = sp;
 return;
}

function _stbir__use_upsampling($ratio) {
 $ratio = Math_fround($ratio);
 var $conv = 0, $ratio$addr = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $ratio$addr = sp;
 HEAPF32[$ratio$addr >> 2] = $ratio;
 $conv = Math_fround(HEAPF32[$ratio$addr >> 2]) > Math_fround(1.0) & 1;
 STACKTOP = sp;
 return $conv | 0;
}

function _srand($s) {
 $s = $s | 0;
 var $0 = 0, $4 = 0, $seed = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $seed = sp;
 $0 = $seed;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 $4 = $seed;
 HEAP32[$4 >> 2] = $s + -1;
 HEAP32[$4 + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _rlNormal3f($x, $y, $z) {
 $x = Math_fround($x);
 $y = Math_fround($y);
 $z = Math_fround($z);
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[sp + 8 >> 2] = $x;
 HEAPF32[sp + 4 >> 2] = $y;
 HEAPF32[sp >> 2] = $z;
 STACKTOP = sp;
 return;
}

function dynCall_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 FUNCTION_TABLE_viiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0);
}

function _WindowIconifyCallback($window, $iconified) {
 $window = $window | 0;
 $iconified = $iconified | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[sp + 4 >> 2] = $window;
 HEAP32[sp >> 2] = $iconified;
 STACKTOP = sp;
 return;
}

function _CursorEnterCallback($window, $enter) {
 $window = $window | 0;
 $enter = $enter | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[sp + 4 >> 2] = $window;
 HEAP32[sp >> 2] = $enter;
 STACKTOP = sp;
 return;
}

function dynCall_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 FUNCTION_TABLE_viiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0);
}

function _GetFontDefault($agg$result) {
 $agg$result = $agg$result | 0;
 var dest = 0, src = 0, stop = 0;
 dest = $agg$result;
 src = 30264;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function dynCall_viffff(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = Math_fround(a2);
 a3 = Math_fround(a3);
 a4 = Math_fround(a4);
 a5 = Math_fround(a5);
 FUNCTION_TABLE_viffff[index & 3](a1 | 0, Math_fround(a2), Math_fround(a3), Math_fround(a4), Math_fround(a5));
}

function _SetMatrixProjection($proj) {
 $proj = $proj | 0;
 var dest = 0, src = 0, stop = 0;
 dest = 29452;
 src = $proj;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function _SetMatrixModelview($view) {
 $view = $view | 0;
 var dest = 0, src = 0, stop = 0;
 dest = 29520;
 src = $view;
 stop = dest + 64 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 return;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits | 0);
  return low << bits;
 }
 setTempRet0(low << bits - 32 | 0);
 return 0;
}

function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  setTempRet0(high >>> bits | 0);
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 setTempRet0(0);
 return high >>> bits - 32 | 0;
}

function ___ofl_add($f) {
 $f = $f | 0;
 var $1 = 0, $call = 0;
 $call = ___ofl_lock() | 0;
 HEAP32[$f + 56 >> 2] = HEAP32[$call >> 2];
 $1 = HEAP32[$call >> 2] | 0;
 if ($1 | 0) HEAP32[$1 + 52 >> 2] = $f;
 HEAP32[$call >> 2] = $f;
 ___ofl_unlock();
 return $f | 0;
}

function dynCall_vffff(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = Math_fround(a1);
 a2 = Math_fround(a2);
 a3 = Math_fround(a3);
 a4 = Math_fround(a4);
 FUNCTION_TABLE_vffff[index & 3](Math_fround(a1), Math_fround(a2), Math_fround(a3), Math_fround(a4));
}

function _GetCurrentTime() {
 var $time = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 $time = sp;
 HEAPF64[$time >> 3] = 0.0;
 STACKTOP = sp;
 return +(+HEAPF64[$time >> 3]);
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0, CSE$0 = 0;
 CSE$0 = b - d | 0;
 h = (CSE$0 | 0) >>> 0;
 h = (CSE$0 | 0) - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (setTempRet0(h | 0), a - c >>> 0 | 0) | 0;
}

function dynCall_iidiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iidiiii[index & 1](a1 | 0, +a2, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function _stbir__support_zero($s) {
 $s = Math_fround($s);
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[sp >> 2] = $s;
 STACKTOP = sp;
 return Math_fround(0.0);
}

function _stbir__support_two($s) {
 $s = Math_fround($s);
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[sp >> 2] = $s;
 STACKTOP = sp;
 return Math_fround(2.0);
}

function _stbir__support_one($s) {
 $s = Math_fround($s);
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAPF32[sp >> 2] = $s;
 STACKTOP = sp;
 return Math_fround(1.0);
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function dynCall_vifff(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = Math_fround(a2);
 a3 = Math_fround(a3);
 a4 = Math_fround(a4);
 FUNCTION_TABLE_vifff[index & 3](a1 | 0, Math_fround(a2), Math_fround(a3), Math_fround(a4));
}

function _pop_arg_long_double($arg, $ap) {
 $arg = $arg | 0;
 $ap = $ap | 0;
 var $5 = 0, $6 = 0.0;
 $5 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
 $6 = +HEAPF64[$5 >> 3];
 HEAP32[$ap >> 2] = $5 + 8;
 HEAPF64[$arg >> 3] = $6;
 return;
}

function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0);
 return ret | 0;
}

function ___wasi_syscall_ret($code) {
 $code = $code | 0;
 var $retval$0 = 0;
 if (!($code << 16 >> 16)) $retval$0 = 0; else {
  HEAP32[(___errno_location() | 0) >> 2] = $code & 65535;
  $retval$0 = -1;
 }
 return $retval$0 | 0;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function _ClearBackground($color) {
 $color = $color | 0;
 _rlClearColor(HEAP8[$color >> 0] | 0, HEAP8[$color + 1 >> 0] | 0, HEAP8[$color + 2 >> 0] | 0, HEAP8[$color + 3 >> 0] | 0);
 _rlClearScreenBuffers();
 return;
}

function _emscripten_glVertexAttrib4f$legalf32(a, b, c, d, e) {
 a = a | 0;
 b = Math_fround(b);
 c = Math_fround(c);
 d = Math_fround(d);
 e = Math_fround(e);
 _emscripten_glVertexAttrib4f(a | 0, +b, +c, +d, +e);
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $retval$0 = 0;
 if ($r >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $r;
  $retval$0 = -1;
 } else $retval$0 = $r;
 return $retval$0 | 0;
}

function ___DOUBLE_BITS_654($__f) {
 $__f = +$__f;
 var $0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $__f;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 setTempRet0(HEAP32[tempDoublePtr + 4 >> 2] | 0);
 return $0 | 0;
}

function _emscripten_glUniform4f$legalf32(a, b, c, d, e) {
 a = a | 0;
 b = Math_fround(b);
 c = Math_fround(c);
 d = Math_fround(d);
 e = Math_fround(e);
 _emscripten_glUniform4f(a | 0, +b, +c, +d, +e);
}

function b27(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 nullFunc_viiiiiiiii(27);
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function dynCall_viff(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = Math_fround(a2);
 a3 = Math_fround(a3);
 FUNCTION_TABLE_viff[index & 3](a1 | 0, Math_fround(a2), Math_fround(a3));
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function dynCall_fff(index, a1, a2) {
 index = index | 0;
 a1 = Math_fround(a1);
 a2 = Math_fround(a2);
 return Math_fround(FUNCTION_TABLE_fff[index & 7](Math_fround(a1), Math_fround(a2)));
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (setTempRet0(b + d + (l >>> 0 < a >>> 0 | 0) >>> 0 | 0), l | 0) | 0;
}

function _emscripten_glVertexAttrib3f$legalf32(a, b, c, d) {
 a = a | 0;
 b = Math_fround(b);
 c = Math_fround(c);
 d = Math_fround(d);
 _emscripten_glVertexAttrib3f(a | 0, +b, +c, +d);
}

function b26(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 nullFunc_viiiiiiii(26);
}

function _emscripten_glClearColor$legalf32(a, b, c, d) {
 a = Math_fround(a);
 b = Math_fround(b);
 c = Math_fround(c);
 d = Math_fround(d);
 _emscripten_glClearColor(+a, +b, +c, +d);
}

function _emscripten_glBlendColor$legalf32(a, b, c, d) {
 a = Math_fround(a);
 b = Math_fround(b);
 c = Math_fround(c);
 d = Math_fround(d);
 _emscripten_glBlendColor(+a, +b, +c, +d);
}

function _strchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $call = 0;
 $call = ___strchrnul($s, $c) | 0;
 return ((HEAP8[$call >> 0] | 0) == ($c & 255) << 24 >> 24 ? $call : 0) | 0;
}

function _strpbrk($s, $b) {
 $s = $s | 0;
 $b = $b | 0;
 var $add$ptr = 0;
 $add$ptr = $s + (_strcspn($s, $b) | 0) | 0;
 return ((HEAP8[$add$ptr >> 0] | 0) == 0 ? 0 : $add$ptr) | 0;
}

function dynCall_viif(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = Math_fround(a3);
 FUNCTION_TABLE_viif[index & 1](a1 | 0, a2 | 0, Math_fround(a3));
}

function _emscripten_glUniform3f$legalf32(a, b, c, d) {
 a = a | 0;
 b = Math_fround(b);
 c = Math_fround(c);
 d = Math_fround(d);
 _emscripten_glUniform3f(a | 0, +b, +c, +d);
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function dynCall_vff(index, a1, a2) {
 index = index | 0;
 a1 = Math_fround(a1);
 a2 = Math_fround(a2);
 FUNCTION_TABLE_vff[index & 3](Math_fround(a1), Math_fround(a2));
}

function _fputs($s, $f) {
 $s = $s | 0;
 $f = $f | 0;
 var $call = 0;
 $call = _strlen($s) | 0;
 return ((_fwrite($s, 1, $call, $f) | 0) != ($call | 0)) << 31 >> 31 | 0;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $retval$0 = 0;
 if (!$s) $retval$0 = 0; else $retval$0 = _wcrtomb($s, $wc, 0) | 0;
 return $retval$0 | 0;
}

function b25(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_viiiiiii(25);
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 63](a1 | 0, a2 | 0, a3 | 0);
}

function b18(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = Math_fround(p1);
 p2 = Math_fround(p2);
 p3 = Math_fround(p3);
 p4 = Math_fround(p4);
 nullFunc_viffff(18);
}

function _rlglDraw() {
 if ((HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) >> 2] | 0) <= 0) return;
 _UpdateBuffersDefault();
 _DrawBuffersDefault();
 return;
}

function _emscripten_glVertexAttrib2f$legalf32(a, b, c) {
 a = a | 0;
 b = Math_fround(b);
 c = Math_fround(c);
 _emscripten_glVertexAttrib2f(a | 0, +b, +c);
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function dynCall_vif(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = Math_fround(a2);
 FUNCTION_TABLE_vif[index & 3](a1 | 0, Math_fround(a2));
}

function dynCall_vfi(index, a1, a2) {
 index = index | 0;
 a1 = Math_fround(a1);
 a2 = a2 | 0;
 FUNCTION_TABLE_vfi[index & 1](Math_fround(a1), a2 | 0);
}

function b4(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iidiiii(4);
 return 0;
}

function ___emscripten_stdout_seek($f, $0, $1, $whence) {
 $f = $f | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $whence = $whence | 0;
 setTempRet0(0);
 return 0;
}

function dynCall_vidd(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = +a3;
 FUNCTION_TABLE_vidd[index & 3](a1 | 0, +a2, +a3);
}

function _emscripten_glTexParameterf$legalf32(a, b, c) {
 a = a | 0;
 b = b | 0;
 c = Math_fround(c);
 _emscripten_glTexParameterf(a | 0, b | 0, +c);
}

function _emscripten_glUniform2f$legalf32(a, b, c) {
 a = a | 0;
 b = Math_fround(b);
 c = Math_fround(c);
 _emscripten_glUniform2f(a | 0, +b, +c);
}

function b24(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(24);
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 3](a1 | 0, a2 | 0) | 0;
}

function dynCall_ff(index, a1) {
 index = index | 0;
 a1 = Math_fround(a1);
 return Math_fround(FUNCTION_TABLE_ff[index & 7](Math_fround(a1)));
}

function b11(p0, p1, p2, p3) {
 p0 = Math_fround(p0);
 p1 = Math_fround(p1);
 p2 = Math_fround(p2);
 p3 = Math_fround(p3);
 nullFunc_vffff(11);
}

function _strcat($dest, $src) {
 $dest = $dest | 0;
 $src = $src | 0;
 _strcpy($dest + (_strlen($dest) | 0) | 0, $src) | 0;
 return $dest | 0;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return ___vfprintf_internal($f, $fmt, $ap, 1, 5) | 0;
}

function _out($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 if (!(HEAP32[$f >> 2] & 32)) ___fwritex($s, $l, $f) | 0;
 return;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 63](a1 | 0, a2 | 0);
}

function b17(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = Math_fround(p1);
 p2 = Math_fround(p2);
 p3 = Math_fround(p3);
 nullFunc_vifff(17);
}

function _vsprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return _vsnprintf($s, 2147483647, $fmt, $ap) | 0;
}

function _emscripten_glPolygonOffset$legalf32(a, b) {
 a = Math_fround(a);
 b = Math_fround(b);
 _emscripten_glPolygonOffset(+a, +b);
}

function _rlDisableTexture() {
 if ((HEAP32[20928 + ((HEAP32[7415] | 0) * 48 | 0) >> 2] | 0) < 8192) return;
 _rlglDraw();
 return;
}

function _tolower($c) {
 $c = $c | 0;
 var $tobool = 0;
 $tobool = (_isupper($c) | 0) == 0;
 return ($tobool ? $c : $c | 32) | 0;
}

function _emscripten_glVertexAttrib1f$legalf32(a, b) {
 a = a | 0;
 b = Math_fround(b);
 _emscripten_glVertexAttrib1f(a | 0, +b);
}

function _emscripten_glSampleCoverage$legalf32(a, b) {
 a = Math_fround(a);
 b = b | 0;
 _emscripten_glSampleCoverage(+a, b | 0);
}

function _emscripten_glDepthRangef$legalf32(a, b) {
 a = Math_fround(a);
 b = Math_fround(b);
 _emscripten_glDepthRangef(+a, +b);
}

function ___stdio_close($f) {
 $f = $f | 0;
 return (___wasi_fd_close(_dummy_544(HEAP32[$f + 60 >> 2] | 0) | 0) | 0) & 65535 | 0;
}

function b23(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(23);
}

function dynCall_vf(index, a1) {
 index = index | 0;
 a1 = Math_fround(a1);
 FUNCTION_TABLE_vf[index & 3](Math_fround(a1));
}

function _emscripten_glUniform1f$legalf32(a, b) {
 a = a | 0;
 b = Math_fround(b);
 _emscripten_glUniform1f(a | 0, +b);
}

function _strncpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 ___stpncpy($d, $s, $n) | 0;
 return $d | 0;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0;
}

function _strcpy($dest, $src) {
 $dest = $dest | 0;
 $src = $src | 0;
 ___stpcpy($dest, $src) | 0;
 return $dest | 0;
}

function b7(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(7);
 return 0;
}

function _vprintf($fmt, $ap) {
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return _vfprintf(HEAP32[1899] | 0, $fmt, $ap) | 0;
}

function _strrchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 return ___memrchr($s, $c, (_strlen($s) | 0) + 1 | 0) | 0;
}

function b1(p0, p1) {
 p0 = Math_fround(p0);
 p1 = Math_fround(p1);
 nullFunc_fff(1);
 return Math_fround(0);
}

function b22(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(22);
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 31](a1 | 0);
}

function b16(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = Math_fround(p1);
 p2 = Math_fround(p2);
 nullFunc_viff(16);
}

function _emscripten_glClearDepthf$legalf32(a) {
 a = Math_fround(a);
 _emscripten_glClearDepthf(+a);
}

function _llvm_round_f64(d) {
 d = +d;
 return d >= 0.0 ? +Math_floor(d + .5) : +Math_ceil(d - .5);
}

function b6(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(6);
 return 0;
}

function b20(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = Math_fround(p2);
 nullFunc_viif(20);
}

function _emscripten_glLineWidth$legalf32(a) {
 a = Math_fround(a);
 _emscripten_glLineWidth(+a);
}

function _main() {
 _InitWindow(800, 450, 7848);
 _emscripten_set_main_loop(1, 0, 1);
 return 0;
}

function _UnloadImage($image) {
 $image = $image | 0;
 _free(HEAP32[$image >> 2] | 0);
 return;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 3]() | 0;
}

function b21(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(21);
}

function b10(p0, p1) {
 p0 = Math_fround(p0);
 p1 = Math_fround(p1);
 nullFunc_vff(10);
}

function _InitTimer() {
 _srand(_time(0) | 0);
 HEAPF64[3676] = +_GetTime();
 return;
}

function b14(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = +p2;
 nullFunc_vidd(14);
}

function b0(p0) {
 p0 = Math_fround(p0);
 nullFunc_ff(0);
 return Math_fround(0);
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7]();
}

function b5(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(5);
 return 0;
}

function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = Math_fround(p1);
 nullFunc_vif(15);
}

function b12(p0, p1) {
 p0 = Math_fround(p0);
 p1 = p1 | 0;
 nullFunc_vfi(12);
}

function _isupper($c) {
 $c = $c | 0;
 return ($c + -65 | 0) >>> 0 < 26 | 0;
}

function _isdigit($c) {
 $c = $c | 0;
 return ($c + -48 | 0) >>> 0 < 10 | 0;
}

function _SwapBuffers() {
 _glfwSwapBuffers(HEAP32[7522] | 0);
 return;
}

function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(19);
}

function ___emscripten_stdout_close($f) {
 $f = $f | 0;
 return 0;
}

function _GetFrameTime() {
 return Math_fround(+HEAPF64[3677]);
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function _rlClearScreenBuffers() {
 _glClear(16640);
 return;
}

function ___pthread_self_587() {
 return _pthread_self() | 0;
}

function ___pthread_self_423() {
 return _pthread_self() | 0;
}

function setEmtStackMax(x) {
 x = x | 0;
 EMT_STACK_MAX = x;
}

function emtStackRestore(x) {
 x = x | 0;
 EMTSTACKTOP = x;
}

function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(3);
 return 0;
}

function _dummy_544($fd) {
 $fd = $fd | 0;
 return $fd | 0;
}

function b9(p0) {
 p0 = Math_fround(p0);
 nullFunc_vf(9);
}

function setAsyncState(x) {
 x = x | 0;
 asyncState = x;
}

function ___ofl_lock() {
 ___lock(30372);
 return 30380;
}

function _GetScreenHeight() {
 return HEAP32[7526] | 0;
}

function getEmtStackMax() {
 return EMT_STACK_MAX | 0;
}

function ___ofl_unlock() {
 ___unlock(30372);
 return;
}

function _GetScreenWidth() {
 return HEAP32[7525] | 0;
}

function _emscripten_get_sbrk_ptr() {
 return 31936;
}

function ___unlockfile($f) {
 $f = $f | 0;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 return 1;
}

function emterpret(pc) {
 pc = pc | 0;
 assert(0);
}

function emtStackSave() {
 return EMTSTACKTOP | 0;
}

function b13(p0) {
 p0 = p0 | 0;
 nullFunc_vi(13);
}

function _GetTime() {
 return +(+_glfwGetTime());
}

function ___errno_location() {
 return 30368;
}

function stackSave() {
 return STACKTOP | 0;
}

function b2() {
 nullFunc_i(2);
 return 0;
}

function _pthread_self() {
 return 7604;
}

function _rlGetVersion() {
 return 4;
}

function b8() {
 nullFunc_v(8);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ff = [b0,_stbir__support_zero,_stbir__support_trapezoid,_stbir__support_one,_stbir__support_two,b0,b0,b0];
var FUNCTION_TABLE_fff = [b1,_stbir__filter_trapezoid,_stbir__filter_triangle,_stbir__filter_cubic,_stbir__filter_catmullrom,_stbir__filter_mitchell,b1,b1];
var FUNCTION_TABLE_i = [b2,_emscripten_glCreateProgram,_emscripten_glGetError,b2];
var FUNCTION_TABLE_ii = [b3,___emscripten_stdout_close,___stdio_close,_emscripten_glIsQueryEXT,_emscripten_glIsVertexArrayOES,_emscripten_glCheckFramebufferStatus,_emscripten_glCreateShader,_emscripten_glGetString,_emscripten_glIsBuffer,_emscripten_glIsEnabled,_emscripten_glIsFramebuffer,_emscripten_glIsProgram,_emscripten_glIsRenderbuffer,_emscripten_glIsShader,_emscripten_glIsTexture,b3];
var FUNCTION_TABLE_iidiiii = [b4,_fmt_fp];
var FUNCTION_TABLE_iii = [b5,_emscripten_glGetAttribLocation,_emscripten_glGetUniformLocation,b5];
var FUNCTION_TABLE_iiii = [b6,___stdio_write,_sn_write,_EmscriptenFullscreenChangeCallback,_EmscriptenKeyboardCallback,_EmscriptenMouseCallback,_EmscriptenTouchCallback,_EmscriptenGamepadCallback,___stdio_read,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiii = [b7,___emscripten_stdout_seek,___stdio_seek,b7];
var FUNCTION_TABLE_v = [b8,__ZL15UpdateDrawFramev,_emscripten_glFinish,_emscripten_glFlush,_emscripten_glReleaseShaderCompiler,b8,b8,b8];
var FUNCTION_TABLE_vf = [b9,_emscripten_glClearDepthf$legalf32,_emscripten_glLineWidth$legalf32,b9];
var FUNCTION_TABLE_vff = [b10,_emscripten_glDepthRangef$legalf32,_emscripten_glPolygonOffset$legalf32,b10];
var FUNCTION_TABLE_vffff = [b11,_emscripten_glBlendColor$legalf32,_emscripten_glClearColor$legalf32,b11];
var FUNCTION_TABLE_vfi = [b12,_emscripten_glSampleCoverage$legalf32];
var FUNCTION_TABLE_vi = [b13,_emscripten_glEndQueryEXT,_emscripten_glBindVertexArrayOES,_emscripten_glActiveTexture,_emscripten_glBlendEquation,_emscripten_glClear,_emscripten_glClearStencil,_emscripten_glCompileShader,_emscripten_glCullFace,_emscripten_glDeleteProgram,_emscripten_glDeleteShader,_emscripten_glDepthFunc,_emscripten_glDepthMask,_emscripten_glDisable,_emscripten_glDisableVertexAttribArray,_emscripten_glEnable,_emscripten_glEnableVertexAttribArray,_emscripten_glFrontFace,_emscripten_glGenerateMipmap,_emscripten_glLinkProgram,_emscripten_glStencilMask,_emscripten_glUseProgram,_emscripten_glValidateProgram,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_vidd = [b14,_MouseCursorPosCallback,_ScrollCallback,b14];
var FUNCTION_TABLE_vif = [b15,_emscripten_glUniform1f$legalf32,_emscripten_glVertexAttrib1f$legalf32,b15];
var FUNCTION_TABLE_viff = [b16,_emscripten_glUniform2f$legalf32,_emscripten_glVertexAttrib2f$legalf32,b16];
var FUNCTION_TABLE_vifff = [b17,_emscripten_glUniform3f$legalf32,_emscripten_glVertexAttrib3f$legalf32,b17];
var FUNCTION_TABLE_viffff = [b18,_emscripten_glUniform4f$legalf32,_emscripten_glVertexAttrib4f$legalf32,b18];
var FUNCTION_TABLE_vii = [b19,_ErrorCallback,_CursorEnterCallback,_CharCallback,_WindowIconifyCallback,_pop_arg_long_double,_emscripten_glVertexAttribDivisorANGLE,_emscripten_glGenQueriesEXT,_emscripten_glDeleteQueriesEXT,_emscripten_glBeginQueryEXT,_emscripten_glQueryCounterEXT,_emscripten_glDeleteVertexArraysOES,_emscripten_glGenVertexArraysOES,_emscripten_glDrawBuffersWEBGL,_emscripten_glAttachShader,_emscripten_glBindBuffer,_emscripten_glBindFramebuffer,_emscripten_glBindRenderbuffer,_emscripten_glBindTexture,_emscripten_glBlendEquationSeparate,_emscripten_glBlendFunc,_emscripten_glDeleteBuffers,_emscripten_glDeleteFramebuffers,_emscripten_glDeleteRenderbuffers,_emscripten_glDeleteTextures,_emscripten_glDetachShader,_emscripten_glGenBuffers,_emscripten_glGenFramebuffers,_emscripten_glGenRenderbuffers
,_emscripten_glGenTextures,_emscripten_glGetBooleanv,_emscripten_glGetFloatv,_emscripten_glGetIntegerv,_emscripten_glHint,_emscripten_glPixelStorei,_emscripten_glStencilMaskSeparate,_emscripten_glUniform1i,_emscripten_glVertexAttrib1fv,_emscripten_glVertexAttrib2fv,_emscripten_glVertexAttrib3fv,_emscripten_glVertexAttrib4fv,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_viif = [b20,_emscripten_glTexParameterf$legalf32];
var FUNCTION_TABLE_viii = [b21,_WindowSizeCallback,_WindowDropCallback,_emscripten_glGetQueryivEXT,_emscripten_glGetQueryObjectivEXT,_emscripten_glGetQueryObjectuivEXT,_emscripten_glGetQueryObjecti64vEXT,_emscripten_glGetQueryObjectui64vEXT,_emscripten_glBindAttribLocation,_emscripten_glDrawArrays,_emscripten_glGetBufferParameteriv,_emscripten_glGetProgramiv,_emscripten_glGetRenderbufferParameteriv,_emscripten_glGetShaderiv,_emscripten_glGetTexParameterfv,_emscripten_glGetTexParameteriv,_emscripten_glGetUniformfv,_emscripten_glGetUniformiv,_emscripten_glGetVertexAttribfv,_emscripten_glGetVertexAttribiv,_emscripten_glGetVertexAttribPointerv,_emscripten_glStencilFunc,_emscripten_glStencilOp,_emscripten_glTexParameterfv,_emscripten_glTexParameteri,_emscripten_glTexParameteriv,_emscripten_glUniform1fv,_emscripten_glUniform1iv,_emscripten_glUniform2fv
,_emscripten_glUniform2i,_emscripten_glUniform2iv,_emscripten_glUniform3fv,_emscripten_glUniform3iv,_emscripten_glUniform4fv,_emscripten_glUniform4iv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_viiii = [b22,_MouseButtonCallback,_emscripten_glDrawArraysInstancedANGLE,_emscripten_glBlendFuncSeparate,_emscripten_glBufferData,_emscripten_glBufferSubData,_emscripten_glColorMask,_emscripten_glDrawElements,_emscripten_glFramebufferRenderbuffer,_emscripten_glGetAttachedShaders,_emscripten_glGetFramebufferAttachmentParameteriv,_emscripten_glGetProgramInfoLog,_emscripten_glGetShaderInfoLog,_emscripten_glGetShaderPrecisionFormat,_emscripten_glGetShaderSource,_emscripten_glRenderbufferStorage,_emscripten_glScissor,_emscripten_glShaderSource,_emscripten_glStencilFuncSeparate,_emscripten_glStencilOpSeparate,_emscripten_glUniform3i,_emscripten_glUniformMatrix2fv,_emscripten_glUniformMatrix3fv,_emscripten_glUniformMatrix4fv,_emscripten_glViewport,b22,b22,b22,b22
,b22,b22,b22];
var FUNCTION_TABLE_viiiii = [b23,_KeyCallback,_emscripten_glDrawElementsInstancedANGLE,_emscripten_glFramebufferTexture2D,_emscripten_glShaderBinary,_emscripten_glUniform4i,b23,b23];
var FUNCTION_TABLE_viiiiii = [b24,_emscripten_glVertexAttribPointer];
var FUNCTION_TABLE_viiiiiii = [b25,_emscripten_glGetActiveAttrib,_emscripten_glGetActiveUniform,_emscripten_glReadPixels];
var FUNCTION_TABLE_viiiiiiii = [b26,_emscripten_glCompressedTexImage2D,_emscripten_glCopyTexImage2D,_emscripten_glCopyTexSubImage2D];
var FUNCTION_TABLE_viiiiiiiii = [b27,_emscripten_glCompressedTexSubImage2D,_emscripten_glTexImage2D,_emscripten_glTexSubImage2D];

  return { ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_GetProcAddress: _emscripten_GetProcAddress, _emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_round_f64: _llvm_round_f64, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _strstr: _strstr, dynCall_ff: dynCall_ff, dynCall_fff: dynCall_fff, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_v: dynCall_v, dynCall_vf: dynCall_vf, dynCall_vff: dynCall_vff, dynCall_vffff: dynCall_vffff, dynCall_vfi: dynCall_vfi, dynCall_vi: dynCall_vi, dynCall_vidd: dynCall_vidd, dynCall_vif: dynCall_vif, dynCall_viff: dynCall_viff, dynCall_vifff: dynCall_vifff, dynCall_viffff: dynCall_viffff, dynCall_vii: dynCall_vii, dynCall_viif: dynCall_viif, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, emtStackRestore: emtStackRestore, emtStackSave: emtStackSave, emterpret: emterpret, establishStackSpace: establishStackSpace, getEmtStackMax: getEmtStackMax, setAsyncState: setAsyncState, setEmtStackMax: setEmtStackMax, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

Module["asm"] = asm;
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___errno_location"].apply(null, arguments)
};

var ___muldi3 = Module["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___muldi3"].apply(null, arguments)
};

var ___udivdi3 = Module["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___udivdi3"].apply(null, arguments)
};

var _bitshift64Lshr = Module["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Lshr"].apply(null, arguments)
};

var _bitshift64Shl = Module["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Shl"].apply(null, arguments)
};

var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_GetProcAddress"].apply(null, arguments)
};

var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_get_sbrk_ptr"].apply(null, arguments)
};

var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fflush"].apply(null, arguments)
};

var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_free"].apply(null, arguments)
};

var _i64Add = Module["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Add"].apply(null, arguments)
};

var _i64Subtract = Module["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Subtract"].apply(null, arguments)
};

var _llvm_round_f64 = Module["_llvm_round_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_llvm_round_f64"].apply(null, arguments)
};

var _main = Module["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_main"].apply(null, arguments)
};

var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_malloc"].apply(null, arguments)
};

var _memcpy = Module["_memcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memcpy"].apply(null, arguments)
};

var _memmove = Module["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memmove"].apply(null, arguments)
};

var _memset = Module["_memset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memset"].apply(null, arguments)
};

var _strstr = Module["_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strstr"].apply(null, arguments)
};

var emtStackRestore = Module["emtStackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emtStackRestore"].apply(null, arguments)
};

var emtStackSave = Module["emtStackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emtStackSave"].apply(null, arguments)
};

var emterpret = Module["emterpret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emterpret"].apply(null, arguments)
};

var establishStackSpace = Module["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["establishStackSpace"].apply(null, arguments)
};

var getEmtStackMax = Module["getEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getEmtStackMax"].apply(null, arguments)
};

var setAsyncState = Module["setAsyncState"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setAsyncState"].apply(null, arguments)
};

var setEmtStackMax = Module["setEmtStackMax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setEmtStackMax"].apply(null, arguments)
};

var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

var dynCall_ff = Module["dynCall_ff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ff"].apply(null, arguments)
};

var dynCall_fff = Module["dynCall_fff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fff"].apply(null, arguments)
};

var dynCall_i = Module["dynCall_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_i"].apply(null, arguments)
};

var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};

var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments)
};

var dynCall_vf = Module["dynCall_vf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vf"].apply(null, arguments)
};

var dynCall_vff = Module["dynCall_vff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vff"].apply(null, arguments)
};

var dynCall_vffff = Module["dynCall_vffff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vffff"].apply(null, arguments)
};

var dynCall_vfi = Module["dynCall_vfi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vfi"].apply(null, arguments)
};

var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

var dynCall_vidd = Module["dynCall_vidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vidd"].apply(null, arguments)
};

var dynCall_vif = Module["dynCall_vif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vif"].apply(null, arguments)
};

var dynCall_viff = Module["dynCall_viff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viff"].apply(null, arguments)
};

var dynCall_vifff = Module["dynCall_vifff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vifff"].apply(null, arguments)
};

var dynCall_viffff = Module["dynCall_viffff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viffff"].apply(null, arguments)
};

var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

var dynCall_viif = Module["dynCall_viif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viif"].apply(null, arguments)
};

var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments)
};

var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};

var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiii"].apply(null, arguments)
};

var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiii"].apply(null, arguments)
};

var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiii"].apply(null, arguments)
};
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Pointer_stringify")) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "establishStackSpace")) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "calledRun")) Object.defineProperty(Module, "calledRun", { configurable: true, get: function() { abort("'calledRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") } });



var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];


  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  var initialEmtStackTop = Module['emtStackSave']();

  try {


    var ret = entryFunction(argc, argv);


    // if we are saving the stack, then do not call exit, we are not
    // really exiting now, just unwinding the JS stack
    if (!noExitRuntime) {
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'unwind') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      Module['emtStackRestore'](initialEmtStackTop);
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}









